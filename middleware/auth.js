const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const database = require('../database/database');
require('dotenv').config({ path: './config.env' });

// Rate limiting –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const authLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞ (–±—ã–ª–æ 15 –º–∏–Ω—É—Ç)
  max: 50, // 50 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –æ–∫–Ω–æ (–±—ã–ª–æ 5)
  message: {
    success: false,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.'
  },
  standardHeaders: true,
  legacyHeaders: false,
  // –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ IP –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  skip: (req) => {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–±—Ä–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    return req.ip === '::1' || req.ip === '127.0.0.1';
  }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
      return res.status(401).json({ 
        success: false, 
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
      });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const user = await database.get(
      `SELECT u.*, GROUP_CONCAT(r.role_name) as roles 
       FROM Users u 
       LEFT JOIN UserRoles ur ON u.user_id = ur.user_id 
       LEFT JOIN Roles r ON ur.role_id = r.role_id 
       WHERE u.user_id = ?`,
      [decoded.userId]
    );

    if (!user) {
      return res.status(401).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    req.user = {
      ...user,
      roles: user.roles ? user.roles.split(',') : []
    };

    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ 
        success: false, 
        message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' 
      });
    }
    
    return res.status(403).json({ 
      success: false, 
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
    });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req, res, next) => {
  if (!req.user || !req.user.roles.includes('admin')) {
    return res.status(403).json({
      success: false,
      message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
    });
  }
  next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–¥–∞—á
const checkHandLimit = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    });
  }

  if (req.user.hand_limit <= 0) {
    return res.status(403).json({
      success: false,
      message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–∞—á. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    });
  }

  next();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ access —Ç–æ–∫–µ–Ω–∞
const generateAccessToken = (user) => {
  const jwtSecret = process.env.JWT_SECRET;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (!jwtSecret) {
    console.error('‚ùå JWT_SECRET –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –°–æ–¥–µ—Ä–∂–∏–º–æ–µ process.env:', {
      JWT_SECRET: process.env.JWT_SECRET,
      NODE_ENV: process.env.NODE_ENV,
      PATH_TO_CONFIG: './config.env'
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ config.env
    try {
      delete require.cache[require.resolve('path').resolve('./config.env')];
      require('dotenv').config({ path: './config.env' });
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ config.env –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log('üîë JWT_SECRET –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', process.env.JWT_SECRET ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ config:', err.message);
    }
  } else {
    console.log('‚úÖ JWT_SECRET –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  }

  return jwt.sign(
    { 
      userId: user.user_id,
      email: user.email,
      roles: user.roles || []
    },
    process.env.JWT_SECRET || 'fallback-secret-key-for-development',
    { 
      expiresIn: process.env.JWT_EXPIRES_IN || '15m',
      issuer: 'poker-simulator'
    }
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ refresh —Ç–æ–∫–µ–Ω–∞
const generateRefreshToken = () => {
  return jwt.sign(
    { type: 'refresh' },
    process.env.JWT_REFRESH_SECRET,
    { 
      expiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '7d',
      issuer: 'poker-simulator'
    }
  );
};

module.exports = {
  authenticateToken,
  requireAdmin,
  checkHandLimit,
  generateAccessToken,
  generateRefreshToken
}; 