// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ SUMMARY
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-summary-fix.js

// –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
const testPreflopSpot = `PokerStars Hand #175033914927511: Hold'em No Limit ($0.50/$1.00) - 2025-06-19T13:19:09.275Z.275Z GMT+03:00
Table 'PioSolver Table' 6-max Seat #5 is the button
Seat 1: CC_BB_OOP_vs_CO ($100.00 in chips)
Seat 2: Pio_EP ($100.00 in chips)
Seat 3: Pio_MP ($100.00 in chips)
Seat 4: RFI_IP_CO ($100.00 in chips)
Seat 5: Pio_BTN ($100.00 in chips)
Seat 6: Pio_SB ($100.00 in chips)
Pio_SB: posts small blind $0.50
CC_BB_OOP_vs_CO: posts big blind $1.00
*** HOLE CARDS ***
Pio_EP: folds
Pio_MP: folds
RFI_IP_CO: raises $1.75 to $2.50
Pio_BTN: folds
Pio_SB: folds
CC_BB_OOP_vs_CO: calls $1.50`;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
const testPlayers = new Map([
  ['player1', { id: 'player1', name: 'CC_BB_OOP_vs_CO', folded: false, cards: [{rank: 'J', suit: 'diamonds'}, {rank: '5', suit: 'diamonds'}] }],
  ['player2', { id: 'player2', name: 'RFI_IP_CO', folded: false, cards: [{rank: 'A', suit: 'spades'}, {rank: 'K', suit: 'hearts'}] }]
]);

const testActivePlayersScenario1 = [testPlayers.get('player1')]; // RFI_IP_CO —Ñ–æ–ª–¥–∏–ª
const testActivePlayersScenario2 = [testPlayers.get('player1'), testPlayers.get('player2')]; // –û–±–∞ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞

const testWinner = testPlayers.get('player1');

const testHandHistory = {
  actions: [
    { playerName: 'RFI_IP_CO', action: 'fold', street: 'flop' },
    { playerName: 'CC_BB_OOP_vs_CO', action: 'check', street: 'flop' }
  ]
};

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç–∞ PokerTable
class MockPokerTable {
  constructor() {
    this.preflopSpot = testPreflopSpot;
    this.players = testPlayers;
    this.currentHandHistory = testHandHistory;
    this.pot = 550; // $5.50 –≤ —Ü–µ–Ω—Ç–∞—Ö
  }

  formatCard(card) {
    const rank = card.rank === '10' ? 'T' : card.rank;
    const suitMap = {
      'spades': 's', 'hearts': 'h', 'diamonds': 'd', 'clubs': 'c'
    };
    const suit = suitMap[card.suit] || 's';
    return `${rank}${suit}`;
  }

  calculateRake() {
    return this.pot * 0.05; // 5% rake
  }

  getHandDescription(cards) {
    if (cards[0].rank === cards[1].rank) {
      return `a pair of ${cards[0].rank}s`;
    }
    return `${cards[0].rank} high`;
  }

  generateSummarySeats(winner, activePlayers) {
    let summaryText = '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö –∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞
    const seatMatches = Array.from(this.preflopSpot.matchAll(/Seat (\d+): ([^(]+) \([^)]+\)/g));
    
    // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç DEBUG generateSummarySeats:');
    console.log('  seatMatches:', seatMatches.map(m => `Seat ${m[1]}: ${m[2].trim()}`));
    console.log('  activePlayers:', activePlayers.map(p => `${p.name} (folded: ${p.folded})`));
    console.log('  winner:', winner ? winner.name : 'none');
    
    seatMatches.forEach(match => {
      const seatNumber = match[1];
      const playerName = match[2].trim();
      
      console.log(`\n  üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Seat ${seatNumber}: ${playerName}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      let position = '';
      if (this.preflopSpot.includes(`${playerName}: posts small blind`)) {
        position = ' (small blind)';
      } else if (this.preflopSpot.includes(`${playerName}: posts big blind`)) {
        position = ' (big blind)';
      } else if (this.preflopSpot.includes('is the button') && this.preflopSpot.includes(`Seat #${seatNumber} is the button`)) {
        position = ' (button)';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –∏–≥—Ä–æ–∫–æ–º
      const player = Array.from(this.players.values()).find(p => p.name === playerName);
      console.log(`    –ù–∞–π–¥–µ–Ω –≤ this.players:`, player ? `${player.name} (folded: ${player.folded})` : '–ù–ï–¢');
      
      if (player) {
        // –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–∞–∑–¥–∞—á–µ
        if (player.folded) {
          // –ò–≥—Ä–æ–∫ —Å—Ñ–æ–ª–¥–∏–ª –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç—Ñ–ª–æ–ø –∏–≥—Ä—ã
          console.log(`    ‚úÖ –ò–≥—Ä–æ–∫ —Å—Ñ–æ–ª–¥–∏–ª –Ω–∞ –ø–æ—Å—Ç—Ñ–ª–æ–ø–µ`);
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded on the Flop\n`;
        } else if (activePlayers.includes(player)) {
          // –ò–≥—Ä–æ–∫ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞
          if (player.id === winner.id) {
            console.log(`    ‚úÖ –ò–≥—Ä–æ–∫ –í–´–ò–ì–†–ê–õ`);
            const rakeAmount = this.calculateRake();
            const winAmount = this.pot - rakeAmount;
            const handDescription = this.getHandDescription(player.cards);
            summaryText += `Seat ${seatNumber}: ${playerName}${position} showed [${player.cards.map(c => this.formatCard(c)).join(' ')}] and won ($${(winAmount / 100).toFixed(2)}) with ${handDescription}\n`;
          } else {
            console.log(`    ‚úÖ –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª –Ω–æ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞`);
            const handDescription = this.getHandDescription(player.cards);
            summaryText += `Seat ${seatNumber}: ${playerName}${position} showed [${player.cards.map(c => this.formatCard(c)).join(' ')}] and lost with ${handDescription}\n`;
          }
        } else {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ–ª–¥–∏–ª–∏ –Ω–æ –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ folded
          console.log(`    ‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≤ activePlayers –∏ –Ω–µ folded - –≤–µ—Ä–æ—è—Ç–Ω–æ —Ñ–æ–ª–¥–∏–ª`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–¥–∞—á–∏
          const playerActions = this.currentHandHistory?.actions?.filter(a => a.playerName === playerName) || [];
          const hasFoldAction = playerActions.some(a => a.action === 'fold');
          
          if (hasFoldAction) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π —É–ª–∏—Ü–µ —Å—Ñ–æ–ª–¥–∏–ª
            const foldAction = playerActions.find(a => a.action === 'fold');
            const streetName = foldAction.street.charAt(0).toUpperCase() + foldAction.street.slice(1);
            summaryText += `Seat ${seatNumber}: ${playerName}${position} folded on the ${streetName}\n`;
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ fold action, –Ω–æ –∏–≥—Ä–æ–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–æ–ª–¥–∏–ª –Ω–∞ —Ñ–ª–æ–ø–µ
            summaryText += `Seat ${seatNumber}: ${playerName}${position} folded on the Flop\n`;
          }
        }
      } else {
        // –≠—Ç–æ –∏–≥—Ä–æ–∫ –∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç—Ñ–ª–æ–ø –∏–≥—Ä–µ
        console.log(`    ‚ùå –ò–≥—Ä–æ–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö - —Ñ–æ–ª–¥–∏–ª –Ω–∞ –ø—Ä–µ—Ñ–ª–æ–ø–µ`);
        if (this.preflopSpot.includes(`${playerName}: folds`) && !this.preflopSpot.includes(`${playerName}: posts`)) {
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded before Flop (didn't bet)\n`;
        } else {
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded before Flop\n`;
        }
      }
    });
    
    console.log(`  üìä SUMMARY —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n${summaryText}`);
    return summaryText;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å SUMMARY\n');

const mockTable = new MockPokerTable();

console.log('üìã –°—Ü–µ–Ω–∞—Ä–∏–π 1: RFI_IP_CO —Ñ–æ–ª–¥–∏–ª –Ω–∞ —Ñ–ª–æ–ø–µ');
console.log('='*50);
const summary1 = mockTable.generateSummarySeats(testWinner, testActivePlayersScenario1);
console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: RFI_IP_CO –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –∫–∞–∫ "folded on the Flop"');
console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç RFI_IP_CO?', summary1.includes('RFI_IP_CO') ? '–î–ê' : '–ù–ï–¢');

console.log('\n' + '='*60 + '\n');

console.log('üìã –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞');
console.log('='*50);
const summary2 = mockTable.generateSummarySeats(testWinner, testActivePlayersScenario2);
console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ SUMMARY');
console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç RFI_IP_CO?', summary2.includes('RFI_IP_CO') ? '–î–ê' : '–ù–ï–¢');
console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç CC_BB_OOP_vs_CO?', summary2.includes('CC_BB_OOP_vs_CO') ? '–î–ê' : '–ù–ï–¢'); 