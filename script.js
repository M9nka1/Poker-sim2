// ===== –û–°–ù–û–í–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –°–û–°–¢–û–Ø–ù–ò–ï =====

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
window.eventHandlersTracker = window.eventHandlersTracker || {
  globalClickHandlers: new Set(),
  renderTracker: new Set(),
  addGlobalClickHandler: function(handlerId, handler) {
    if (!this.globalClickHandlers.has(handlerId)) {
      this.globalClickHandlers.add(handlerId);
      document.addEventListener('click', handler);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞: ${handlerId}`);
    } else {
      console.log(`‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${handlerId}`);
    }
  },
  checkRenderStatus: function(containerId, itemsCount) {
    const renderKey = `${containerId}-${itemsCount}`;
    if (this.renderTracker.has(renderKey)) {
      console.log(`‚ö†Ô∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${containerId} —Å ${itemsCount} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return false; // –£–∂–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    }
    this.renderTracker.add(renderKey);
    return true; // –ú–æ–∂–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
  },
  clearRenderTracker: function() {
    this.renderTracker.clear();
    console.log('üßπ –û—á–∏—â–µ–Ω —Ç—Ä–µ–∫–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
  }
};

const state = {
  settings: {
    tablesCount: 1,
    rakePercent: 5,
    rakeDollar: 1.00,
    preflopSpot: '',
    boardSettings: {
      flop: {
        specificCards: [null, null, null],
        suits: 'any',
        pairing: 'any',
        ranks: {
          high: ['any'],
          middle: ['any'],
          low: ['any']
        }
      },
      turn: {
        suits: 'any',
        pairing: 'any',
        ranks: ['any']
      },
      river: {
        suits: 'any',
        pairing: 'any',
        ranks: ['any']
      }
    },
    playerRanges: {
      player1: {
        currentWeight: 0, // –¢–µ–∫—É—â–∏–π –≤–µ—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä—É–∫ (0-100%)
        handWeights: {} // –û–±—ä–µ–∫—Ç –≥–¥–µ –∫–ª—é—á - —Ä—É–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–µ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
      },
      player2: {
        currentWeight: 0, // –¢–µ–∫—É—â–∏–π –≤–µ—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä—É–∫ (0-100%)
        handWeights: {} // –û–±—ä–µ–∫—Ç –≥–¥–µ –∫–ª—é—á - —Ä—É–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–µ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
      },
      positions: {
        player1: 'BTN',
        player2: 'BB'
      }
    }
  },
  ui: {
    settingsPanelOpen: false,
    currentStreet: 'flop',
    isSessionActive: false,
    dragSelection: false,
    dragStartCell: null
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–æ–º
let currentGameSettings = {
  tablesCount: 1,
  rakePercent: 5,
  rakeDollar: 1,
  preflopSpot: '',
  boardSettings: {
    flop: {
      specificCards: [null, null, null],
      suits: 'any',
      pairing: 'any',
      ranks: {
        high: ['any'],
        middle: ['any'],
        low: ['any']
      }
    },
    turn: {
      suits: 'any',
      pairing: 'any',
      ranks: ['any']
    },
    river: {
      suits: 'any',
      pairing: 'any',
      ranks: ['any']
    }
  },
  playerRanges: {
    player1: {
      currentWeight: 0,
      handWeights: {}
    },
    player2: {
      currentWeight: 0,
      handWeights: {}
    },
            positions: {
          player1: 'BTN',
          player2: 'BB'
        }
  }
};

// ===== –û–°–ù–û–í–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ =====
const CARD_RANKS = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2'];
const CARD_SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const SUIT_NAMES = ['spades', 'hearts', 'diamonds', 'clubs'];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä—É–∫
const ALL_HANDS = [];
for (let i = 0; i < CARD_RANKS.length; i++) {
  for (let j = i; j < CARD_RANKS.length; j++) {
    if (i === j) {
      // –ü–∞—Ä—ã
      ALL_HANDS.push(CARD_RANKS[i] + CARD_RANKS[j]);
    } else {
      // Suited –∏ offsuit
      ALL_HANDS.push(CARD_RANKS[i] + CARD_RANKS[j] + 's');
      ALL_HANDS.push(CARD_RANKS[i] + CARD_RANKS[j] + 'o');
    }
  }
}

// –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É–∫ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
const HAND_RANKINGS = [
  'AA', 'KK', 'QQ', 'JJ', 'TT', '99', '88', '77', '66', '55', '44', '33', '22',
  'AKs', 'AQs', 'AJs', 'ATs', 'A9s', 'A8s', 'A7s', 'A6s', 'A5s', 'A4s', 'A3s', 'A2s',
  'AKo', 'KQs', 'KJs', 'KTs', 'K9s', 'K8s', 'K7s', 'K6s', 'K5s', 'K4s', 'K3s', 'K2s',
  'AQo', 'KQo', 'QJs', 'QTs', 'Q9s', 'Q8s', 'Q7s', 'Q6s', 'Q5s', 'Q4s', 'Q3s', 'Q2s',
  'AJo', 'KJo', 'QJo', 'JTs', 'J9s', 'J8s', 'J7s', 'J6s', 'J5s', 'J4s', 'J3s', 'J2s',
  'ATo', 'KTo', 'QTo', 'JTo', 'T9s', 'T8s', 'T7s', 'T6s', 'T5s', 'T4s', 'T3s', 'T2s',
  'A9o', 'K9o', 'Q9o', 'J9o', 'T9o', '98s', '97s', '96s', '95s', '94s', '93s', '92s',
  'A8o', 'K8o', 'Q8o', 'J8o', 'T8o', '98o', '87s', '86s', '85s', '84s', '83s', '82s',
  'A7o', 'K7o', 'Q7o', 'J7o', 'T7o', '97o', '87o', '76s', '75s', '74s', '73s', '72s',
  'A6o', 'K6o', 'Q6o', 'J6o', 'T6o', '96o', '86o', '76o', '65s', '64s', '63s', '62s',
  'A5o', 'K5o', 'Q5o', 'J5o', 'T5o', '95o', '85o', '75o', '65o', '54s', '53s', '52s',
  'A4o', 'K4o', 'Q4o', 'J4o', 'T4o', '94o', '84o', '74o', '64o', '54o', '43s', '42s',
  'A3o', 'K3o', 'Q3o', 'J3o', 'T3o', '93o', '83o', '73o', '63o', '53o', '43o', '32s',
  'A2o', 'K2o', 'Q2o', 'J2o', 'T2o', '92o', '82o', '72o', '62o', '52o', '42o', '32o'
];

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
  console.log('üéÆ Poker Simulator –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü —Ä—É–∫
  generateHandMatrix('player1-matrix');
  generateHandMatrix('player2-matrix');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
  updateRangeSliders();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  initializeEventListeners();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∑–∏—Ü–∏–π
  initializePositionButtons();
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Å—Ç–æ–ª–æ–≤
  addTableStyles();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è preflop selector
  initializePreflopSelector();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è range —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  initializeRangeSelector('range-select-player1');
  initializeRangeSelector('range-select-player2');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞
  initializePlayerTurnAnimations();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–∞—á –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  setTimeout(() => {
    initializeSinglePlayerHandTracking();
  }, 1000);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
  loadPreflopSpotsList();
});

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
function initializeEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const closeSettingsBtn = document.getElementById('close-settings');
  if (closeSettingsBtn) {
    closeSettingsBtn.addEventListener('click', closeSettingsPanel);
  }

  // –ö–Ω–æ–ø–∫–∏ —Å–µ—Å—Å–∏–∏
  const startSessionBtn = document.getElementById('start-session');
  const joinSessionBtn = document.getElementById('join-session');
  
  if (startSessionBtn) {
    startSessionBtn.addEventListener('click', startSession);
  }
  if (joinSessionBtn) {
    joinSessionBtn.addEventListener('click', joinSession);
  }



  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–æ–≤
  document.querySelectorAll('.table-btn').forEach(btn => {
    btn.addEventListener('click', (e) => selectTablesCount(e.target.dataset.tables));
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–π–∫–∞
  const rakePercent = document.getElementById('rake-percent');
  const rakeDollar = document.getElementById('rake-dollar');
  
  if (rakePercent) {
    rakePercent.addEventListener('input', updateRakePercent);
  }
  if (rakeDollar) {
    rakeDollar.addEventListener('input', updateRakeDollar);
  }

  // –í–∫–ª–∞–¥–∫–∏ —É–ª–∏—Ü
  document.querySelectorAll('.street-tab').forEach(tab => {
    tab.addEventListener('click', (e) => switchStreet(e.target.dataset.street));
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Ç–µ–π
  document.querySelectorAll('.suit-btn').forEach(btn => {
    btn.addEventListener('click', (e) => selectSuit(e.target.dataset.suit));
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  document.querySelectorAll('.pair-btn').forEach(btn => {
    btn.addEventListener('click', (e) => selectPairing(e.target.dataset.pair));
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–Ω–≥–æ–≤
  document.querySelectorAll('.rank-btn').forEach(btn => {
    btn.addEventListener('click', handleRankSelection);
    btn.addEventListener('mousedown', startRankDrag);
    btn.addEventListener('mouseenter', handleRankDrag);
    btn.addEventListener('mouseup', endRankDrag);
  });

  // –°–ª–∞–π–¥–µ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  const player1Range = document.getElementById('player1-range');
  const player2Range = document.getElementById('player2-range');
  
  if (player1Range) {
    player1Range.addEventListener('input', (e) => updatePlayerRange(1, e.target.value));
  }
  if (player2Range) {
    player2Range.addEventListener('input', (e) => updatePlayerRange(2, e.target.value));
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
  document.querySelectorAll('.paste-btn').forEach((btn, index) => {
    btn.addEventListener('click', async function() {
      const playerNum = index + 1; // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 1, –≤—Ç–æ—Ä–∞—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2
      await pasteHandRangeFromClipboard(playerNum);
    });
  });

  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞—Ä—Ç
  document.querySelectorAll('.card-placeholder').forEach(placeholder => {
    placeholder.addEventListener('click', openCardModal);
  });

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  document.querySelectorAll('.close-modal').forEach(btn => {
    btn.addEventListener('click', closeModal);
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
  const cardModal = document.getElementById('card-modal');
  if (cardModal) {
    cardModal.addEventListener('click', (e) => {
      if (e.target.classList.contains('modal')) {
        closeModal();
      }
    });
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è drag selection
  document.addEventListener('mouseup', () => {
    state.ui.dragSelection = false;
    state.ui.dragStartCell = null;
  });
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ù–ï–õ–¨–Æ –ù–ê–°–¢–†–û–ï–ö =====
function closeSettingsPanel() {
  const panel = document.getElementById('settings-panel');
  const tablesArea = document.getElementById('tables-area');
  
  state.ui.settingsPanelOpen = false;
  panel.classList.remove('active');
  tablesArea.classList.remove('with-sidebar');
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ï–ô =====
function startSession() {
  if (!validateSettings()) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Å—Å–∏–∏');
    return;
  }

  // –°–æ–∑–¥–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é
  const playerName = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:') || 'Player 1';
  if (playerName && multiplayerClient) {
    multiplayerClient.createSession(playerName);
  } else {
    // –§–æ–ª–ª–±–µ–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    state.ui.isSessionActive = true;
    closeSettingsPanel();
    generateTables();
    showNotification('–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!', 'success');
  }
}

function joinSession() {
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏
  const sessionCode = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  if (sessionCode) {
    const playerName = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:') || 'Player 2';
    if (multiplayerClient) {
      multiplayerClient.joinSession(sessionCode, playerName);
    } else {
      showNotification('–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
    }
  }
}

function generateSessionCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

function validateSettings() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  return state.settings.tablesCount > 0 && 
         state.settings.rakePercent >= 0 && 
         state.settings.rakeDollar >= 0;
}

// ===== –†–ê–ë–û–¢–ê –° –ü–†–ï–§–õ–û–ü –°–ü–û–¢–ê–ú–ò =====

async function loadPreflopSpot(filePath) {
  try {
    const response = await fetch(`/api/preflopspot/${filePath}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const content = await response.text();
    state.settings.preflopSpot = content;
    state.settings.preflopFile = filePath; // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
      
    const preview = document.getElementById('preflop-content');
    preview.textContent = content.substring(0, 200) + (content.length > 200 ? '...' : '');
    preview.classList.add('show');
    
    const displayName = filePath.split('/').pop().replace('.txt', '').replace(/_/g, ' ');
    showNotification(`–ü—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç "${displayName}" –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
    syncGameSettings();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞:', error);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞', 'error');
  }
}

// ===== –†–ê–ë–û–¢–ê –°–û –°–¢–ê–ù–î–ê–†–¢–ù–´–ú–ò –†–ï–ô–ù–î–ñ–ê–ú–ò =====

async function loadRangePreset(filePath, playerNum = 1) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
  const targetPlayer = playerNum;
  
  console.log(`üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π–Ω–¥–∂–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${targetPlayer} –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
  console.log(`üéØ State.settings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!state.settings);
  console.log(`üéØ PlayerRanges —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`, !!state.settings?.playerRanges);

  try {
    const response = await fetch(`/api/range/${filePath}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const content = await response.text();
    const player = targetPlayer === 1 ? 'player1' : 'player2';
    
    console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π–Ω–¥–∂–∞ –¥–ª—è ${player}:`);
    console.log(`üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:`, content);
    console.log(`üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞:`, state.settings.playerRanges[player]);
    
    // –ü–∞—Ä—Å–∏—Ç—å —Ä–µ–π–Ω–¥–∂ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∏–≥—Ä–æ–∫—É
    const hands = parseHandRange(content);
    
    if (hands.size > 0) {
      console.log(`üéØ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${hands.size} —Ä—É–∫ –∏–∑ preset`);
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
      state.settings.playerRanges[player].handWeights = {};
      
      // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä—É–∫–∏ —Å –∏—Ö —á–∞—Å—Ç–æ—Ç–∞–º–∏
      hands.forEach((frequency, hand) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (0.25 ‚Üí 25)
        const percentage = Math.round(frequency * 100);
        state.settings.playerRanges[player].handWeights[hand] = percentage;
        console.log(`  ‚ûï ${hand}: ${frequency} ‚Üí ${percentage}%`);
      });
      
      // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      updateHandMatrixDisplay(player);
      updateRangeStatistics(player);
      
      console.log(`‚úÖ –†–µ–π–Ω–¥–∂ –¥–ª—è ${player} –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ preset "${filePath}"`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const displayName = filePath.split('/').pop().replace('.txt', '').replace(/_/g, ' ');
      showNotification(
        `–†–µ–π–Ω–¥–∂ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${targetPlayer} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ "${displayName}". –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${hands.size} —Ä—É–∫.`,
        'success'
      );
    } else {
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–π–Ω–¥–∂', 'error');
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
    if (!playerNum && typeof closeRangePresetsDialog === 'function') {
      closeRangePresetsDialog();
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π–Ω–¥–∂–∞:', error);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π–Ω–¥–∂–∞', 'error');
  }
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–û–õ–û–í =====
function selectTablesCount(count) {
  state.settings.tablesCount = parseInt(count);
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  document.querySelectorAll('.table-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelector(`[data-tables="${count}"]`).classList.add('active');
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  syncGameSettings();
}

function updateRakePercent(event) {
  state.settings.rakePercent = parseFloat(event.target.value);
  syncGameSettings();
}

function updateRakeDollar(event) {
  state.settings.rakeDollar = parseFloat(event.target.value);
  syncGameSettings();
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–õ–ò–¶–ê–ú–ò =====
function switchStreet(street) {
  state.ui.currentStreet = street;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  document.querySelectorAll('.street-tab').forEach(tab => {
    tab.classList.remove('active');
  });
  document.querySelector(`[data-street="${street}"]`).classList.add('active');
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  document.querySelectorAll('.street-settings').forEach(settings => {
    settings.classList.remove('active');
  });
  document.getElementById(`${street}-settings`).classList.add('active');
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–†–¢ =====
function selectSuit(suit) {
  state.settings.boardSettings[state.ui.currentStreet].suits = suit;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  document.querySelectorAll('.suit-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelector(`[data-suit="${suit}"]`).classList.add('active');
}

function selectPairing(pairing) {
  state.settings.boardSettings[state.ui.currentStreet].pairing = pairing;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  document.querySelectorAll('.pair-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  document.querySelector(`[data-pair="${pairing}"]`).classList.add('active');
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –†–ê–ù–ì–û–í =====
function handleRankSelection(event) {
  const btn = event.target;
  const rank = btn.dataset.rank;
  const rankType = btn.closest('.rank-buttons').dataset.rankType;
  
  console.log(`üÉè –í—ã–±–æ—Ä —Ä–∞–Ω–≥–∞: ${rank} –¥–ª—è —Ç–∏–ø–∞ ${rankType} –Ω–∞ —É–ª–∏—Ü–µ ${state.ui.currentStreet}`);
  
  if (rank === 'any') {
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤—ã–±–æ—Ä—ã –∏ –≤—ã–±—Ä–∞—Ç—å "–ª—é–±–æ–π"
    resetRankButtons(btn.closest('.rank-buttons'));
    btn.classList.add('active');
    state.settings.boardSettings[state.ui.currentStreet].ranks[rankType] = ['any'];
    console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω "–ª—é–±–æ–π" —Ä–∞–Ω–≥ –¥–ª—è ${rankType}`);
  } else {
    // –£–±—Ä–∞—Ç—å "–ª—é–±–æ–π" –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    const anyBtn = btn.closest('.rank-buttons').querySelector('[data-rank="any"]');
    anyBtn.classList.remove('active');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–≥
    btn.classList.toggle('active');
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const currentRanks = state.settings.boardSettings[state.ui.currentStreet].ranks[rankType];
    const anyIndex = currentRanks.indexOf('any');
    if (anyIndex > -1) {
      currentRanks.splice(anyIndex, 1);
    }
    
    if (btn.classList.contains('active')) {
      if (!currentRanks.includes(rank)) {
        currentRanks.push(rank);
      }
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–≥ ${rank} –¥–ª—è ${rankType}`);
    } else {
      const index = currentRanks.indexOf(rank);
      if (index > -1) {
        currentRanks.splice(index, 1);
      }
      console.log(`‚ùå –£–¥–∞–ª–µ–Ω —Ä–∞–Ω–≥ ${rank} –¥–ª—è ${rankType}`);
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å "–ª—é–±–æ–π"
    if (currentRanks.length === 0) {
      anyBtn.classList.add('active');
      state.settings.boardSettings[state.ui.currentStreet].ranks[rankType] = ['any'];
      console.log(`üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω "–ª—é–±–æ–π" —Ä–∞–Ω–≥ –¥–ª—è ${rankType} (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)`);
    }
  }
  
  console.log(`üéØ –¢–µ–∫—É—â–∏–µ —Ä–∞–Ω–≥–∏ –¥–ª—è ${rankType}:`, state.settings.boardSettings[state.ui.currentStreet].ranks[rankType]);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  syncGameSettings();
}

function startRankDrag(event) {
  if (event.which === 1) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    state.ui.dragSelection = true;
    state.ui.dragStartCell = event.target;
  }
}

function handleRankDrag(event) {
  if (state.ui.dragSelection && event.target.classList.contains('rank-btn')) {
    // –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –¥–ª—è drag selection
    event.target.click();
  }
}

function endRankDrag() {
  state.ui.dragSelection = false;
  state.ui.dragStartCell = null;
}

function resetRankButtons(container) {
  container.querySelectorAll('.rank-btn').forEach(btn => {
    btn.classList.remove('active');
  });
}

// ===== –î–ò–ê–ü–ê–ó–û–ù–´ –†–£–ö =====
function generateHandMatrices() {
  generateHandMatrix('player1-matrix');
  generateHandMatrix('player2-matrix');
}

function generateHandMatrix(containerId) {
  const container = document.getElementById(containerId);
  container.innerHTML = '';
  
  // –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É 13x13 –¥–ª—è –≤—Å–µ—Ö —Ä—É–∫
  for (let i = 0; i < 13; i++) {
    for (let j = 0; j < 13; j++) {
      const cell = document.createElement('div');
      cell.className = 'hand-cell';
      
      let hand;
      if (i === j) {
        // –ü–∞—Ä—ã
        hand = CARD_RANKS[i] + CARD_RANKS[j];
        cell.classList.add('pair');
      } else if (i < j) {
        // Suited
        hand = CARD_RANKS[i] + CARD_RANKS[j] + 's';
        cell.classList.add('suited');
      } else {
        // Offsuit
        hand = CARD_RANKS[j] + CARD_RANKS[i] + 'o';
      }
      
      cell.textContent = hand;
      cell.dataset.hand = hand;
      
      // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      cell.addEventListener('click', () => toggleHandSelection(cell, containerId));
      cell.addEventListener('mousedown', startHandDrag);
      cell.addEventListener('mouseenter', (e) => handleHandDrag(e, containerId));
      cell.addEventListener('mouseup', endHandDrag);
      
      container.appendChild(cell);
    }
  }
}

function toggleHandSelection(cell, containerId) {
  const hand = cell.dataset.hand;
  const player = containerId.includes('player1') ? 'player1' : 'player2';
  const currentWeight = state.settings.playerRanges[player].currentWeight;
  
  // –ï—Å–ª–∏ —Ä—É–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —É–±—Ä–∞—Ç—å –µ—ë
  if (state.settings.playerRanges[player].handWeights[hand]) {
    delete state.settings.playerRanges[player].handWeights[hand];
  } else {
    // –î–æ–±–∞–≤–∏—Ç—å —Ä—É–∫—É —Å —Ç–µ–∫—É—â–∏–º –≤–µ—Å–æ–º –∏–ª–∏ 100% –µ—Å–ª–∏ –≤–µ—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    const weight = currentWeight > 0 ? currentWeight : 100;
    state.settings.playerRanges[player].handWeights[hand] = weight;
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è)
  updateHandMatrixDisplay(player);
  updateRangeStatistics(player);
}

function updatePlayerRange(playerNum, percentage) {
  const player = `player${playerNum}`;
  state.settings.playerRanges[player].currentWeight = parseInt(percentage);
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ —Å–ª–∞–π–¥–µ—Ä–µ
  const valueSpan = document.querySelector(`#player${playerNum}-range`).nextElementSibling;
  valueSpan.textContent = percentage + '%';
}

function updateHandMatrixDisplay(player) {
  const playerRange = state.settings.playerRanges[player];
  if (!playerRange) {
    console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${player} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    return;
  }
  
  const containerId = player === 'player1' ? 'player1-matrix' : 'player2-matrix';
  const container = document.getElementById(containerId);
  if (!container) {
    console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  console.log(`üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è ${player}:`);
  console.log(`üé® –í–µ—Å–∞ —Ä—É–∫:`, playerRange.handWeights);
  console.log(`üé® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–∫ —Å –≤–µ—Å–∞–º–∏: ${Object.keys(playerRange.handWeights).length}`);
  
  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—ã–±–æ—Ä—ã
  const cells = container.querySelectorAll('.hand-cell');
  cells.forEach(cell => {
    cell.classList.remove('selected');
    cell.style.backgroundColor = '';
    cell.style.opacity = '';
    
    // –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∞—Å—Ç–æ—Ç—ã
    const existingFreq = cell.querySelector('.hand-frequency');
    if (existingFreq) {
      existingFreq.remove();
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä—É–∫–∏
    const hand = cell.dataset.hand;
    if (hand) {
      cell.textContent = hand;
    }
  });
  
  let appliedCount = 0;
  let notFoundCount = 0;
  const notFoundHands = [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
  const cellsMap = new Map();
  cells.forEach(cell => {
    const hand = cell.dataset.hand;
    if (hand) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
      cellsMap.set(hand.toLowerCase(), cell);
      cellsMap.set(hand.toUpperCase(), cell);
      cellsMap.set(hand, cell);
    }
  });
  
  console.log(`üîç –î–æ—Å—Ç—É–ø–Ω–æ —è—á–µ–µ–∫ –≤ –º–∞—Ç—Ä–∏—Ü–µ: ${cellsMap.size / 3} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä—É–∫`);
  console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫:`, Array.from(new Set(Array.from(cellsMap.keys()).map(k => k.toLowerCase()))).slice(0, 10));
  
  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä—ã —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏
  Object.entries(playerRange.handWeights).forEach(([hand, weight]) => {
    console.log(`  üéØ –ò—â–µ–º —è—á–µ–π–∫—É –¥–ª—è —Ä—É–∫–∏: "${hand}" —Å –≤–µ—Å–æ–º ${weight}`);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —è—á–µ–π–∫—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    let cell = cellsMap.get(hand) || 
               cellsMap.get(hand.toLowerCase()) || 
               cellsMap.get(hand.toUpperCase());
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (!cell) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º –Ω–∞–ø—Ä—è–º—É—é
      for (const c of cells) {
        const cellHand = c.dataset.hand;
        if (cellHand && (
          cellHand === hand ||
          cellHand.toLowerCase() === hand.toLowerCase() ||
          cellHand.toUpperCase() === hand.toUpperCase()
        )) {
          cell = c;
          break;
        }
      }
    }
    
    if (cell) {
      // –í–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 0 –¥–æ 100 (–ø—Ä–æ—Ü–µ–Ω—Ç—ã) –∏–ª–∏ –æ—Ç 0 –¥–æ 1 (–¥–æ–ª–∏)
      let normalizedWeight = weight;
      
      // –ï—Å–ª–∏ –≤–µ—Å –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
      if (normalizedWeight > 1) {
        normalizedWeight = Math.max(0, Math.min(100, normalizedWeight));
      } else {
        // –ï—Å–ª–∏ –≤–µ—Å –æ—Ç 0 –¥–æ 1, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        normalizedWeight = Math.round(normalizedWeight * 100);
      }
      
      if (normalizedWeight > 0) {
        cell.classList.add('selected');
        appliedCount++;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞
        const opacity = normalizedWeight / 100;
        cell.style.backgroundColor = `rgba(255, 193, 7, ${opacity})`;
        
        console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ –¥–ª—è "${hand}" ‚Üí "${cell.dataset.hand}", –≤–µ—Å: ${normalizedWeight}%, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: ${opacity}`);
        
        if (normalizedWeight < 100) {
          // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Å –Ω–µ 100%
          const freqElement = document.createElement('div');
          freqElement.className = 'hand-frequency';
          freqElement.style.cssText = `
            position: absolute;
            bottom: 2px;
            right: 2px;
            font-size: 8px;
            color: #333;
            background: rgba(255,255,255,0.8);
            padding: 1px 2px;
            border-radius: 2px;
            line-height: 1;
            pointer-events: none;
            z-index: 10;
          `;
          freqElement.textContent = `${normalizedWeight}%`;
          
          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —è—á–µ–π–∫–∞ –∏–º–µ–µ—Ç position: relative
          cell.style.position = 'relative';
          cell.appendChild(freqElement);
        }
      }
    } else {
      notFoundCount++;
      notFoundHands.push(hand);
      console.warn(`    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ –¥–ª—è —Ä—É–∫–∏: "${hand}"`);
    }
  });
  
  console.log(`üé® –ú–∞—Ç—Ä–∏—Ü–∞ ${player} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`);
  console.log(`  ‚úÖ –†—É–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: ${appliedCount}`);
  console.log(`  ‚ùå –†—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundCount}`);
  if (notFoundHands.length > 0) {
    console.log(`  üîç –ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—É–∫–∏:`, notFoundHands);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateRangeStatistics(player);
}

function updateRangeStatistics(player) {
  const handWeights = state.settings.playerRanges[player].handWeights;
  const selectedCount = Object.keys(handWeights).length;
  
  const playerId = player === 'player1' ? '1' : '2';
  const valueSpan = document.querySelector(`#player${playerId}-range`).nextElementSibling;
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä—É–∫ –∏ –∏—Ö –æ–±—â–∏–π –≤–µ—Å
  const totalWeight = Object.values(handWeights).reduce((sum, weight) => sum + weight, 0);
  const averageWeight = selectedCount > 0 ? Math.round(totalWeight / selectedCount) : 0;
  
  valueSpan.textContent = selectedCount > 0 
    ? `${selectedCount} —Ä—É–∫ (—Å—Ä–µ–¥–Ω–µ–µ: ${averageWeight}%)`
    : '0%';
}

function startHandDrag(event) {
  if (event.which === 1) {
    state.ui.dragSelection = true;
    state.ui.dragStartCell = event.target;
  }
}

function handleHandDrag(event, containerId) {
  if (state.ui.dragSelection) {
    toggleHandSelection(event.target, containerId);
  }
}

function endHandDrag() {
  state.ui.dragSelection = false;
  state.ui.dragStartCell = null;
}

function updateRangeSliders() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å 0% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  updatePlayerRange(1, 0);
  updatePlayerRange(2, 0);
  updateRangeStatistics('player1');
  updateRangeStatistics('player2');
}

// ===== –í–°–¢–ê–í–ö–ê –ò–ó –ë–£–§–ï–†–ê =====
async function pasteHandRangeFromClipboard(playerNum) {
  try {
    const text = await navigator.clipboard.readText();
    const player = playerNum === 1 ? 'player1' : 'player2';
    
    console.log(`üìã –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –¥–ª—è ${player}:`);
    console.log(`üìù –¢–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞: "${text}"`);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä—É–∫
    const hands = parseHandRange(text);
    
    if (hands.size > 0) {
      console.log(`üéØ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${hands.size} —Ä—É–∫`);
      
      // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
      state.settings.playerRanges[player].handWeights = {};
      
      // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä—É–∫–∏ —Å –∏—Ö —á–∞—Å—Ç–æ—Ç–∞–º–∏
      hands.forEach((frequency, hand) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (0.25 ‚Üí 25)
        const percentage = Math.round(frequency * 100);
        state.settings.playerRanges[player].handWeights[hand] = percentage;
        console.log(`  ‚ûï ${hand}: ${frequency} ‚Üí ${percentage}%`);
      });
      
      // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      updateHandMatrixDisplay(player);
      updateRangeStatistics(player);
      
      console.log(`‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Ä—É–∫ –¥–ª—è ${player} –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞`);
      console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–µ –≤–µ—Å–∞:`, state.settings.playerRanges[player].handWeights);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      showNotification(
        `–î–∏–∞–ø–∞–∑–æ–Ω —Ä—É–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNum} –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${hands.size} —Ä—É–∫.`,
        'success'
      );
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä—É–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞');
      showNotification(
        '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä—É–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.',
        'warning'
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑ –±—É—Ñ–µ—Ä–∞:', error);
    showNotification(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑ –±—É—Ñ–µ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.',
      'error'
    );
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä—É–∫
function parseHandRange(text) {
  const hands = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—É–∫ —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏
  
  try {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    const parts = text.trim().split(',');
    
    console.log('üéØ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏:', text);
    console.log('üéØ –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏:', parts);
    console.log(`üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: ${parts.length}`);
    
    for (let i = 0; i < parts.length; i++) {
      let part = parts[i].trim();
      if (!part) continue;
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1}: "${part}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç–æ—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: AK:0.75)
      let frequency = 1.0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100%
      let handPart = part;
      
      if (part.includes(':')) {
        const splitResult = part.split(':');
        handPart = splitResult[0].trim();
        const freqStr = splitResult[1].trim();
        frequency = parseFloat(freqStr);
        
        console.log(`  üìä –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞: —Ä—É–∫–∞="${handPart}", —á–∞—Å—Ç–æ—Ç–∞="${freqStr}" ‚Üí ${frequency}`);
        
        if (isNaN(frequency) || frequency < 0 || frequency > 1) {
          console.warn(`  ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ "${freqStr}", –∏—Å–ø–æ–ª—å–∑—É—é 1.0`);
          frequency = 1.0;
        }
      } else {
        console.log(`  üìä –ß–∞—Å—Ç–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é 1.0 (100%)`);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É–∫—É
      if (handPart.length >= 2) {
        const processedHands = processHandString(handPart, frequency);
        let addedCount = 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä—É–∫–∏ –≤ Map
        processedHands.forEach((freq, hand) => {
          hands.set(hand, freq);
          addedCount++;
          console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä—É–∫–∞: ${hand} —Å —á–∞—Å—Ç–æ—Ç–æ–π ${freq}`);
        });
        
        console.log(`  üìà –ò–∑ "${handPart}" –ø–æ–ª—É—á–µ–Ω–æ ${addedCount} —Ä—É–∫`);
      } else {
        console.warn(`  ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ä—É–∫–∞: "${handPart}"`);
      }
    }
    
    console.log('üéØ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ä—É–∫–∏:', hands);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä—É–∫: ${hands.size}`);
    console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫:`, Array.from(hands.keys()).slice(0, 10));
    
    return hands;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä—É–∫:', error);
    return new Map();
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Ä—É–∫–∏
function processHandString(handPart, frequency) {
  const result = new Map();
  
  console.log(`  üÉè –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–∏: "${handPart}" —Å —á–∞—Å—Ç–æ—Ç–æ–π ${frequency}`);
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä—É–∫—É - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const normalizedHand = handPart.trim().toUpperCase();
  
  if (!normalizedHand) {
    console.log(`    ‚ùå –ü—É—Å—Ç–∞—è —Ä—É–∫–∞ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏`);
    return result;
  }
  
  console.log(`  üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä—É–∫–∞: "${normalizedHand}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä—É–∫
  if (normalizedHand.length === 2) {
    // –§–æ—Ä–º–∞—Ç: AK, KQ, etc. (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è s/o)
    const firstChar = normalizedHand[0];
    const secondChar = normalizedHand[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∫–∞—Ä—Ç
    if (CARD_RANKS.includes(firstChar) && CARD_RANKS.includes(secondChar)) {
      if (firstChar === secondChar) {
        // –ü–∞—Ä–∞ (AA, KK, etc.) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        result.set(normalizedHand, frequency);
        console.log(`    ‚úÖ –ü–∞—Ä–∞: ${normalizedHand} ‚Üí ${frequency}`);
      } else {
        // –†—É–∫–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è s/o - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Ç—Ä–∏—Ü—ã
        // –í –º–∞—Ç—Ä–∏—Ü–µ: —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä–≤–∞—è + s/o –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        const rank1Index = CARD_RANKS.indexOf(firstChar);
        const rank2Index = CARD_RANKS.indexOf(secondChar);
        
        let hand;
        if (rank1Index <= rank2Index) {
          // firstChar —Å—Ç–∞—Ä—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω secondChar
          hand = firstChar + secondChar;
        } else {
          // secondChar —Å—Ç–∞—Ä—à–µ firstChar, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
          hand = secondChar + firstChar;
        }
        
        const suitedHand = hand + 's';
        const offsuitHand = hand + 'o';
        result.set(suitedHand, frequency);
        result.set(offsuitHand, frequency);
        console.log(`    ‚úÖ –û–±–µ –≤–µ—Ä—Å–∏–∏: ${suitedHand} –∏ ${offsuitHand} ‚Üí ${frequency}`);
      }
    } else {
      console.warn(`    ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∫–∞—Ä—Ç: "${normalizedHand}"`);
    }
  } else if (normalizedHand.length === 3) {
    // –§–æ—Ä–º–∞—Ç: AKs, AKo, etc.
    const firstChar = normalizedHand[0];
    const secondChar = normalizedHand[1];
    const suitChar = normalizedHand[2];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∫–∞—Ä—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
    if (CARD_RANKS.includes(firstChar) && CARD_RANKS.includes(secondChar) && (suitChar === 'S' || suitChar === 'O')) {
      if (firstChar === secondChar) {
        console.warn(`    ‚ùå –ü–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å s/o: "${normalizedHand}"`);
      } else {
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –º–∞—Ç—Ä–∏—Ü—ã: —Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä–≤–∞—è + s/o –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        const rank1Index = CARD_RANKS.indexOf(firstChar);
        const rank2Index = CARD_RANKS.indexOf(secondChar);
        
        let hand;
        if (rank1Index <= rank2Index) {
          // firstChar —Å—Ç–∞—Ä—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω secondChar
          hand = firstChar + secondChar;
        } else {
          // secondChar —Å—Ç–∞—Ä—à–µ firstChar, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
          hand = secondChar + firstChar;
        }
        
        const correctedHand = hand + suitChar.toLowerCase();
        result.set(correctedHand, frequency);
        console.log(`    ‚úÖ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ä—É–∫–∞: ${correctedHand} ‚Üí ${frequency}`);
      }
    } else {
      console.warn(`    ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä—É–∫–∏: "${normalizedHand}"`);
    }
  } else {
    console.warn(`    ‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ —Ä—É–∫–∏: "${normalizedHand}" (–¥–ª–∏–Ω–∞: ${normalizedHand.length})`);
  }
  
  console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.size} —Ä—É–∫`);
  if (result.size > 0) {
    result.forEach((freq, hand) => {
      console.log(`    ‚Üí ${hand}: ${freq}`);
    });
  }
  
  return result;
}

// ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====
function openCardModal(event) {
  const cardIndex = event.target.dataset.card;
  const modal = document.getElementById('card-modal');
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±–∏—Ä–∞–µ–º–æ–π –∫–∞—Ä—Ç–µ
  modal.dataset.cardIndex = cardIndex;
  
  // –°–æ–∑–¥–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
  generateCardPicker();
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.classList.add('active');
}

function generateCardPicker() {
  const picker = document.querySelector('.card-picker');
  picker.innerHTML = '';
  
  CARD_RANKS.forEach(rank => {
    CARD_SUITS.forEach((suit, suitIndex) => {
      const card = document.createElement('div');
      card.className = `card-option ${SUIT_NAMES[suitIndex]}`;
      card.innerHTML = `<div>${rank}</div><div>${suit}</div>`;
      card.dataset.rank = rank;
      card.dataset.suit = suit;
      
      card.addEventListener('click', selectCard);
      
      picker.appendChild(card);
    });
  });
}

function selectCard(event) {
  const rank = event.currentTarget.dataset.rank;
  const suit = event.currentTarget.dataset.suit;
  const modal = document.getElementById('card-modal');
  const cardIndex = modal.dataset.cardIndex;
  
  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
  const placeholder = document.querySelector(`[data-card="${cardIndex}"]`);
  placeholder.innerHTML = `<span>${rank}${suit}</span>`;
  placeholder.classList.add('selected');
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const currentStreet = state.ui.currentStreet;
  state.settings.boardSettings[currentStreet].specificCards[cardIndex - 1] = { rank, suit };
  
  closeModal();
}

function closeModal() {
  document.querySelectorAll('.modal').forEach(modal => {
    modal.classList.remove('active');
  });
}

// ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–û–õ–û–í =====
function generateTables() {
  const tablesArea = document.getElementById('tables-area');
  const welcomeScreen = tablesArea.querySelector('.welcome-screen');
  
  if (welcomeScreen) {
    welcomeScreen.remove();
  }
  
  const tablesGrid = document.createElement('div');
  tablesGrid.className = `tables-grid ${getTableGridClass()}`;
  
  for (let i = 1; i <= state.settings.tablesCount; i++) {
    const table = createPokerTable(i);
    tablesGrid.appendChild(table);
  }
  
  tablesArea.appendChild(tablesGrid);
}

function getTableGridClass() {
  const count = state.settings.tablesCount;
  switch (count) {
    case 1: return 'one-table';
    case 2: return 'two-tables';
    case 3: return 'three-tables';
    case 4: return 'four-tables';
    default: return 'one-table';
  }
}

function createPokerTable(tableNumber) {
  const table = document.createElement('div');
  table.className = 'poker-table';
  table.innerHTML = `
    <div class="table-header">
      <h3><i class="fas fa-table"></i> –°—Ç–æ–ª ${tableNumber}</h3>
      <div class="table-info">
        <span class="rake-info"><i class="fas fa-percentage"></i> ${state.settings.rakePercent}%</span>
        <span class="rake-info"><i class="fas fa-dollar-sign"></i> ${state.settings.rakeDollar}</span>
      </div>
    </div>
    
    <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏ -->
    <div class="table-felt">
      <!-- –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –∏–≥—Ä–æ–∫–æ–≤ -->
      <div class="players-top table-row">
        <div class="player-seat seat-1 position-${getDisplayPosition(state.settings.playerRanges.positions?.player1)?.toLowerCase() || 'btn'} center-aligned">
          <div class="player-avatar">
            <i class="fas fa-user"></i>
          </div>
          <div class="player-info-horizontal">
            <div class="player-name">–ò–≥—Ä–æ–∫ 1</div>
            <div class="player-position">${getDisplayPosition(state.settings.playerRanges.positions?.player1) || 'BTN'}</div>
            <div class="player-stack">$1000</div>
          </div>
          <div class="player-cards center-aligned">
            <div class="card-slot hole-card">?</div>
            <div class="card-slot hole-card">?</div>
          </div>
          <div class="player-action center-aligned">
            <span class="action-text">–û–∂–∏–¥–∞–Ω–∏–µ...</span>
            <span class="bet-amount">$0</span>
          </div>
        </div>
      </div>
      
      <!-- –¶–µ–Ω—Ç—Ä —Å—Ç–æ–ª–∞ -->
      <div class="table-center table-row">
        <div class="pot-area center-aligned">
          <div class="pot-total">
            <span class="pot-label">–ë–∞–Ω–∫</span>
            <span class="pot-amount">$0</span>
          </div>
        </div>
        
        <div class="community-cards center-aligned">
          <div class="card-slot community flop">?</div>
          <div class="card-slot community flop">?</div>
          <div class="card-slot community flop">?</div>
          <div class="card-slot community turn">?</div>
          <div class="card-slot community river">?</div>
        </div>
        
        <div class="table-dealer">
          <div class="dealer-button">D</div>
        </div>
      </div>
      
      <!-- –ù–∏–∂–Ω–∏–π —Ä—è–¥ –∏–≥—Ä–æ–∫–æ–≤ -->
      <div class="players-bottom table-row">
        <div class="player-seat seat-2 position-${getDisplayPosition(state.settings.playerRanges.positions?.player2)?.toLowerCase() || 'bb'} center-aligned">
          <div class="player-action center-aligned">
            <span class="action-text">–û–∂–∏–¥–∞–Ω–∏–µ...</span>
            <span class="bet-amount">$0</span>
          </div>
          <div class="player-cards center-aligned">
            <div class="card-slot hole-card">?</div>
            <div class="card-slot hole-card">?</div>
          </div>
          <div class="player-info-horizontal">
            <div class="player-name">–ò–≥—Ä–æ–∫ 2</div>
            <div class="player-position">${getDisplayPosition(state.settings.playerRanges.positions?.player2) || 'BB'}</div>
            <div class="player-stack">$1000</div>
          </div>
          <div class="player-avatar">
            <i class="fas fa-user"></i>
          </div>
        </div>
      </div>
      
      <!-- –†—è–¥ 4: –ü–æ–∑–∏—Ü–∏—è –∏ —Å—Ç–µ–∫ -->
      <div class="position-stack-row table-row">
        <div class="position-stack-element center-aligned">
          <div class="position-stack-box-bottom">
            <div class="hero-info-horizontal">
              <div class="player-name-bottom">–ì–µ—Ä–æ–π</div>
              <div class="player-position-bottom">${getDisplayPosition(state.settings.playerRanges.positions?.player2) || 'BB'}</div>
              <div class="player-stack-bottom">$1000</div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- –†—è–¥ 5: –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ -->
      <div class="player-cards-row table-row">
        <div class="player-cards-element center-aligned">
          <div class="player-cards-bottom">
            <div class="card-slot hole-card-bottom">?</div>
            <div class="card-slot hole-card-bottom">?</div>
          </div>
        </div>
      </div>
      
      <!-- –†—è–¥ 6: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
      <div class="action-controls-row table-row">
        <div class="action-control-element center-aligned">
          <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
          <div class="action-buttons-row">
            <button class="action-btn fold-btn" disabled>
              <i class="fas fa-times"></i>
              <span>Fold</span>
            </button>
            <button class="action-btn check-btn" disabled>
              <i class="fas fa-check"></i>
              <span>Check</span>
            </button>
            <button class="action-btn call-btn" disabled>
              <i class="fas fa-phone"></i>
              <span>Call $0</span>
            </button>
            <button class="action-btn raise-btn" disabled>
              <i class="fas fa-arrow-up"></i>
              <span>Raise</span>
            </button>
          </div>
          
          <!-- –†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ -->
          <div class="bet-sizing-row">
            <div class="bet-slider-container">
              <input type="range" class="bet-slider" min="0" max="1000" value="0" step="5">
              <div class="bet-amount-display">$0</div>
            </div>
            <div class="bet-presets">
              <button class="bet-preset" data-size="0.5">1/2</button>
              <button class="bet-preset" data-size="0.75">3/4</button>
              <button class="bet-preset" data-size="1">Pot</button>
              <button class="bet-preset" data-size="1000">All-in</button>
            </div>
          </div>
          
          <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–º -->
          <div class="table-controls-row">
            <button class="table-btn deal-btn">
              <i class="fas fa-play"></i>
              <span>–ù–∞—á–∞—Ç—å</span>
            </button>
            <button class="table-btn reset-btn">
              <i class="fas fa-redo"></i>
              <span>–°–±—Ä–æ—Å</span>
            </button>
            <button class="table-btn auto-btn">
              <i class="fas fa-robot"></i>
              <span>–ê–≤—Ç–æ</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  `;
  
  return table;
}

// ===== –ü–û–ó–ò–¶–ò–ò =====
function getDisplayPosition(position) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ IP/OOP –≤ BTN/BB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (position === 'IP') return 'BTN';
  if (position === 'OOP') return 'BB';
  return position; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
}

// ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
function showNotification(message, type = 'info') {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
  if (typeof message !== 'string') {
    if (message && typeof message === 'object') {
      // –ï—Å–ª–∏ —ç—Ç–æ DOM —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
      if (message.nodeType) {
        message = `DOM Element: ${message.tagName || 'Unknown'}`;
      } else {
        message = JSON.stringify(message, null, 2);
      }
    } else {
      message = String(message);
    }
  }

  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <i class="fas fa-${getNotificationIcon(type)}"></i>
      <span>${message}</span>
    </div>
    <button class="notification-close">
      <i class="fas fa-times"></i>
    </button>
  `;
  
  // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!document.querySelector('.notification-styles')) {
    addNotificationStyles();
  }
  
  document.body.appendChild(notification);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (notification.parentNode) {
      notification.remove();
    }
  }, 5000);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  notification.querySelector('.notification-close').addEventListener('click', () => {
    notification.remove();
  });
}

function getNotificationIcon(type) {
  switch (type) {
    case 'success': return 'check-circle';
    case 'error': return 'exclamation-circle';
    case 'warning': return 'exclamation-triangle';
    default: return 'info-circle';
  }
}

function addNotificationStyles() {
  const style = document.createElement('style');
  style.className = 'notification-styles';
  style.textContent = `
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: var(--bg-secondary);
      border: 1px solid var(--border-primary);
      border-radius: var(--border-radius);
      padding: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
      z-index: 3000;
      box-shadow: var(--shadow-lg);
      min-width: 300px;
      animation: slideInRight 0.3s ease;
    }
    
    .notification-success { border-left: 4px solid var(--accent-primary); }
    .notification-error { border-left: 4px solid var(--accent-danger); }
    .notification-warning { border-left: 4px solid var(--accent-warning); }
    .notification-info { border-left: 4px solid var(--accent-blue); }
    
    .notification-content {
      flex: 1;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .notification-close {
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 5px;
      border-radius: var(--border-radius);
      transition: all var(--transition-fast);
    }
    
    .notification-close:hover {
      background: var(--bg-hover);
      color: var(--text-primary);
    }
    
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
  `;
  
  document.head.appendChild(style);
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function throttle(func, limit) {
  let inThrottle;
  return function() {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  }
}

// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï CSS –°–¢–ò–õ–ò –î–õ–Ø –°–¢–û–õ–û–í =====
function addTableStyles() {
  const style = document.createElement('style');
  style.textContent = `
    /* ===== –û–°–ù–û–í–ù–´–ï –°–¢–ò–õ–ò –°–¢–û–õ–ê ===== */
    .poker-table {
      background: linear-gradient(135deg, #1a2c3f 0%, #2d4f6b 100%);
      border-radius: 12px;
      border: 2px solid var(--border-primary);
      overflow: hidden;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      margin-bottom: 20px;
      /* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ—Å—å —Å—Ç–æ–ª–∞ */
      --table-center-axis: 50%;
    }
    
    .table-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      background: rgba(0, 0, 0, 0.2);
      border-bottom: 1px solid var(--border-primary);
    }
    
    .table-header h3 {
      margin: 0;
      color: var(--accent-primary);
      font-size: 1.1rem;
    }
    
    .table-info {
      display: flex;
      gap: 15px;
    }
    
    .rake-info {
      background: rgba(255, 255, 255, 0.1);
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      color: var(--text-secondary);
    }
    
    /* ===== –ò–ì–†–û–í–û–ï –ü–û–õ–ï –° –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–†–û–ü–û–†–¶–ò–Ø–ú–ò ===== */
    .table-felt {
      background: radial-gradient(ellipse at center, #0f5f3f 0%, #0a4a30 100%);
      position: relative;
      height: 600px; /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
      padding: 20px;
      display: grid;
      grid-template-rows: 1fr 2fr 1fr 60px 60px 60px; /* –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏: –≤–µ—Ä—Ö 1, —Ü–µ–Ω—Ç—Ä 2, –Ω–∏–∑ 1, –ø–æ–∑–∏—Ü–∏—è/—Å—Ç–µ–∫ 60px, –∫–∞—Ä—Ç—ã 60px, –∫–Ω–æ–ø–∫–∏ 60px */
      gap: 8px;
      overflow: hidden;
    }
    
    .table-row {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
    }
    
    /* –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∞—è –ª–∏–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å—Ç–æ–ª–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */
    .table-row::before {
      content: '';
      position: absolute;
      left: var(--table-center-axis);
      top: 0;
      bottom: 0;
      width: 1px;
      background: rgba(255, 255, 255, 0.05);
      z-index: 0;
      pointer-events: none;
    }
    
    /* –ö–ª–∞—Å—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ—Å–∏ */
    .center-aligned {
      position: relative;
      left: 50%;
      transform: translateX(-50%);
      /* –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    /* ===== –ò–ì–†–û–ö–ò ===== */
    .players-top, .players-bottom {
      /* –°—Ç–∏–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ .table-row */
      width: 100%;
    }
    
    .player-seat {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      padding: 12px;
      border-radius: 10px;
      border: 2px solid transparent;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(5px);
      transition: all 0.3s ease;
      position: relative;
      min-width: 180px;
    }
    
    .player-seat.center-aligned {
      /* –û—Å–æ–±—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ */
      margin: 0;
      width: fit-content;
    }
    
    .players-bottom .player-seat {
      flex-direction: column-reverse;
    }
    
    /* –¶–≤–µ—Ç–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π */
    .player-seat.position-btn { border-color: #ff6b35; }  /* –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è BTN */
    .player-seat.position-bb { border-color: #4ecdc4; }   /* –ë–∏—Ä—é–∑–æ–≤—ã–π –¥–ª—è BB */
    .player-seat.position-sb { border-color: #45b7d1; }   /* –°–∏–Ω–∏–π –¥–ª—è SB */
    .player-seat.position-ep { border-color: #f7d794; }   /* –ñ–µ–ª—Ç—ã–π –¥–ª—è EP */
    .player-seat.position-mp { border-color: #c44569; }   /* –†–æ–∑–æ–≤—ã–π –¥–ª—è MP */
    .player-seat.position-co { border-color: #6c5ce7; }   /* –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è CO */
    
    .player-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: var(--accent-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.2rem;
    }
    
    .player-info {
      text-align: center;
      color: white;
    }
    
    .player-info-horizontal {
      display: flex !important;
      flex-direction: row !important;
      align-items: center;
      justify-content: center;
      gap: 8px;
      text-align: center;
      color: white;
      flex-wrap: wrap;
    }
    
    .hero-info-horizontal {
      display: flex !important;
      flex-direction: row !important;
      align-items: center;
      justify-content: center;
      gap: 8px;
      text-align: center;
      flex-wrap: wrap;
    }
    
    /* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    .player-info-horizontal .player-name,
    .player-info-horizontal .player-position, 
    .player-info-horizontal .player-stack {
      margin: 0 !important;
      margin-bottom: 0 !important;
      display: inline-block !important;
    }
    
    .hero-info-horizontal .player-name-bottom,
    .hero-info-horizontal .player-position-bottom,
    .hero-info-horizontal .player-stack-bottom {
      margin: 0 !important;
      margin-bottom: 0 !important;
      display: inline-block !important;
    }
    
    /* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
    .player-info-horizontal .player-name::after,
    .player-info-horizontal .player-position::after {
      content: " | ";
      color: rgba(255, 255, 255, 0.6);
      margin: 0 4px;
    }
    
    .hero-info-horizontal .player-name-bottom::after,
    .hero-info-horizontal .player-position-bottom::after {
      content: " | ";
      color: rgba(255, 255, 255, 0.6);
      margin: 0 4px;
    }

    /* –û–±–ª–∞—Å—Ç—å –≥–µ—Ä–æ—è */
    .hero-area {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 15px;
      margin: 15px auto 0 auto;
      width: 100%;
      max-width: 800px;
      position: relative;
    }

    /* –ë–ª–æ–∫ –∏–≥—Ä–æ–∫–∞-–≥–µ—Ä–æ—è —Å –∑–µ–ª–µ–Ω—ã–º —Ñ–æ–Ω–æ–º */
    .player-section.hero-green {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      padding: 12px;
      border-radius: 10px;
      border: 2px solid rgba(74, 222, 128, 0.5);
      background: rgba(74, 222, 128, 0.1);
      backdrop-filter: blur(5px);
      transition: all 0.3s ease;
      position: relative;
      min-width: 180px;
      width: 220px;
    }

    .player-info-horizontal-green {
      display: flex !important;
      flex-direction: row !important;
      align-items: center;
      justify-content: center;
      gap: 8px;
      text-align: center;
      color: white;
      flex-wrap: wrap;
      font-weight: bold;
      width: fit-content;
      margin: 0 auto;
    }

    /* –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ –±–ª–æ–∫–∞ */
    .player-info-horizontal-green .player-name,
    .player-info-horizontal-green .player-position, 
    .player-info-horizontal-green .player-stack {
      margin: 0 !important;
      margin-bottom: 0 !important;
      display: inline-block !important;
      color: white;
      font-size: 0.9rem;
      font-weight: bold;
    }

    /* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ –±–ª–æ–∫–∞ –≥–µ—Ä–æ—è */
    .player-info-horizontal-green .player-name::after,
    .player-info-horizontal-green .player-position::after {
      content: " | ";
      color: rgba(255, 255, 255, 0.8);
      font-weight: normal;
    }

    .hero-area .actions-right {
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      justify-content: center;
      align-items: center;
      width: 220px;
    }

    .hero-area .actions-right .table-actions {
      width: auto;
      min-width: 300px;
      max-width: 400px;
      display: flex !important;
      flex-direction: column !important;
      flex-wrap: nowrap;
      gap: 6px;
      justify-content: center;
      align-items: center;
      padding: 8px;
      background: rgba(74, 222, 128, 0.05);
      border-radius: 6px;
      border: 1px solid rgba(74, 222, 128, 0.2);
    }
    
    .player-name {
      font-weight: bold;
      font-size: 0.9rem;
      margin-bottom: 2px;
    }
    
    .player-name-bottom {
      font-weight: bold;
      font-size: 0.85rem;
      color: white;
      margin-right: 4px;
    }
    
    /* ===== –ó–ï–õ–ï–ù–´–ô –ë–û–ö–° –ü–û–ó–ò–¶–ò–ò –ò –°–¢–ï–ö–ê ===== */
    .position-stack-box {
      background: rgba(46, 204, 113, 0.15);
      border: 2px solid #2ecc71;
      border-radius: 8px;
      padding: 6px 8px;
      margin: 6px auto;
      width: 100px;
      max-width: 100%;
      text-align: center;
      box-shadow: 0 2px 8px rgba(46, 204, 113, 0.3);
      backdrop-filter: blur(3px);
      position: relative;
      box-sizing: border-box;
    }
    
    .position-stack-box::before {
      content: '';
      position: absolute;
      top: -1px;
      left: -1px;
      right: -1px;
      bottom: -1px;
      background: linear-gradient(45deg, #2ecc71, #27ae60, #2ecc71);
      border-radius: 8px;
      z-index: -1;
      opacity: 0.7;
    }
    
    .player-position {
      background: linear-gradient(135deg, #2ecc71, #27ae60);
      color: white;
      padding: 3px 8px;
      border-radius: 5px;
      font-size: 0.75rem;
      font-weight: bold;
      margin-bottom: 4px;
      display: inline-block;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .player-stack {
      font-size: 0.85rem;
      color: #f1c40f;
      font-weight: bold;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
      display: block;
    }
    
    .player-cards {
      display: flex;
      gap: 4px;
      justify-content: center;
    }
    
    .player-cards.center-aligned {
      margin: 0;
      width: fit-content;
    }
    
    .card-slot.hole-card {
      width: 35px;
      height: 50px;
      background: linear-gradient(145deg, #ffffff, #f0f0f0);
      border: 1px solid #ddd;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      color: #666;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .player-action {
      background: rgba(0, 0, 0, 0.3);
      padding: 4px 8px;
      border-radius: 6px;
      text-align: center;
      min-width: 80px;
    }
    
    /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    .player-action.center-aligned {
      margin: 0;
      width: fit-content;
    }
    
    .action-text {
      display: block;
      font-size: 0.7rem;
      color: #ccc;
    }
    
    .bet-amount {
      display: block;
      font-weight: bold;
      color: #ffd700;
      font-size: 0.8rem;
    }
    
    /* ===== –¶–ï–ù–¢–† –°–¢–û–õ–ê ===== */
    .table-center {
      flex-direction: column;
      gap: 15px;
    }
    
    .pot-area {
      text-align: center;
    }
    
    .pot-area.center-aligned {
      margin: 0 auto;
      width: fit-content;
    }
    
    .pot-total {
      background: rgba(0, 0, 0, 0.4);
      padding: 8px 16px;
      border-radius: 8px;
      border: 1px solid rgba(255, 215, 0, 0.3);
    }
    
    .pot-label {
      display: block;
      font-size: 0.7rem;
      color: #ccc;
      margin-bottom: 2px;
    }
    
    .pot-amount {
      font-size: 1.2rem;
      font-weight: bold;
      color: #ffd700;
    }
    
    .community-cards {
      display: flex;
      gap: 8px;
      justify-content: center;
    }
    
    .community-cards.center-aligned {
      margin: 0;
      width: fit-content;
    }
    
    .card-slot.community {
      width: 50px;
      height: 70px;
      background: linear-gradient(145deg, #ffffff, #f0f0f0);
      border: 2px solid #ddd;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1rem;
      color: #666;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      transition: all 0.3s ease;
    }
    
    .card-slot.community.turn, .card-slot.community.river {
      opacity: 0.6;
      transform: scale(0.95);
    }
    
    .table-dealer {
      position: absolute;
      top: -10px;
      right: -10px;
    }
    
    .dealer-button {
      width: 30px;
      height: 30px;
      background: #ff6b35;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 0.8rem;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    /* ===== –ù–û–í–´–ï –û–¢–î–ï–õ–¨–ù–´–ï –†–Ø–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===== */
    .position-stack-row,
    .player-cards-row,
    .action-controls-row {
      background: rgba(44, 62, 80, 0.3);
      border-radius: 8px;
      margin: 0 -20px; /* –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ –∫—Ä–∞–µ–≤ */
      padding: 8px 20px;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .position-stack-row {
      background: rgba(46, 204, 113, 0.1);
      border: 1px solid rgba(46, 204, 113, 0.3);
    }
    
    .player-cards-row {
      background: rgba(52, 152, 219, 0.1);
      border: 1px solid rgba(52, 152, 219, 0.3);
    }
    
    .action-controls-row {
      background: rgba(155, 89, 182, 0.1);
      border: 1px solid rgba(155, 89, 182, 0.3);
    }
    
    /* ===== –≠–õ–ï–ú–ï–ù–¢ 1: –ü–û–ó–ò–¶–ò–Ø –ò –°–¢–ï–ö ===== */
    .position-stack-element {
      width: fit-content;
    }
    
    .position-stack-box-bottom {
      background: rgba(46, 204, 113, 0.15);
      border: 2px solid #2ecc71;
      border-radius: 8px;
      padding: 6px 8px;
      text-align: center;
      box-shadow: 0 2px 8px rgba(46, 204, 113, 0.3);
      backdrop-filter: blur(3px);
      position: relative;
      width: 100%;
      max-width: 100%;
      box-sizing: border-box; /* –í–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤ –æ–±—â—É—é —à–∏—Ä–∏–Ω—É */
    }
    
    .position-stack-box-bottom::before {
      content: '';
      position: absolute;
      top: -1px;
      left: -1px;
      right: -1px;
      bottom: -1px;
      background: linear-gradient(45deg, #2ecc71, #27ae60, #2ecc71);
      border-radius: 8px;
      z-index: -1;
      opacity: 0.7;
    }
    
    .player-position-bottom {
      background: linear-gradient(135deg, #2ecc71, #27ae60);
      color: white;
      padding: 3px 8px;
      border-radius: 5px;
      font-size: 0.75rem;
      font-weight: bold;
      margin-bottom: 4px;
      display: inline-block;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .player-stack-bottom {
      font-size: 0.85rem;
      color: #f1c40f;
      font-weight: bold;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
      display: block;
    }
    
    /* ===== –≠–õ–ï–ú–ï–ù–¢ 2: –ö–ê–†–¢–´ –ò–ì–†–û–ö–ê ===== */
    .player-cards-element {
      max-width: 120px;
    }
    
    .player-cards-bottom {
      display: flex;
      gap: 6px;
      justify-content: center;
    }
    
    .card-slot.hole-card-bottom {
      width: 40px;
      height: 56px;
      background: linear-gradient(145deg, #ffffff, #f0f0f0);
      border: 2px solid #ddd;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.9rem;
      color: #666;
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
      transition: all 0.3s ease;
    }
    
    .card-slot.hole-card-bottom:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
    }
    
    /* ===== –≠–õ–ï–ú–ï–ù–¢ 3: –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===== */
    .action-control-element {
      width: 100%;
      max-width: 800px;
      display: flex;
      flex-direction: column;
      gap: 6px;
    }
    
    .action-buttons-row,
    .bet-sizing-row,
    .table-controls-row {
      display: flex;
      gap: 6px;
      align-items: center;
      justify-content: center;
      width: 100%;
    }
    
    .action-btn {
      background: linear-gradient(145deg, #3498db, #2980b9);
      border: none;
      border-radius: 6px;
      padding: 6px 8px;
      color: white;
      font-size: 0.7rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1px;
      min-width: 50px;
      flex: 1;
    }
    
    .action-btn:disabled {
      background: linear-gradient(145deg, #7f8c8d, #95a5a6);
      cursor: not-allowed;
      opacity: 0.6;
    }
    
    .action-btn:not(:disabled):hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .fold-btn:not(:disabled) { background: linear-gradient(145deg, #e74c3c, #c0392b); }
    .check-btn:not(:disabled) { background: linear-gradient(145deg, #27ae60, #229954); }
    .call-btn:not(:disabled) { background: linear-gradient(145deg, #f39c12, #e67e22); }
    .raise-btn:not(:disabled) { background: linear-gradient(145deg, #9b59b6, #8e44ad); }
    
    .action-btn i {
      font-size: 0.9rem;
    }
    
    .action-btn span {
      font-size: 0.6rem;
    }
    
    .bet-slider-container {
      display: flex;
      align-items: center;
      gap: 6px;
      flex: 1;
    }
    
    .bet-slider {
      flex: 1;
      height: 4px;
      border-radius: 2px;
      background: #34495e;
      outline: none;
      -webkit-appearance: none;
      min-width: 80px;
    }
    
    .bet-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 14px;
      height: 14px;
      border-radius: 50%;
      background: var(--accent-primary);
      cursor: pointer;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }
    
    .bet-amount-display {
      background: rgba(0, 0, 0, 0.3);
      padding: 3px 6px;
      border-radius: 3px;
      color: #ffd700;
      font-weight: bold;
      font-size: 0.75rem;
      min-width: 45px;
      text-align: center;
    }
    
    .bet-presets {
      display: flex;
      gap: 3px;
    }
    
    .bet-preset {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 3px;
      padding: 2px 4px;
      color: white;
      font-size: 0.6rem;
      cursor: pointer;
      transition: all 0.3s ease;
      flex: 1;
      min-width: 30px;
    }
    
    .bet-preset:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: var(--accent-primary);
    }
    
    .table-btn {
      background: linear-gradient(145deg, #2c3e50, #34495e);
      border: 1px solid var(--border-primary);
      border-radius: 4px;
      padding: 4px 6px;
      color: white;
      font-size: 0.7rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1px;
      min-width: 50px;
      flex: 1;
    }
    
    .table-btn:hover {
      background: linear-gradient(145deg, #34495e, #2c3e50);
      transform: translateY(-1px);
    }
    
    .deal-btn { border-color: #27ae60; }
    .reset-btn { border-color: #e74c3c; }
    .auto-btn { border-color: #f39c12; }
    
    .table-btn i {
      font-size: 0.8rem;
    }
    
    .table-btn span {
      font-size: 0.6rem;
    }
    
    /* ===== –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ –° –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–´–ú –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï–ú ===== */
    @media (max-width: 1200px) {
      .table-felt {
        height: 500px; /* –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
        padding: 15px;
        grid-template-rows: 1fr 2fr 1fr 50px 50px 50px; /* –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
        gap: 6px;
      }
      
      /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */
      .center-aligned {
        left: 50%;
        transform: translateX(-50%);
      }
      
      .position-stack-row,
      .player-cards-row,
      .action-controls-row {
        margin: 0 -15px;
        padding: 6px 15px;
      }
      
      .action-btn,
      .table-btn {
        min-width: 45px;
        padding: 5px 4px;
        font-size: 0.65rem;
      }
      
      .bet-preset {
        font-size: 0.55rem;
        padding: 2px 3px;
      }
      
      .card-slot.community {
        width: 45px;
        height: 63px;
      }
      
      .card-slot.hole-card {
        width: 32px;
        height: 45px;
      }
      
      .position-stack-element {
        width: 100%;
        overflow: hidden;
      }
      
      .position-stack-box-bottom {
        padding: 5px 7px;
        font-size: 0.85rem;
      }
      
      .player-position-bottom {
        font-size: 0.7rem;
        padding: 2px 7px;
      }
      
      .player-stack-bottom {
        font-size: 0.8rem;
      }
    }
    
    @media (max-width: 768px) {
      .table-felt {
        height: 450px; /* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ */
        padding: 12px;
        grid-template-rows: 0.8fr 1.8fr 0.8fr 45px 45px 45px; /* –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ */
        gap: 6px;
      }
      
      .position-stack-row,
      .player-cards-row,
      .action-controls-row {
        margin: 0 -12px;
        padding: 6px 12px;
      }
      
      .action-buttons-row,
      .bet-sizing-row,
      .table-controls-row {
        flex-wrap: wrap;
        gap: 4px;
      }
      
      .action-btn,
      .table-btn {
        min-width: 40px;
        font-size: 0.6rem;
      }
      
      .card-slot.hole-card-bottom {
        width: 35px;
        height: 50px;
      }
      
      .card-slot.community {
        width: 40px;
        height: 56px;
      }
      
      .card-slot.hole-card {
        width: 28px;
        height: 40px;
      }
      
      /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–∞—Ö */
      .center-aligned {
        left: 50%;
        transform: translateX(-50%);
      }
    }
    
    @media (max-width: 480px) {
      .table-felt {
        height: 380px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        padding: 10px;
        grid-template-rows: 0.7fr 1.6fr 0.7fr 40px 40px 40px; /* –ï—â–µ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ */
        gap: 4px;
      }
      
      .position-stack-row,
      .player-cards-row,
      .action-controls-row {
        margin: 0 -10px;
        padding: 4px 10px;
      }
      
      .action-btn,
      .table-btn {
        min-width: 35px;
        padding: 3px 2px;
        font-size: 0.55rem;
      }
      
      .action-btn i,
      .table-btn i {
        font-size: 0.7rem;
      }
      
      .action-btn span,
      .table-btn span {
        font-size: 0.5rem;
      }
      
      .bet-slider {
        min-width: 60px;
      }
      
      .bet-amount-display {
        font-size: 0.7rem;
        min-width: 40px;
      }
      
      .bet-preset {
        font-size: 0.5rem;
        min-width: 25px;
      }
      
      .card-slot.community {
        width: 35px;
        height: 49px;
      }
      
      .card-slot.hole-card {
        width: 25px;
        height: 35px;
      }
      
      .position-stack-element {
        width: 100%;
        overflow: hidden;
      }
      
      .position-stack-box-bottom {
        padding: 4px 6px;
        font-size: 0.8rem;
      }
      
      .player-position-bottom {
        font-size: 0.65rem;
        padding: 2px 6px;
      }
      
      .player-stack-bottom {
        font-size: 0.75rem;
      }
      
      /* –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
      .center-aligned {
        left: 50%;
        transform: translateX(-50%);
      }
    }
  `;
  
  document.head.appendChild(style);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–∑–∏—Ü–∏–π
function initializePositionButtons() {
  const positionBtns = document.querySelectorAll('.position-btn');
  const oopIpBtns = document.querySelectorAll('.oop-ip-btn');
  
  // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ positions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!state.settings.playerRanges.positions) {
    state.settings.playerRanges.positions = {
      player1: 'BTN',
      player2: 'BB'
    };
  }
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const player1Position = state.settings.playerRanges.positions.player1 || 'BTN';
  const player2Position = state.settings.playerRanges.positions.player2 || 'BB';
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (BTN, BB, EP, MP, CO, SB)
  document.querySelectorAll(`[data-player="1"][data-position="${player1Position}"]`).forEach(btn => btn.classList.add('active'));
  document.querySelectorAll(`[data-player="2"][data-position="${player2Position}"]`).forEach(btn => btn.classList.add('active'));
  
  console.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π: Player1=${player1Position}, Player2=${player2Position}`);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (EP/MP/CO/BTN/SB/BB)
  positionBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const player = this.dataset.player;
      const position = this.dataset.position;
      
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞  
      document.querySelectorAll(`[data-player="${player}"]`).forEach(b => {
        if (b.classList.contains('position-btn')) {
          b.classList.remove('active');
        }
      });
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
      this.classList.add('active');
      
      // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ positions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!state.settings.playerRanges.positions) {
        state.settings.playerRanges.positions = {};
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      state.settings.playerRanges.positions[`player${player}`] = position;
      
      console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', `player${player}`, '=', position);
      console.log('üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:', state.settings.playerRanges.positions);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      syncGameSettings();
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è IP/OOP
  oopIpBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const player = this.dataset.player;
      const position = this.dataset.position;
      
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      document.querySelectorAll(`[data-player="${player}"]`).forEach(b => b.classList.remove('active'));
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É IP/OOP
      this.classList.add('active');
      
      // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ positions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!state.settings.playerRanges.positions) {
        state.settings.playerRanges.positions = {};
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ IP/OOP
      state.settings.playerRanges.positions[`player${player}`] = position;
      
      console.log('üéØ IP/OOP –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', `player${player}`, '=', position);
      console.log('üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:', state.settings.playerRanges.positions);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      syncGameSettings();
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function syncGameSettings() {
  currentGameSettings = {
    tablesCount: state.settings.tablesCount,
    rakePercent: state.settings.rakePercent,
    rakeDollar: state.settings.rakeDollar,
    preflopSpot: state.settings.preflopSpot,
    boardSettings: state.settings.boardSettings,
    playerRanges: {
      player1: state.settings.playerRanges.player1,
      player2: state.settings.playerRanges.player2,
      positions: state.settings.playerRanges.positions
    }
  };
  
  console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', currentGameSettings);
  console.log('üÉè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç —Ñ–ª–æ–ø–∞:', currentGameSettings.boardSettings?.flop);
  console.log('üéØ –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', currentGameSettings.playerRanges?.positions);
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
function testHandRangeParsing() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ä—É–∫');
  
  // –ü—Ä–∏–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
  const testString = 'AA,KK,QQ,JJ,TT,99,88,77,66,55,44,33,22,AK,AQ,AJ,AT,A9,A8,A7s:0.75,A7o,A6s:0.75,A6o,A5s:0.75,A5o,A4s:0.75,A4o,A3,A2,KQ,KJ,KTs,KTo:0.25,K9s,K9o:0.25,K8,K7s,K6s,K5s,K4s,K3s,K2s,QJ,QTs,QTo:0.25,Q9s,Q9o:0.25,Q8,Q7s,Q6s,Q5s,Q4s,Q3s,Q2s,JT,J9,J8,J7s,J6s,J5s,J4s,T9,T8,T7s,T6s,98,97,96s,95s,87,86s,85s,84s,76,75s,74s,65s,64s,63s,54s,53s,43s';
  console.log('üéØ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞:', testString);
  
  const result = parseHandRange(testString);
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:');
  console.log('üìä –†—É–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏:');
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
  const partialWeightHands = [];
  result.forEach((frequency, hand) => {
    if (frequency !== 1.0) {
      partialWeightHands.push(`${hand}: ${frequency} (${frequency * 100}%)`);
    }
  });
  
  if (partialWeightHands.length > 0) {
    console.log('  ‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—É–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏:');
    partialWeightHands.forEach(hand => console.log(`    ${hand}`));
  } else {
    console.log('  ‚ùå –†—É–∫–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  console.log(`üìä –í—Å–µ–≥–æ —Ä—É–∫: ${result.size}`);
  console.log(`üìä –†—É–∫ —Å –ø–æ–ª–Ω—ã–º –≤–µ—Å–æ–º (100%): ${Array.from(result.values()).filter(f => f === 1.0).length}`);
  console.log(`üìä –†—É–∫ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –≤–µ—Å–æ–º: ${Array.from(result.values()).filter(f => f !== 1.0).length}`);
  
  return result;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function testUserExample() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  // –ü—Ä–∏–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userString = 'AA,KK,QQ,JJ,TT,99,88,77,66,55,44,33,22,AK,AQ,AJ,AT,A9,A8,A7,A6,A5,A4,A3,A2s,KQ,KJ,KT,K9,K8s,K7s,K6s,K5s,K4s,K3s,K2s,QJ,QT,Q9,Q8s,Q7s,Q6s,Q5s,Q4s,Q3s,Q2s,JT,J9,J8s,J7s,J6s,J5s,J4s,T9,T8,T7s,T6s,98,97s,96s,95s,87,86s,85s,84s,76s,75s,74s,65s,64s,63s,54s,53s,43s';
  
  console.log('üéØ –°—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userString);
  console.log('üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:', userString.length);
  
  const result = parseHandRange(userString);
  
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
  console.log(`üìä –í—Å–µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Ä—É–∫: ${result.size}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä—É–∫–∏ –ø–æ —Ç–∏–ø–∞–º
  const pairs = [];
  const suited = [];
  const offsuit = [];
  
  result.forEach((frequency, hand) => {
    if (hand.length === 2) {
      pairs.push(hand);
    } else if (hand.endsWith('s')) {
      suited.push(hand);
    } else if (hand.endsWith('o')) {
      offsuit.push(hand);
    }
  });
  
  console.log(`üìä –ü–∞—Ä—ã: ${pairs.length} (${pairs.slice(0, 5).join(', ')}${pairs.length > 5 ? '...' : ''})`);
  console.log(`üìä Suited —Ä—É–∫–∏: ${suited.length} (${suited.slice(0, 5).join(', ')}${suited.length > 5 ? '...' : ''})`);
  console.log(`üìä Offsuit —Ä—É–∫–∏: ${offsuit.length} (${offsuit.slice(0, 5).join(', ')}${offsuit.length > 5 ? '...' : ''})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä—É–∫–∏
  const testHands = ['AA', 'AKs', 'AKo', 'A2s', 'KQs', 'KQo', '43s'];
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä—É–∫:');
  testHands.forEach(hand => {
    const found = result.has(hand);
    const frequency = result.get(hand) || 0;
    console.log(`  ${found ? '‚úÖ' : '‚ùå'} ${hand}: ${found ? `–Ω–∞–π–¥–µ–Ω–∞ (${frequency})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  });
  
  return result;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function testUserSpecificExample() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  // –ü—Ä–∏–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userString = 'AA,KK:0.5,AKs,AKo:0.5,AQs,AJs,ATs,A9s,A8s,A7s,A6s,A5s,A4s,A3s,A2s,KQs:0.5,KJs:0.5,KTs:0.5,K9s:0.5,K8s:0.5,K7s:0.5,K6s:0.5,K5s:0.5,K4s:0.5,K3s:0.5,K2s:0.5';
  
  console.log('üéØ –°—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userString);
  
  const result = parseHandRange(userString);
  
  console.log('\\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
  console.log(`üìä –í—Å–µ–≥–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Ä—É–∫: ${result.size}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä—É–∫–∏ –ø–æ –æ–∂–∏–¥–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const expectedFullWeight = ['AA', 'AKs', 'AQs', 'AJs', 'ATs', 'A9s', 'A8s', 'A7s', 'A6s', 'A5s', 'A4s', 'A3s', 'A2s'];
  const expectedHalfWeight = ['KK', 'AKo', 'KQs', 'KJs', 'KTs', 'K9s', 'K8s', 'K7s', 'K6s', 'K5s', 'K4s', 'K3s', 'K2s'];
  
  console.log('\\n‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä—É–∫–∏ —Å –≤–µ—Å–æ–º 100%:');
  expectedFullWeight.forEach(hand => {
    const found = result.has(hand) || result.has(hand.toLowerCase()) || result.has(hand.toUpperCase());
    const frequency = result.get(hand) || result.get(hand.toLowerCase()) || result.get(hand.toUpperCase()) || 0;
    const isCorrect = found && Math.abs(frequency - 1.0) < 0.001;
    console.log(`  ${isCorrect ? '‚úÖ' : '‚ùå'} ${hand}: ${found ? `–Ω–∞–π–¥–µ–Ω–∞ (${frequency})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  });
  
  console.log('\\nüîÑ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä—É–∫–∏ —Å –≤–µ—Å–æ–º 50%:');
  expectedHalfWeight.forEach(hand => {
    const found = result.has(hand) || result.has(hand.toLowerCase()) || result.has(hand.toUpperCase());
    const frequency = result.get(hand) || result.get(hand.toLowerCase()) || result.get(hand.toUpperCase()) || 0;
    const isCorrect = found && Math.abs(frequency - 0.5) < 0.001;
    console.log(`  ${isCorrect ? '‚úÖ' : '‚ùå'} ${hand}: ${found ? `–Ω–∞–π–¥–µ–Ω–∞ (${frequency})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  });
  
  console.log('\\nüîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—É–∫–∏:');
  const sortedHands = Array.from(result.entries()).sort((a, b) => a[0].localeCompare(b[0]));
  sortedHands.forEach(([hand, freq]) => {
    console.log(`  ${hand}: ${freq} (${freq * 100}%)`);
  });
  
  return result;
}

// ===== –ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–û–í –§–ê–ô–õ–û–í =====
function renderPreflopSpotItems(items, container, level = 0, selectContainer = null) {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if (!selectContainer) {
        selectContainer = document.querySelector('.preflop-selector .custom-select-container');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
    if (level === 0) {
        const containerId = container.id || container.className || 'preflop-container';
        if (!window.eventHandlersTracker.checkRenderStatus(containerId, items.length)) {
            return; // –£–∂–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
        container.innerHTML = '';
    }
    
    console.log(`üìù –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${level}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if (level === 0 && container.children.length > 0) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—á–∏—â–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
        container.innerHTML = '';
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É
    const folders = items.filter(item => item.type === 'folder');
    const files = items.filter(item => item.type === 'file');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏
    folders.forEach(folder => {
        const folderDiv = document.createElement('div');
        folderDiv.className = 'preflop-folder-header';
        folderDiv.style.paddingLeft = `${level * 20 + 10}px`;
        folderDiv.setAttribute('data-folder-path', folder.path);
        
        folderDiv.innerHTML = `
            <span class="preflop-folder-toggle">‚ñ∂</span>
            <span class="preflop-folder-name">${folder.name}</span>
        `;
        
        const folderContent = document.createElement('div');
        folderContent.className = 'preflop-folder-content';
        folderContent.style.maxHeight = '0px';
        folderContent.style.overflow = 'hidden';
        folderContent.style.transition = 'max-height 0.3s ease';
        folderContent.setAttribute('data-folder-content', folder.path);
        
        folderDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            
            const toggle = folderDiv.querySelector('.preflop-folder-toggle');
            const isExpanded = toggle.textContent === '‚ñº';
            
            if (isExpanded) {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
                folderContent.style.maxHeight = '0px';
                toggle.textContent = '‚ñ∂';
            } else {
                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
                toggle.textContent = '‚ñº';
                
                // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                if (folderContent.children.length > 0) {
                    folderContent.style.maxHeight = folderContent.scrollHeight + 'px';
                } else {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
                    fetch(`/api/preflopspot/${encodeURIComponent(folder.path)}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ ${folder.name}:`, data);
                            const selectContainer = document.querySelector('.preflop-selector .custom-select-container');
                            renderPreflopSpotItems(data.items, folderContent, level + 1, selectContainer);
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                            setTimeout(() => {
                                folderContent.style.maxHeight = folderContent.scrollHeight + 'px';
                            }, 10);
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏:', error);
                            folderContent.innerHTML = `<div style="padding: 10px; color: #ef4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>`;
                            folderContent.style.maxHeight = '40px';
                        });
                }
            }
        });
        
        container.appendChild(folderDiv);
        container.appendChild(folderContent);
    });
    
    // –ó–∞—Ç–µ–º —Ñ–∞–π–ª—ã
    files.forEach(file => {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'preflop-file-item';
        fileDiv.style.paddingLeft = `${level * 20 + 30}px`;
        fileDiv.innerHTML = `
            <span class="preflop-file-icon">üìÑ</span>
            <span class="preflop-file-name">${file.name}</span>
        `;
        
        fileDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            
            loadPreflopSpot(file.path);
            // –°–∫—Ä—ã—Ç—å dropdown –∏ –æ–±–Ω–æ–≤–∏—Ç—å trigger
            const selectContainer = document.querySelector('.preflop-selector .custom-select-container');
            
            if (selectContainer) {
                const dropdown = selectContainer.querySelector('.select-dropdown');
                const trigger = selectContainer.querySelector('.select-trigger');
                const triggerText = selectContainer.querySelector('.select-text');
                
                if (dropdown) dropdown.classList.remove('active');
                if (trigger) trigger.classList.remove('active');
                if (triggerText) triggerText.textContent = file.name;
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º dropdown –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                if (dropdown && dropdown.parentElement === document.body) {
                    document.body.removeChild(dropdown);
                    selectContainer.appendChild(dropdown);
                }
            }
        });
        
        container.appendChild(fileDiv);
    });
}

// ===== RANGE SELECTOR FUNCTIONS =====
function renderRangeSelectItems(items, container, level = 0, selectContainer = null) {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    if (!selectContainer) {
        selectContainer = container.closest('.custom-select-container');
    }
    
    if (!selectContainer) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞');
        return;
    }
    
    const playerNum = selectContainer.id.includes('player1') ? 1 : 2;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
    if (level === 0) {
        const containerId = `range-player${playerNum}-${container.className}`;
        if (!window.eventHandlersTracker.checkRenderStatus(containerId, items.length)) {
            return; // –£–∂–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
        container.innerHTML = '';
    }
    
    console.log(`üéØ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–π–Ω–¥–∂–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNum} (${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${level})`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if (level === 0 && container.children.length > 0) {
        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–π–Ω–¥–∂–µ–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—á–∏—â–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
        container.innerHTML = '';
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø—É
    const folders = items.filter(item => item.type === 'folder');
    const files = items.filter(item => item.type === 'file');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏
    folders.forEach(folder => {
        const folderDiv = document.createElement('div');
        folderDiv.className = 'range-folder-header';
        folderDiv.style.paddingLeft = `${level * 20 + 10}px`;
        folderDiv.setAttribute('data-folder-path', folder.path);
        
        folderDiv.innerHTML = `
            <span class="folder-toggle">‚ñ∂</span>
            <span class="folder-name">${folder.name}</span>
        `;
        
        const folderContent = document.createElement('div');
        folderContent.className = 'folder-content';
        folderContent.style.maxHeight = '0px';
        folderContent.style.overflow = 'hidden';
        folderContent.style.transition = 'max-height 0.3s ease';
        folderContent.setAttribute('data-folder-content', folder.path);
        
        folderDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            
            const toggle = folderDiv.querySelector('.folder-toggle');
            const isExpanded = toggle.textContent === '‚ñº';
            
            if (isExpanded) {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
                folderContent.style.maxHeight = '0px';
                toggle.textContent = '‚ñ∂';
            } else {
                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
                toggle.textContent = '‚ñº';
                
                // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                if (folderContent.children.length > 0) {
                    folderContent.style.maxHeight = folderContent.scrollHeight + 'px';
                } else {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
                    fetch(`/api/range/${encodeURIComponent(folder.path)}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —Ä–µ–π–Ω–¥–∂–µ–π ${folder.name}:`, data);
                            renderRangeSelectItems(data.items, folderContent, level + 1, selectContainer);
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                            setTimeout(() => {
                                folderContent.style.maxHeight = folderContent.scrollHeight + 'px';
                            }, 10);
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏ —Ä–µ–π–Ω–¥–∂–µ–π:', error);
                            folderContent.innerHTML = `<div style="padding: 10px; color: #ef4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>`;
                            folderContent.style.maxHeight = '40px';
                        });
                }
            }
        });
        
        container.appendChild(folderDiv);
        container.appendChild(folderContent);
    });
    
    // –ó–∞—Ç–µ–º —Ñ–∞–π–ª—ã
    files.forEach(file => {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'range-preset-item';
        fileDiv.style.paddingLeft = `${level * 20 + 30}px`;
        fileDiv.innerHTML = `
            <span class="file-icon">üìÑ</span>
            <span class="file-name">${file.name}</span>
        `;
        
        fileDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            
            console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª—É —Ä–µ–π–Ω–¥–∂–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNum}:`, file.path);
            
            loadRangePreset(file.path, playerNum);
            
            // –°–∫—Ä—ã—Ç—å dropdown –∏ –æ–±–Ω–æ–≤–∏—Ç—å trigger
            const dropdown = selectContainer.querySelector('.select-dropdown');
            const trigger = selectContainer.querySelector('.select-trigger');
            const triggerText = selectContainer.querySelector('.select-text');
            
            if (dropdown) dropdown.classList.remove('active');
            if (trigger) trigger.classList.remove('active');
            if (triggerText) triggerText.textContent = file.name;
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º dropdown –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (dropdown.parentElement === document.body) {
                document.body.removeChild(dropdown);
                selectContainer.appendChild(dropdown);
            }
        });
        
        container.appendChild(fileDiv);
    });
}

function initializeRangeSelector(selectId) {
    const selectContainer = document.getElementById(selectId);
    if (!selectContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
    if (selectContainer.dataset.initialized === 'true') {
        console.log(`‚úÖ Range —Å–µ–ª–µ–∫—Ç–æ—Ä ${selectId} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
    }
    
    const trigger = selectContainer.querySelector('.select-trigger');
    const dropdown = selectContainer.querySelector('.select-dropdown');
    const optionsContainer = dropdown.querySelector('.select-options');
    
    if (!trigger || !dropdown || !optionsContainer) {
        console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã range —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ${selectId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    selectContainer.dataset.initialized = 'true';
    console.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è range —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ${selectId}...`);
    
    trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        
        if (dropdown.classList.contains('active')) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            dropdown.classList.remove('active');
            trigger.classList.remove('active');
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ body –µ—Å–ª–∏ –æ–Ω —Ç–∞–º
            if (dropdown.parentElement === document.body) {
                document.body.removeChild(dropdown);
                selectContainer.appendChild(dropdown);
            }
        } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
            trigger.classList.add('active');
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º dropdown –≤ body –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            document.body.appendChild(dropdown);
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º dropdown –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ trigger
            const triggerRect = trigger.getBoundingClientRect();
            dropdown.style.position = 'fixed';
            dropdown.style.top = `${triggerRect.bottom + window.scrollY}px`;
            dropdown.style.left = `${triggerRect.left + window.scrollX}px`;
            dropdown.style.width = `${triggerRect.width}px`;
            dropdown.style.zIndex = '10000';
            
            dropdown.classList.add('active');
            
            // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–π–Ω–¥–∂–µ–π
            window.eventHandlersTracker.clearRenderTracker();
            fetch('/api/ranges')
                .then(response => response.json())
                .then(data => {
                    renderRangeSelectItems(data.items, optionsContainer, 0, selectContainer);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π–Ω–¥–∂–µ–π:', error);
                    optionsContainer.innerHTML = '<div style="padding: 10px; color: #ef4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞</div>';
                });
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (dropdown && trigger && !dropdown.contains(e.target) && !trigger.contains(e.target)) {
            dropdown.classList.remove('active');
            trigger.classList.remove('active');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º dropdown –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (dropdown.parentElement === document.body) {
                document.body.removeChild(dropdown);
                selectContainer.appendChild(dropdown);
            }
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è preflop selector —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º dropdown –≤ body
function initializePreflopSelector() {
    const selectContainer = document.querySelector('.preflop-selector .custom-select-container');
    if (!selectContainer) {
        console.error('‚ùå –ü—Ä–µ—Ñ–ª–æ–ø —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Å–µ–ª–µ–∫—Ç–æ—Ä
    if (selectContainer.dataset.initialized === 'true') {
        console.log('‚úÖ –ü—Ä–µ—Ñ–ª–æ–ø —Å–µ–ª–µ–∫—Ç–æ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    const trigger = selectContainer.querySelector('.select-trigger');
    const dropdown = selectContainer.querySelector('.select-dropdown');
    const optionsContainer = dropdown.querySelector('.select-options');
    
    if (!trigger || !dropdown || !optionsContainer) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ—Ñ–ª–æ–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', { trigger: !!trigger, dropdown: !!dropdown, optionsContainer: !!optionsContainer });
        return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    selectContainer.dataset.initialized = 'true';
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ñ–ª–æ–ø —Å–µ–ª–µ–∫—Ç–æ—Ä–∞...');
    
    trigger.addEventListener('click', (e) => {
        e.stopPropagation();
        
        if (dropdown.classList.contains('active')) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            dropdown.classList.remove('active');
            trigger.classList.remove('active');
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ body –µ—Å–ª–∏ –æ–Ω —Ç–∞–º
            if (dropdown.parentElement === document.body) {
                document.body.removeChild(dropdown);
                selectContainer.appendChild(dropdown);
            }
        } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
            trigger.classList.add('active');
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º dropdown –≤ body –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            document.body.appendChild(dropdown);
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º dropdown –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ trigger
            const triggerRect = trigger.getBoundingClientRect();
            dropdown.style.position = 'fixed';
            dropdown.style.top = `${triggerRect.bottom + window.scrollY}px`;
            dropdown.style.left = `${triggerRect.left + window.scrollX}px`;
            dropdown.style.width = `${triggerRect.width}px`;
            dropdown.style.zIndex = '10000';
            
            dropdown.classList.add('active');
            
            // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ spot'–æ–≤
            window.eventHandlersTracker.clearRenderTracker();
            fetch('/api/preflopspots')
                .then(response => response.json())
                .then(data => {
                    renderPreflopSpotItems(data.items, optionsContainer, 0, selectContainer);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ preflop spots:', error);
                    optionsContainer.innerHTML = '<div style="padding: 10px; color: #ef4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞</div>';
                });
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (dropdown && trigger && !dropdown.contains(e.target) && !trigger.contains(e.target)) {
            dropdown.classList.remove('active');
            trigger.classList.remove('active');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º dropdown –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (dropdown.parentElement === document.body) {
                document.body.removeChild(dropdown);
                selectContainer.appendChild(dropdown);
            }
        }
    });
}



async function loadPreflopSpotsList() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤...');
    const response = await fetch('/api/preflopspots');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤:', data);
    
    const container = document.querySelector('#preflop-spot-select .select-options');
    console.log('üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø—Ü–∏–π –Ω–∞–π–¥–µ–Ω:', !!container);
    
    if (container) {
      // –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      container.innerHTML = '';
      
      // –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      if (data.items && data.items.length > 0) {
        renderPreflopSpotItems(data.items, container);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    } else {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .select-options –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–æ–≤:', error);
  }
}

function renderRangeItems(items, container, level = 0) {
  items.forEach(item => {
    if (item.type === 'folder') {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–ø–∫–∏
      const folderHeader = document.createElement('div');
      folderHeader.className = 'range-folder-header';
      folderHeader.style.paddingLeft = `${level * 20}px`;
      folderHeader.setAttribute('data-folder-path', item.path);
      folderHeader.innerHTML = `
        <span class="folder-toggle">‚ñ∂</span>
        <span class="folder-name">${item.name}</span>
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
      const folderContent = document.createElement('div');
      folderContent.className = 'folder-content';
      folderContent.style.display = 'none'; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ
      folderContent.setAttribute('data-folder-content', item.path);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
      folderHeader.onclick = () => toggleFolder(item.path);
      
      container.appendChild(folderHeader);
      container.appendChild(folderContent);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –≤ –µ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      renderRangeItems(item.children, folderContent, level + 1);
    } else if (item.type === 'file') {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–∞
      const fileItem = document.createElement('div');
      fileItem.className = 'range-preset-item';
      fileItem.style.paddingLeft = `${level * 20 + 20}px`;
      fileItem.onclick = () => loadRangePreset(item.path);
      fileItem.innerHTML = `
        <span class="file-icon">üìÑ</span>
        <span class="file-name">${item.name}</span>
      `;
      container.appendChild(fileItem);
    }
  });
}

function toggleFolder(folderPath) {
  const folderContent = document.querySelector(`[data-folder-content="${folderPath}"]`);
  const folderHeader = document.querySelector(`[data-folder-path="${folderPath}"]`);
  const toggle = folderHeader.querySelector('.folder-toggle');
  
  if (folderContent) {
    const isVisible = folderContent.style.display !== 'none';
    folderContent.style.display = isVisible ? 'none' : 'block';
    toggle.textContent = isVisible ? '‚ñ∂' : '‚ñº';
  }
}

async function loadRangesList() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä–µ–π–Ω–¥–∂–µ–π...');
    const response = await fetch('/api/ranges');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ä–µ–π–Ω–¥–∂–µ–π:', data);
    
    const container = document.querySelector('.range-presets-list');
    console.log('üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–π–Ω–¥–∂–µ–π –Ω–∞–π–¥–µ–Ω:', !!container);
    
    if (container) {
      // –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      container.innerHTML = '';
      
      // –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
      if (data.items && data.items.length > 0) {
        renderRangeItems(data.items, container);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–π–Ω–¥–∂–µ–π`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–π–Ω–¥–∂–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    } else {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä .range-presets-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–π–Ω–¥–∂–µ–π:', error);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (typeof window !== 'undefined') {
  window.testHandRangeParsing = testHandRangeParsing;
  window.testUserExample = testUserExample;
  window.testUserSpecificExample = testUserSpecificExample;
} 

// ===== –ê–ù–ò–ú–ê–¶–ò–ò –û–ß–ï–†–ï–î–ò –•–û–î–ê =====

function setActivePlayerTurn(playerNumber) {
  // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  clearAllPlayerTurnAnimations();
  
  console.log(`üé¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNumber}`);
  
  if (playerNumber === 1) {
    // –í–µ—Ä—Ö–Ω–∏–π –∏–≥—Ä–æ–∫ (–ò–≥—Ä–æ–∫ 1)
    const playerSeat = document.querySelector('.player-seat.seat-1');
    if (playerSeat) {
      playerSeat.classList.add('active-turn');
      console.log('üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞');
    }
  } else if (playerNumber === 2) {
    // –ù–∏–∂–Ω–∏–π –∏–≥—Ä–æ–∫ (–ò–≥—Ä–æ–∫ 2 / –ì–µ—Ä–æ–π)
    const heroSection = document.querySelector('.player-section.hero-green');
    const playerSeat = document.querySelector('.player-seat.seat-2');
    
    if (heroSection) {
      heroSection.classList.add('active-turn');
      console.log('üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥–µ—Ä–æ—è (–∑–µ–ª–µ–Ω—ã–π –±–ª–æ–∫)');
    } else if (playerSeat) {
      playerSeat.classList.add('active-turn');
      console.log('üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞');
    }
  }
}

function clearAllPlayerTurnAnimations() {
  // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
  const containers = document.querySelectorAll(
    '.player-seat.active-turn, .opponent-area-compact.active-turn, .player-section.hero-green.active-turn'
  );
  
  containers.forEach(container => {
    container.classList.remove('active-turn');
  });
  
  console.log(`üé¨ –û—á–∏—â–µ–Ω—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ (${containers.length} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)`);
}

function updatePlayerTurnAnimations() {
  console.log('üé¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤');
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  clearAllPlayerTurnAnimations();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–æ–ª—ã
  const tables = document.querySelectorAll('.poker-table');
  
  tables.forEach((table, index) => {
    const tableNumber = index + 1;
    console.log(`üé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∞ ${tableNumber}`);
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    const activeButtons = table.querySelectorAll('.action-btn:not([disabled])');
    const hasActiveButtons = activeButtons.length > 0;
    
    console.log(`üé¨ –°—Ç–æ–ª ${tableNumber}: –Ω–∞–π–¥–µ–Ω–æ ${activeButtons.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫`, 
      Array.from(activeButtons).map(btn => btn.textContent.trim()));
    
    if (hasActiveButtons) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ (–≥–µ—Ä–æ—è)
      setActivePlayerTurnForTable(table, 2); // 2 = –≥–µ—Ä–æ–π/–Ω–∏–∂–Ω–∏–π –∏–≥—Ä–æ–∫
    }
  });
}

function setActivePlayerTurnForTable(tableElement, playerNumber) {
  const tableIndex = Array.from(document.querySelectorAll('.poker-table')).indexOf(tableElement) + 1;
  console.log(`üé¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNumber} –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
  
  if (playerNumber === 1) {
    // –í–µ—Ä—Ö–Ω–∏–π –∏–≥—Ä–æ–∫ (–ò–≥—Ä–æ–∫ 1)
    const playerSeat = tableElement.querySelector('.player-seat.seat-1');
    if (playerSeat) {
      playerSeat.classList.add('active-turn');
      console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
    }
  } else if (playerNumber === 2) {
    // –ù–∏–∂–Ω–∏–π –∏–≥—Ä–æ–∫ (–ò–≥—Ä–æ–∫ 2 / –ì–µ—Ä–æ–π)
    let animationAdded = false;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–µ–ª–µ–Ω—ã–π –±–ª–æ–∫ –≥–µ—Ä–æ—è
    const heroSection = tableElement.querySelector('.player-section.hero-green');
    if (heroSection) {
      heroSection.classList.add('active-turn');
      console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥–µ—Ä–æ—è (–∑–µ–ª–µ–Ω—ã–π –±–ª–æ–∫) –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
      animationAdded = true;
    }
    
    // –ï—Å–ª–∏ –∑–µ–ª–µ–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ—Ç, –∏—â–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ –∏–≥—Ä–æ–∫–∞
    if (!animationAdded) {
      const playerSeat = tableElement.querySelector('.player-seat.seat-2');
      if (playerSeat) {
        playerSeat.classList.add('active-turn');
        console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
        animationAdded = true;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (!animationAdded) {
      const heroBox = tableElement.querySelector('.position-stack-box-bottom');
      if (heroBox) {
        heroBox.classList.add('active-turn');
        console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–æ–∫—Å–∞ –≥–µ—Ä–æ—è –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
        animationAdded = true;
      }
    }
    
    if (!animationAdded) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥–µ—Ä–æ—è –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
    }
  }
}

function checkIfPlayer1Turn() {
  // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫ 1 (–≤–µ—Ä—Ö–Ω–∏–π) –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  // –≠—Ç–æ –ò–ò –∏–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
  return false;
}

function checkIfPlayer2Turn() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ª—é–±–æ–º —Å—Ç–æ–ª–µ
  const activeButtons = document.querySelectorAll('.action-btn:not([disabled])');
  const hasActiveButtons = activeButtons.length > 0;
  
  console.log(`üé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ 2: –Ω–∞–π–¥–µ–Ω–æ ${activeButtons.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫`);
  return hasActiveButtons;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
function testPlayerTurnAnimations() {
  console.log('üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–æ–≤ –µ—Å—Ç—å –≤ DOM
  const tables = document.querySelectorAll('.poker-table');
  console.log(`üé¨ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ª–æ–≤: ${tables.length}`);
  
  if (tables.length === 0) {
    console.log('‚ö†Ô∏è –°—Ç–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–æ–ª—ã —Å–Ω–∞—á–∞–ª–∞.');
    return;
  }
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('üé¨ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫');
  updatePlayerTurnAnimations();
  
  // –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–∞
  setTimeout(() => {
    console.log('üé¨ –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–∞');
    if (tables[0]) {
      setActivePlayerTurnForTable(tables[0], 2);
    }
  }, 2000);
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤
  setTimeout(() => {
    console.log('üé¨ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤');
    tables.forEach((table, index) => {
      const activeButtons = table.querySelectorAll('.action-btn:not([disabled])');
      console.log(`–°—Ç–æ–ª ${index + 1}: ${activeButtons.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫`);
      if (activeButtons.length > 0) {
        setActivePlayerTurnForTable(table, 2);
      }
    });
  }, 4000);
  
  // –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
  setTimeout(() => {
    console.log('üé¨ –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π');
    clearAllPlayerTurnAnimations();
  }, 7000);
  
  // –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
  setTimeout(() => {
    console.log('üé¨ –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã');
    updatePlayerTurnAnimations();
  }, 8000);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM
const playerTurnObserver = new MutationObserver((mutations) => {
  let shouldUpdate = false;
  
  mutations.forEach((mutation) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
      const target = mutation.target;
      if (target.matches('.action-btn')) {
        console.log(`üé¨ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏: ${target.textContent.trim()}, disabled: ${target.disabled}`);
        shouldUpdate = true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–æ–≤—ã–µ —Å—Ç–æ–ª—ã, –∫–Ω–æ–ø–∫–∏)
    if (mutation.type === 'childList') {
      const addedNodes = Array.from(mutation.addedNodes);
      const removedNodes = Array.from(mutation.removedNodes);
      
      const hasRelevantChanges = [...addedNodes, ...removedNodes].some(node => {
        if (node.nodeType === 1) { // Element node
          return node.matches('.poker-table') || 
                 node.matches('.action-btn') || 
                 node.querySelector && node.querySelector('.action-btn');
        }
        return false;
      });
      
      if (hasRelevantChanges) {
        console.log('üé¨ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM: –¥–æ–±–∞–≤–ª–µ–Ω—ã/—É–¥–∞–ª–µ–Ω—ã —Å—Ç–æ–ª—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏');
        shouldUpdate = true;
      }
    }
  });
  
  if (shouldUpdate) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(updatePlayerTurnAnimations, 150);
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
function initializePlayerTurnAnimations() {
  console.log('üé¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞');
  
  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
  const targetNode = document.body;
  const config = { 
    attributes: true, 
    childList: true, 
    subtree: true, 
    attributeFilter: ['disabled', 'class'] 
  };
  
  playerTurnObserver.observe(targetNode, config);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  document.addEventListener('click', (event) => {
    if (event.target.matches('.action-btn')) {
      console.log(`üé¨ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: ${event.target.textContent.trim()}`);
      // –ü–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(updatePlayerTurnAnimations, 200);
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫
  document.addEventListener('DOMNodeInserted', (event) => {
    if (event.target.matches && event.target.matches('.poker-table')) {
      console.log('üé¨ –ù–æ–≤—ã–π —Å—Ç–æ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM');
      setTimeout(updatePlayerTurnAnimations, 300);
    }
  });
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º)
  setInterval(() => {
    const hasActiveTables = document.querySelectorAll('.poker-table').length > 0;
    if (hasActiveTables) {
      updatePlayerTurnAnimations();
    }
  }, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  
  console.log('üé¨ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (typeof window !== 'undefined') {
  window.testPlayerTurnAnimations = testPlayerTurnAnimations;
  window.setActivePlayerTurn = setActivePlayerTurn;
  window.clearAllPlayerTurnAnimations = clearAllPlayerTurnAnimations;
  window.simulatePlayerTurn = simulatePlayerTurn;
  window.simulatePlayerActionComplete = simulatePlayerActionComplete;
  window.fullAnimationDemo = fullAnimationDemo;
  window.updatePlayerTurnAnimations = updatePlayerTurnAnimations;
} 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞)
function simulatePlayerTurn(tableIndex = 1) {
  console.log(`üéÆ –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
  
  const tables = document.querySelectorAll('.poker-table');
  const table = tables[tableIndex - 1];
  
  if (!table) {
    console.log(`‚ö†Ô∏è –°—Ç–æ–ª ${tableIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
  const actionButtons = table.querySelectorAll('.action-btn');
  actionButtons.forEach(btn => {
    btn.disabled = false;
    btn.style.opacity = '1';
    btn.style.pointerEvents = 'auto';
  });
  
  console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}:`, 
    Array.from(actionButtons).map(btn => btn.textContent.trim()));
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
  setTimeout(updatePlayerTurnAnimations, 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—è –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞)
function simulatePlayerActionComplete(tableIndex = 1) {
  console.log(`üéØ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
  
  const tables = document.querySelectorAll('.poker-table');
  const table = tables[tableIndex - 1];
  
  if (!table) {
    console.log(`‚ö†Ô∏è –°—Ç–æ–ª ${tableIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
  const actionButtons = table.querySelectorAll('.action-btn');
  actionButtons.forEach(btn => {
    btn.disabled = true;
    btn.style.opacity = '0.5';
    btn.style.pointerEvents = 'none';
  });
  
  console.log(`‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${tableIndex}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
  setTimeout(updatePlayerTurnAnimations, 100);
}

// –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π
function fullAnimationDemo() {
  console.log('üé™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∏–º–∞—Ü–∏–π');
  
  const tables = document.querySelectorAll('.poker-table');
  if (tables.length === 0) {
    console.log('‚ö†Ô∏è –°—Ç–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–æ–ª—ã —Å–Ω–∞—á–∞–ª–∞.');
    return;
  }
  
  console.log(`üéØ –ë—É–¥–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ ${tables.length} —Å—Ç–æ–ª–∞—Ö`);
  
  let currentStep = 0;
  const steps = [
    () => {
      console.log('üìç –®–∞–≥ 1: –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏');
      clearAllPlayerTurnAnimations();
    },
    () => {
      console.log('üìç –®–∞–≥ 2: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ 1');
      simulatePlayerTurn(1);
    },
    () => {
      console.log('üìç –®–∞–≥ 3: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö');
      tables.forEach((_, index) => simulatePlayerTurn(index + 1));
    },
    () => {
      console.log('üìç –®–∞–≥ 4: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ 1');
      simulatePlayerActionComplete(1);
    },
    () => {
      console.log('üìç –®–∞–≥ 5: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö');
      tables.forEach((_, index) => simulatePlayerActionComplete(index + 1));
    },
    () => {
      console.log('üìç –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–∏—â–µ–Ω—ã –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏)');
      updatePlayerTurnAnimations();
      console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
  ];
  
  function runNextStep() {
    if (currentStep < steps.length) {
      steps[currentStep]();
      currentStep++;
      setTimeout(runNextStep, 2000);
    }
  }
  
  runNextStep();
}

// ===== –°–ò–°–¢–ï–ú–ê –°–ß–ï–¢–ß–ò–ö–ê –†–ê–ó–î–ê–ß –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
async function handleSinglePlayerHandCompleted(tableElement, handData = null) {
  console.log('üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ');
  
  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞
  const tableNumber = Array.from(document.querySelectorAll('.poker-table')).indexOf(tableElement) + 1;
  
  // –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
  if (!handData) {
    handData = {
      tableNumber: tableNumber,
      timestamp: new Date().toISOString(),
      gameMode: 'single-player',
      completed: true
    };
  }
  
  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
  await notifyHandCompletedForSinglePlayer(tableNumber, handData);
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  showHandCompletionEffect(tableElement);
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification('–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
}

// –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
async function notifyHandCompletedForSinglePlayer(tableId, handData) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
  if (typeof authManager !== 'undefined' && authManager && authManager.currentUser) {
    const result = await authManager.notifyHandCompleted(tableId, handData);
    if (result) {
      console.log(`üìä –°—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: ${result.remaining_hands}`);
      
      if (!result.can_continue) {
        showNotification('–õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'error');
        blockAllTableActions();
      }
      
      return result;
    }
  } else {
    console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }
  return null;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
function showHandCompletionEffect(tableElement) {
  // –î–æ–±–∞–≤–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–æ–ª–∞ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞–Ω–∫–∞)
  tableElement.classList.add('hand-completed');
  
  // –£–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    tableElement.classList.remove('hand-completed');
  }, 3000);
}

// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç–æ–ª–∞—Ö –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
function blockAllTableActions() {
  console.log('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π - –ª–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω');
  
  // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  document.querySelectorAll('.action-btn').forEach(btn => {
    btn.disabled = true;
    btn.style.opacity = '0.5';
  });
  
  // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–æ–º
  document.querySelectorAll('.table-btn').forEach(btn => {
    btn.disabled = true;
    btn.style.opacity = '0.5';
  });
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö
  document.querySelectorAll('.poker-table').forEach(table => {
    showHandLimitWarningOnTable(table);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å—Ç–æ–ª–µ
function showHandLimitWarningOnTable(tableElement) {
  // –£–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
  const existingWarning = tableElement.querySelector('.hand-limit-warning');
  if (existingWarning) {
    existingWarning.remove();
  }
  
  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  const warning = document.createElement('div');
  warning.className = 'hand-limit-warning';
  warning.innerHTML = `
    <div class="warning-content">
      <i class="fas fa-exclamation-triangle"></i>
      <span>–õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω</span>
      <small>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</small>
    </div>
  `;
  
  tableElement.appendChild(warning);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function initializeSinglePlayerHandTracking() {
  console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–∞—á –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ');
  
  // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
            if (node.classList && (
                node.classList.contains('winner-announcement') ||
                node.classList.contains('hand-result') ||
                node.textContent.includes('–≤—ã–∏–≥—Ä–∞–ª') ||
                node.textContent.includes('–ø–æ–±–µ–¥–∏–ª')
              )) {
              
              // –ù–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–æ–ª
              const tableElement = node.closest('.poker-table');
              if (tableElement) {
                console.log('üèÜ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏ —á–µ—Ä–µ–∑ DOM –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å');
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                setTimeout(() => {
                  handleSinglePlayerHandCompleted(tableElement);
                }, 1000);
              }
            }
          }
        });
      }
    });
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤
  document.querySelectorAll('.poker-table').forEach(table => {
    observer.observe(table, {
      childList: true,
      subtree: true
    });
  });
  
  console.log('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—á–µ—Ç—á–∏–∫–∞
function testHandCounterSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–µ—Ç—á–∏–∫–∞ —Ä–∞–∑–¥–∞—á');
  
  const table = document.querySelector('.poker-table');
  if (table) {
    handleSinglePlayerHandCompleted(table, {
      testMode: true,
      handNumber: 'TEST-001',
      winner: '–¢–µ—Å—Ç –∏–≥—Ä–æ–∫'
    });
  } else {
    console.log('‚ùå –°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
window.testHandCounterSystem = testHandCounterSystem;
window.handleSinglePlayerHandCompleted = handleSinglePlayerHandCompleted;
window.blockAllTableActions = blockAllTableActions;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
function fullHandCounterDemo() {
  console.log('üé≠ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—á–µ—Ç—á–∏–∫–∞ —Ä–∞–∑–¥–∞—á');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (typeof authManager !== 'undefined' && authManager && authManager.currentUser) {
    console.log(`üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${authManager.currentUser.email}`);
    console.log(`üéØ –õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á: ${authManager.currentUser.hand_limit}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏
    testHandCounterSystem();
    
    // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    setTimeout(() => {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç: ${authManager.currentUser.hand_limit}`);
    }, 5000);
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  }
}

window.fullHandCounterDemo = fullHandCounterDemo;