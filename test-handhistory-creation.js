const io = require('socket.io-client');
const fs = require('fs');
const path = require('path');

async function testHandHistoryCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è HandHistory —Ñ–∞–π–ª–æ–≤...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    const socket1 = io('http://localhost:3001');
    const socket2 = io('http://localhost:3001');
    
    let sessionId = null;
    let gameStarted = false;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    const gameSettings = {
      preflopSpot: `
Effective stack: $100
Preflop investments: SB $0.5, BB $2.5, CO $2.5
Player ranges:
BB: 22+, A2s+, K2s+, Q2s+, J4s+, T6s+, 96s+, 85s+, 74s+, 64s+, 53s+, 43s, A2o+, K7o+, Q8o+, J8o+, T8o+, 98o
CO: 22+, A2s+, K5s+, Q7s+, J8s+, T8s+, 98s, 87s, 76s, 65s, 54s, A8o+, KTo+, QTo+, JTo
      `,
      playerRanges: {
        positions: {
          player1: 'CO',
          player2: 'BB'
        }
      },
      flopRestrictions: {
        suits: 'any',
        pairing: 'any',
        ranks: { high: ['any'], middle: ['any'], low: ['any'] }
      }
    };
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    socket1.emit('create-session', {
      playerName: 'TestPlayer1',
      userId: 'test-user-1',
      settings: gameSettings
    });
    
    socket1.on('session-created', (data) => {
      console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', data.sessionId);
      sessionId = data.sessionId;
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      socket2.emit('join-session', {
        sessionId: sessionId,
        playerName: 'TestPlayer2'
      });
    });
    
    socket2.on('session-joined', () => {
      console.log('‚úÖ –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è');
    });
    
    socket1.on('game-started', () => {
      console.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');
      gameStarted = true;
    });
    
    socket2.on('game-started', () => {
      console.log('‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–æ–ª–∞
    let handCount = 0;
    let currentTableData = null;
    
    socket1.on('table-updated', (data) => {
      currentTableData = data;
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞: ${data.message}, —Ä–∞–∑–¥–∞—á–∞ ${data.handNumber}, —É–ª–∏—Ü–∞ ${data.street}`);
      
      if (data.actionRequired && data.currentPlayer) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º check
        setTimeout(() => {
          socket1.emit('player-action', {
            tableId: data.tableId,
            action: 'check'
          });
        }, 500);
      }
    });
    
    socket2.on('table-updated', (data) => {
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ 2: ${data.message}, —Ä–∞–∑–¥–∞—á–∞ ${data.handNumber}`);
      
      if (data.actionRequired && data.currentPlayer) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º check
        setTimeout(() => {
          socket2.emit('player-action', {
            tableId: data.tableId,
            action: 'check'
          });
        }, 500);
      }
    });
    
    socket1.on('hand-completed', (data) => {
      handCount++;
      console.log(`üèÜ –†–∞–∑–¥–∞—á–∞ ${handCount} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
      
      if (handCount >= 2) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª HandHistory
        setTimeout(() => {
          checkHandHistoryFiles(sessionId);
          socket1.disconnect();
          socket2.disconnect();
          process.exit(0);
        }, 1000);
      }
    });
    
    // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    setTimeout(() => {
      console.log('‚è∞ –¢–∞–π–º-–∞—É—Ç —Ç–µ—Å—Ç–∞');
      if (handCount > 0) {
        checkHandHistoryFiles(sessionId);
      } else {
        console.log('‚ùå –ù–∏ –æ–¥–Ω–∞ —Ä–∞–∑–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
      socket1.disconnect();
      socket2.disconnect();
      process.exit(1);
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  }
}

function checkHandHistoryFiles(sessionId) {
  const handHistoryDir = path.join(__dirname, 'hand_histories');
  
  if (!fs.existsSync(handHistoryDir)) {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è hand_histories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  const files = fs.readdirSync(handHistoryDir);
  const sessionFiles = files.filter(file => file.includes(sessionId));
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${sessionFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`);
  sessionFiles.forEach(file => {
    const filePath = path.join(handHistoryDir, file);
    const stats = fs.statSync(filePath);
    console.log(`  üìÑ ${file} (${stats.size} –±–∞–π—Ç)`);
    
    if (stats.size > 0) {
      const content = fs.readFileSync(filePath, 'utf8');
      console.log(`  üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`);
      console.log(`  ${content.substring(0, 200)}...`);
    }
  });
  
  if (sessionFiles.length > 0 && sessionFiles.some(file => {
    const stats = fs.statSync(path.join(handHistoryDir, file));
    return stats.size > 0;
  })) {
    console.log('‚úÖ HandHistory —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
  } else {
    console.log('‚ùå HandHistory —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã');
  }
}

testHandHistoryCreation(); 