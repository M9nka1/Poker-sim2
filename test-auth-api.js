#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const https = require('https');
const http = require('http');

const BASE_URL = 'http://localhost:3001'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 3001

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(method, path, data = null, cookies = '') {
  return new Promise((resolve, reject) => {
    const url = new URL(BASE_URL + path);
    const options = {
      hostname: url.hostname,
      port: url.port,
      path: url.pathname,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Cookie': cookies
      }
    };

    if (data) {
      data = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(data);
    }

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: parsedData
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            headers: res.headers,
            data: responseData
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(data);
    }

    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

  try {
    // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìù –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const registerData = {
      email: 'test@example.com',
      password: 'Password123!'
    };

    const registerResponse = await makeRequest('POST', '/api/auth/register', registerData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, registerResponse.data);

    if (registerResponse.status === 201) {
      console.log('   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const setCookieHeader = registerResponse.headers['set-cookie'];
    let cookies = '';
    if (setCookieHeader) {
      cookies = setCookieHeader.map(cookie => cookie.split(';')[0]).join('; ');
    }

    console.log('\n');

    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
    console.log('üìù –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è)');
    const duplicateRegisterResponse = await makeRequest('POST', '/api/auth/register', registerData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${duplicateRegisterResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, duplicateRegisterResponse.data);

    if (duplicateRegisterResponse.status === 409) {
      console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!');
    } else {
      console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
    }

    console.log('\n');

    // –¢–µ—Å—Ç 3: –í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('üìù –¢–µ—Å—Ç 3: –í—Ö–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    const loginData = {
      email: 'test@example.com',
      password: 'Password123!'
    };

    const loginResponse = await makeRequest('POST', '/api/auth/login', loginData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, loginResponse.data);

    let accessToken = '';
    if (loginResponse.status === 200 && loginResponse.data.data) {
      accessToken = loginResponse.data.data.accessToken;
      console.log('   ‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º cookies
      const loginSetCookie = loginResponse.headers['set-cookie'];
      if (loginSetCookie) {
        cookies = loginSetCookie.map(cookie => cookie.split(';')[0]).join('; ');
      }
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }

    console.log('\n');

    // –¢–µ—Å—Ç 4: –í—Ö–æ–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    console.log('üìù –¢–µ—Å—Ç 4: –í—Ö–æ–¥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º');
    const wrongPasswordData = {
      email: 'test@example.com',
      password: 'WrongPassword123!'
    };

    const wrongLoginResponse = await makeRequest('POST', '/api/auth/login', wrongPasswordData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${wrongLoginResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç:`, wrongLoginResponse.data);

    if (wrongLoginResponse.status === 401) {
      console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
    } else {
      console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }

    console.log('\n');

    // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (cookies) {
      console.log('üìù –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞');
      const refreshResponse = await makeRequest('POST', '/api/auth/token/refresh', null, cookies);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${refreshResponse.status}`);
      console.log(`   –û—Ç–≤–µ—Ç:`, refreshResponse.data);

      if (refreshResponse.status === 200) {
        console.log('   ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } else {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
      }

      console.log('\n');
    }

    // –¢–µ—Å—Ç 6: –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    if (accessToken) {
      console.log('üìù –¢–µ—Å—Ç 6: –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É');
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
      const protectedReq = http.request({
        hostname: 'localhost',
        port: 3001,
        path: '/api/auth/logout',
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Cookie': cookies,
          'Content-Type': 'application/json'
        }
      }, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          try {
            const parsed = JSON.parse(data);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
            console.log(`   –û—Ç–≤–µ—Ç:`, parsed);
            
            if (res.statusCode === 200) {
              console.log('   ‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
            } else {
              console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
            }
          } catch (error) {
            console.log(`   –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
            console.log(`   –û—Ç–≤–µ—Ç:`, data);
          }
        });
      });

      protectedReq.on('error', (error) => {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      });

      protectedReq.end();
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function testValidation() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n');

  // –¢–µ—Å—Ç —Å–ª–∞–±–æ–≥–æ –ø–∞—Ä–æ–ª—è
  console.log('üìù –¢–µ—Å—Ç: –°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å');
  const weakPasswordData = {
    email: 'weak@example.com',
    password: '123'
  };

  const weakPasswordResponse = await makeRequest('POST', '/api/auth/register', weakPasswordData);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${weakPasswordResponse.status}`);
  console.log(`   –û—Ç–≤–µ—Ç:`, weakPasswordResponse.data);

  if (weakPasswordResponse.status === 400) {
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  } else {
    console.log('   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }

  console.log('\n');

  // –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ email
  console.log('üìù –¢–µ—Å—Ç: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email');
  const invalidEmailData = {
    email: 'invalid-email',
    password: 'Password123!'
  };

  const invalidEmailResponse = await makeRequest('POST', '/api/auth/register', invalidEmailData);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${invalidEmailResponse.status}`);
  console.log(`   –û—Ç–≤–µ—Ç:`, invalidEmailResponse.data);

  if (invalidEmailResponse.status === 400) {
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  } else {
    console.log('   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n');
  
  await runTests();
  await testValidation();
  
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.');
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { runTests, testValidation }; 