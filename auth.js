// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô =====

class AuthManager {
    constructor() {
        this.apiBase = '/api';
        this.currentUser = null;
        this.accessToken = null;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏/—Å–µ—Å—Å–∏–∏
        this.sessionId = this.generateSessionId();
        console.log('üîê Session ID –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏:', this.sessionId);
        
        this.init();
    }
    
    generateSessionId() {
        return 'tab_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    }

    async init() {
        console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ —Å refresh token
        await this.tryAutoLogin();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initEventListeners();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
        this.initPasswordValidation();
    }

    initEventListeners() {
        // –§–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        document.getElementById('login-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleLogin();
        });

        document.getElementById('register-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleRegister();
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
            const message = document.getElementById('auth-message');
            if (!message.classList.contains('hidden')) {
                this.hideAuthMessage();
            }
        }, 5000);
    }

    initPasswordValidation() {
        const passwordInput = document.getElementById('register-password');
        const requirements = {
            length: { element: document.getElementById('req-length'), test: (pwd) => pwd.length >= 8 },
            uppercase: { element: document.getElementById('req-uppercase'), test: (pwd) => /[A-Z]/.test(pwd) },
            lowercase: { element: document.getElementById('req-lowercase'), test: (pwd) => /[a-z]/.test(pwd) },
            number: { element: document.getElementById('req-number'), test: (pwd) => /\d/.test(pwd) },
            special: { element: document.getElementById('req-special'), test: (pwd) => /[!@#$%^&*(),.?":{}|<>]/.test(pwd) }
        };

        passwordInput.addEventListener('input', () => {
            const password = passwordInput.value;
            
            Object.values(requirements).forEach(req => {
                const isValid = req.test(password);
                req.element.classList.toggle('valid', isValid);
                req.element.classList.toggle('invalid', !isValid);
                
                const icon = req.element.querySelector('i');
                icon.className = isValid ? 'fas fa-check' : 'fas fa-times';
            });
        });
    }

    // ===== API –ú–ï–¢–û–î–´ =====

    async apiRequest(endpoint, options = {}) {
        const url = `${this.apiBase}${endpoint}`;
        const config = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            credentials: 'include',
            ...options
        };

        if (this.accessToken) {
            config.headers['Authorization'] = `Bearer ${this.accessToken}`;
        }

        try {
            const response = await fetch(url, config);
            const data = await response.json();
            
            return {
                ok: response.ok,
                status: response.status,
                data: data
            };
        } catch (error) {
            console.error('‚ùå API –æ—à–∏–±–∫–∞:', error);
            return {
                ok: false,
                status: 0,
                data: { success: false, message: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}` }
            };
        }
    }

    async tryAutoLogin() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
            const savedToken = localStorage.getItem(`auth_token_${this.sessionId}`);
            const savedUser = localStorage.getItem(`auth_user_${this.sessionId}`);
            
            if (savedToken && savedUser) {
                this.accessToken = savedToken;
                this.currentUser = JSON.parse(savedUser);
                console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è –∏–∑ localStorage –¥–ª—è', this.currentUser.email);
                this.showMainApp();
                return true;
            }
            
            const result = await this.apiRequest('/auth/token/refresh', { method: 'POST' });
            
            if (result.ok && result.data.data?.accessToken) {
                this.accessToken = result.data.data.accessToken;
                await this.loadUserProfile();
                this.showMainApp();
                console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
                return true;
            }
        } catch (error) {
            console.log('‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è');
        }
        
        this.showAuthScreen();
        return false;
    }

    async handleLogin() {
        const email = document.getElementById('login-email').value;
        const password = document.getElementById('login-password').value;
        const loginBtn = document.getElementById('login-btn');

        if (!email || !password) {
            this.showAuthMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        this.setButtonLoading(loginBtn, true);

        try {
            const result = await this.apiRequest('/auth/login', {
                method: 'POST',
                body: JSON.stringify({ email, password })
            });

            if (result.ok && result.data.data) {
                this.accessToken = result.data.data.accessToken;
                this.currentUser = result.data.data.user;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
                localStorage.setItem(`auth_token_${this.sessionId}`, this.accessToken);
                localStorage.setItem(`auth_user_${this.sessionId}`, JSON.stringify(this.currentUser));
                console.log('üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏:', this.sessionId);
                
                this.showMainApp();
                this.showAuthMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', this.currentUser.email);
            } else {
                this.showAuthMessage(result.data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
            }
        } catch (error) {
            this.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        } finally {
            this.setButtonLoading(loginBtn, false);
        }
    }

    async handleRegister() {
        const email = document.getElementById('register-email').value;
        const password = document.getElementById('register-password').value;
        const passwordConfirm = document.getElementById('register-password-confirm').value;
        const registerBtn = document.getElementById('register-btn');

        if (!email || !password || !passwordConfirm) {
            this.showAuthMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        if (password !== passwordConfirm) {
            this.showAuthMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
            return;
        }

        this.setButtonLoading(registerBtn, true);

        try {
            const result = await this.apiRequest('/auth/register', {
                method: 'POST',
                body: JSON.stringify({ email, password })
            });

            if (result.ok) {
                this.showAuthMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'success');
                this.showLoginForm();
                document.getElementById('login-email').value = email;
            } else {
                const errorMessage = result.data.errors 
                    ? result.data.errors.map(err => err.msg).join(', ')
                    : result.data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
                this.showAuthMessage(errorMessage, 'error');
            }
        } catch (error) {
            this.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        } finally {
            this.setButtonLoading(registerBtn, false);
        }
    }

    async loadUserProfile() {
        try {
            const result = await this.apiRequest('/me');
            
            if (result.ok && result.data.data) {
                this.currentUser = result.data.data.user;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem(`auth_user_${this.sessionId}`, JSON.stringify(this.currentUser));
                
                this.updateUserInterface();
                return true;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
        return false;
    }

    async logout() {
        try {
            await this.apiRequest('/auth/logout', { method: 'POST' });
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        } finally {
            // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
            localStorage.removeItem(`auth_token_${this.sessionId}`);
            localStorage.removeItem(`auth_user_${this.sessionId}`);
            console.log('üóëÔ∏è –¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', this.sessionId);
            
            this.accessToken = null;
            this.currentUser = null;
            this.showAuthScreen();
            this.showAuthMessage('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        }
    }

    // ===== UI –ú–ï–¢–û–î–´ =====

    showAuthScreen() {
        document.getElementById('auth-screen').classList.remove('hidden');
        document.getElementById('main-app').classList.add('hidden');
    }

    showMainApp() {
        document.getElementById('auth-screen').classList.add('hidden');
        document.getElementById('main-app').classList.remove('hidden');
        this.updateUserInterface();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.initializeGameSettings();
    }

    initializeGameSettings() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Hand History
        const downloadBtn = document.getElementById('download-hands-btn');
        if (downloadBtn) {
            downloadBtn.style.display = 'inline-block';
            downloadBtn.addEventListener('click', () => {
                this.downloadHandHistory();
            });
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–¥–∞—á
        this.checkHandLimitAndBlockIfNeeded();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const settingsIcon = document.querySelector('.settings-icon');
        const adminIcon = document.querySelector('.admin-icon');
        const sessionIcon = document.querySelector('.session-icon');
        const userIcon = document.querySelector('.user-icon');
        const logoutIcon = document.querySelector('.logout-icon');

        if (settingsIcon) settingsIcon.style.display = 'block';
        if (sessionIcon) sessionIcon.style.display = 'block';
        if (userIcon) userIcon.style.display = 'block';
        if (logoutIcon) logoutIcon.style.display = 'block';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if (this.currentUser?.roles?.includes('admin')) {
            if (adminIcon) {
                adminIcon.style.display = 'block';
                console.log('üëë –í–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å');
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserInterface();
        
        console.log('‚úÖ –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    showLoginForm() {
        document.getElementById('login-form').classList.add('active');
        document.getElementById('register-form').classList.remove('active');
        this.clearForms();
    }

    showRegisterForm() {
        document.getElementById('register-form').classList.add('active');
        document.getElementById('login-form').classList.remove('active');
        this.clearForms();
    }

    clearForms() {
        document.getElementById('login-email').value = '';
        document.getElementById('login-password').value = '';
        document.getElementById('register-email').value = '';
        document.getElementById('register-password').value = '';
        document.getElementById('register-password-confirm').value = '';
        this.hideAuthMessage();
    }

    updateUserInterface() {
        if (!this.currentUser) return;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('current-user-email').textContent = this.currentUser.email;
        document.getElementById('current-hand-limit').textContent = this.currentUser.hand_limit;
        document.getElementById('current-user-role').textContent = 
            this.currentUser.roles.includes('admin') ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        // –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏
        const adminBtn = document.getElementById('admin-panel-btn');
        if (this.currentUser.roles.includes('admin')) {
            adminBtn.style.display = 'flex';
        } else {
            adminBtn.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        document.getElementById('profile-email').textContent = this.currentUser.email;
        document.getElementById('profile-hand-limit').textContent = this.currentUser.hand_limit;
        document.getElementById('profile-created-at').textContent = 
            new Date(this.currentUser.created_at).toLocaleDateString('ru-RU');
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–¥–∞—á –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–ª—è
        this.checkHandLimitAndBlockIfNeeded();
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä—ã
    checkHandLimitAndBlockIfNeeded() {
        if (this.currentUser.hand_limit <= 0) {
            this.blockGameInterface();
            this.showAuthMessage('–õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.', 'error');
        } else {
            this.unblockGameInterface();
        }
    }

    // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    blockGameInterface() {
        console.log('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –ª–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω');
        
        // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.5';
        });
        
        // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        document.querySelectorAll('.settings-panel input, .settings-panel button, .settings-panel select').forEach(element => {
            element.disabled = true;
            element.style.opacity = '0.5';
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö
        document.querySelectorAll('.poker-table').forEach(table => {
            this.showHandLimitWarning(table);
        });
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    unblockGameInterface() {
        console.log('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        document.querySelectorAll('.action-btn').forEach(btn => {
            btn.disabled = false;
            btn.style.opacity = '1';
        });
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        document.querySelectorAll('.settings-panel input, .settings-panel button, .settings-panel select').forEach(element => {
            element.disabled = false;
            element.style.opacity = '1';
        });
        
        // –£–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å—Ç–æ–ª–æ–≤
        document.querySelectorAll('.hand-limit-warning').forEach(warning => {
            warning.remove();
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –Ω–∞ —Å—Ç–æ–ª–µ
    showHandLimitWarning(tableElement) {
        // –£–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingWarning = tableElement.querySelector('.hand-limit-warning');
        if (existingWarning) {
            existingWarning.remove();
        }
        
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        const warning = document.createElement('div');
        warning.className = 'hand-limit-warning';
        warning.innerHTML = `
            <div class="warning-content">
                <i class="fas fa-exclamation-triangle"></i>
                <span>–õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω</span>
                <small>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</small>
            </div>
        `;
        
        tableElement.appendChild(warning);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–∞—á –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
    async updateHandLimit(newLimit) {
        if (this.currentUser) {
            this.currentUser.hand_limit = newLimit;
            this.updateUserInterface();
            console.log(`üìä –°—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω: ${newLimit}`);
        }
    }

    // API –≤—ã–∑–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏
    async notifyHandCompleted(tableId, handData = null) {
        console.log(`üìä –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}`);
        try {
            const result = await this.apiRequest('/game/hand-completed', {
                method: 'POST',
                body: JSON.stringify({ tableId, handData })
            });
            
            if (result.ok && result.data.data) {
                const newLimit = result.data.data.newHandLimit;
                console.log(`‚úÖ –õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω: ${newLimit}`);
                await this.updateHandLimit(newLimit);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏:', result.data.message);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏:', error);
        }
    }

    async downloadHandHistory() {
        console.log('üìÅ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Hand History...');
        try {
            const sessionId = currentSessionId || Date.now(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π sessionId
            const response = await fetch(`${this.apiBase}/download-hand-history/${sessionId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.accessToken}`
                },
                credentials: 'include'
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `hand_history_session_${sessionId}.txt`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                
                this.showAuthMessage('Hand History —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                console.log('‚úÖ Hand History —Å–∫–∞—á–∞–Ω');
            } else {
                const errorData = await response.json();
                this.showAuthMessage(errorData.error || '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Hand History', 'error');
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Hand History:', errorData);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Hand History:', error);
            this.showAuthMessage('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        }
    }

    setButtonLoading(button, loading) {
        if (loading) {
            button.classList.add('loading');
            button.disabled = true;
        } else {
            button.classList.remove('loading');
            button.disabled = false;
        }
    }

    showAuthMessage(message, type = 'info') {
        const messageEl = document.getElementById('auth-message');
        const textEl = messageEl.querySelector('.message-text');
        const iconEl = messageEl.querySelector('.message-icon');

        textEl.textContent = message;
        messageEl.className = `auth-message ${type}`;
        
        if (type === 'success') {
            iconEl.className = 'fas fa-check-circle message-icon';
        } else if (type === 'error') {
            iconEl.className = 'fas fa-exclamation-circle message-icon';
        } else {
            iconEl.className = 'fas fa-info-circle message-icon';
        }

        messageEl.classList.remove('hidden');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.hideAuthMessage();
        }, 5000);
    }

    hideAuthMessage() {
        document.getElementById('auth-message').classList.add('hidden');
    }

    // ===== –î–ï–ú–û –§–£–ù–ö–¶–ò–ò =====

    fillDemoAdmin() {
        document.getElementById('login-email').value = 'admin@pokersimu.com';
        document.getElementById('login-password').value = 'AdminPassword123!';
        this.showAuthMessage('–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'success');
    }

    fillDemoUser() {
        document.getElementById('login-email').value = 'test@example.com';
        document.getElementById('login-password').value = 'Password123!';
        this.showAuthMessage('–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'success');
    }
}

// ===== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

class AdminManager {
    constructor(authManager) {
        this.auth = authManager;
        this.users = [];
    }

    async loadAllUsers() {
        try {
            const result = await this.auth.apiRequest('/admin/users');
            
            if (result.ok && result.data.data) {
                this.users = result.data.data.users;
                this.updateUsersList();
                this.updateStats();
                
                document.getElementById('users-list').classList.remove('hidden');
            } else {
                this.auth.showAuthMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
            }
        } catch (error) {
            this.auth.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    updateUsersList() {
        const tbody = document.getElementById('users-table-body');
        tbody.innerHTML = '';

        this.users.forEach(user => {
            const row = document.createElement('div');
            row.className = 'user-row';
            row.innerHTML = `
                <span>${user.email}</span>
                <span>${user.hand_limit}</span>
                <span class="user-roles">${user.roles.join(', ')}</span>
                <div class="user-actions-cell">
                    <button class="user-action-btn" onclick="adminManager.editUserLimit('${user.user_id}', ${user.hand_limit})">
                        –õ–∏–º–∏—Ç
                    </button>
                </div>
            `;
            tbody.appendChild(row);
        });
    }

    updateStats() {
        document.getElementById('total-users').textContent = this.users.length;
        
        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–∞—á –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        document.getElementById('total-hands').textContent = '0';
    }

    async editUserLimit(userId, currentLimit) {
        const newLimit = prompt(`–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, currentLimit);
        
        if (newLimit === null || newLimit === '') return;
        
        const limit = parseInt(newLimit);
        if (isNaN(limit) || limit < 0) {
            this.auth.showAuthMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', 'error');
            return;
        }

        try {
            const result = await this.auth.apiRequest(`/admin/users/${userId}/limit`, {
                method: 'POST',
                body: JSON.stringify({ limit })
            });

            if (result.ok) {
                this.auth.showAuthMessage('–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
                await this.loadAllUsers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
            } else {
                this.auth.showAuthMessage(result.data.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
            }
        } catch (error) {
            this.auth.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    async exportAllHands() {
        try {
            const response = await fetch('/api/admin/hands/all/download', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.auth.accessToken}`
                },
                credentials: 'include'
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `all_hands_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                
                this.auth.showAuthMessage('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
            } else {
                this.auth.showAuthMessage('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
            }
        } catch (error) {
            this.auth.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
let authManager, adminManager;

document.addEventListener('DOMContentLoaded', () => {
    authManager = new AuthManager();
    adminManager = new AdminManager(authManager);
    
    // –î–µ–ª–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    window.authManager = authManager;
    window.adminManager = adminManager;
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (typeof toggleSettingsPanel !== 'function') {
        console.warn('‚ö†Ô∏è toggleSettingsPanel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º fallback');
        window.toggleSettingsPanel = function() {
            const panel = document.querySelector('.settings-panel');
            if (panel) {
                panel.classList.toggle('active');
            }
        };
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∫–Ω–æ–ø–æ–∫
function showLoginForm() {
    authManager.showLoginForm();
}

function showRegisterForm() {
    authManager.showRegisterForm();
}

function fillDemoAdmin() {
    authManager.fillDemoAdmin();
}

function fillDemoUser() {
    authManager.fillDemoUser();
}

function logout() {
    authManager.logout();
}

function hideAuthMessage() {
    authManager.hideAuthMessage();
}

function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const button = input.nextElementSibling;
    const icon = button.querySelector('i');

    if (input.type === 'password') {
        input.type = 'text';
        icon.className = 'fas fa-eye-slash';
    } else {
        input.type = 'password';
        icon.className = 'fas fa-eye';
    }
}

function toggleAdminPanel() {
    const panel = document.getElementById('admin-panel');
    panel.classList.toggle('hidden');
}

function showUserProfile() {
    document.getElementById('user-profile-modal').classList.add('active');
}

function closeUserProfile() {
    document.getElementById('user-profile-modal').classList.remove('active');
}

function loadAllUsers() {
    adminManager.loadAllUsers();
}

function exportAllHands() {
    adminManager.exportAllHands();
}

async function downloadUserHands() {
    try {
        const response = await fetch('/api/me/hands', {
            headers: {
                'Authorization': `Bearer ${authManager.accessToken}`
            },
            credentials: 'include'
        });

        if (response.ok) {
            const data = await response.json();
            const blob = new Blob([JSON.stringify(data.data, null, 2)], {
                type: 'application/json'
            });
            
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `my_hands_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            authManager.showAuthMessage('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
        } else {
            authManager.showAuthMessage('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'error');
        }
    } catch (error) {
        authManager.showAuthMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    }
} 

// ===== –û–ë–ï–°–ü–ï–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–û–°–¢–ò –ù–ê–°–¢–†–û–ï–ö –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function ensureSettingsAccess() {
    console.log('üîß –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (typeof window.toggleSettingsPanel !== 'function') {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ toggleSettingsPanel –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        window.toggleSettingsPanel = function() {
            console.log('üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            const panel = document.querySelector('.settings-panel');
            if (panel) {
                const isActive = panel.classList.contains('active');
                if (isActive) {
                    panel.classList.remove('active');
                    console.log('‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫—Ä—ã—Ç–∞');
                } else {
                    panel.classList.add('active');
                    console.log('‚úÖ –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä—ã—Ç–∞');
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                    if (typeof initializeDragAndDrop === 'function') {
                        initializeDragAndDrop();
                    }
                }
            } else {
                console.warn('‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
            }
        };
    }
    
    // –°–æ–∑–¥–∞–µ–º fallback –¥–ª—è showMultiplayerMenu –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (typeof window.showMultiplayerMenu !== 'function') {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ showMultiplayerMenu –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        window.showMultiplayerMenu = function() {
            console.log('üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            
            // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            const menu = document.createElement('div');
            menu.className = 'multiplayer-menu';
            menu.innerHTML = `
                <div class="multiplayer-menu-content">
                    <h3><i class="fas fa-users"></i> –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</h3>
                    <p>–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>
                    <button onclick="this.parentElement.parentElement.remove()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
            
            menu.style.cssText = `
                position: fixed;
                top: 70px;
                left: 15px;
                background: rgba(0, 0, 0, 0.95);
                border: 2px solid var(--accent-primary);
                border-radius: 8px;
                padding: 15px;
                z-index: 1001;
                backdrop-filter: blur(10px);
                min-width: 200px;
                color: white;
            `;
            
            document.body.appendChild(menu);
        };
    }
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
}

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(ensureSettingsAccess, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
window.addEventListener('load', () => {
    setTimeout(ensureSettingsAccess, 1000);
}); 