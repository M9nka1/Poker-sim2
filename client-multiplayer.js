// ===== –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–† –ö–õ–ò–ï–ù–¢ =====
class MultiplayerClient {
  constructor() {
    this.socket = null;
    this.userId = null;
    this.sessionId = null;
    this.playerName = null;
    this.sessionCode = null;
    this.isConnected = false; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.isHost = false; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
    this.tables = new Map(); // –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–ª–∞—Ö
    this.lastTablesCount = 0; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–æ–ª–æ–≤
    
    // –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–∞
    this.actionHistory = new Map(); // tableId -> ActionTracker
    
    this.initializeSocket();
    this.showConnectionStatus();
  }

  initializeSocket() {
    console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const token = this.getAuthToken();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.socket = io({
      auth: {
        token: token
      },
      transports: ['websocket', 'polling']
    });
    
    // –î–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.socket.onAny((eventName, data) => {
      console.log(`üì° –°–û–ë–´–¢–ò–ï: ${eventName}`, data);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è table-updated
      if (eventName === 'table-updated') {
        console.log(`üéØ TABLE-UPDATED –°–û–ë–´–¢–ò–ï:`, {
          tableId: data?.tableId,
          currentPlayer: data?.currentPlayer,
          currentBet: data?.currentBet,
          playersCount: data?.players?.length,
          playerIds: data?.players?.map(p => p.id),
          currentUserId: this.userId
        });
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–æ–ª–∞–º–∏
      if (eventName.includes('table') || eventName.includes('hand') || eventName.includes('action')) {
        console.log(`üéØ –°–û–ë–´–¢–ò–ï –°–¢–û–õ–ê: ${eventName}`, {
          tableId: data?.tableId,
          hasTableInfo: !!data?.tableInfo,
          playersCount: data?.tableInfo?.players?.length,
          playerIds: data?.tableInfo?.players?.map(p => p.id),
          currentUserId: this.userId
        });
      }
    });
    
    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
      this.updateConnectionStatus(true);
    });

    this.socket.on('disconnect', () => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      this.updateConnectionStatus(false);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    this.socket.on('session-created', (data) => this.handleSessionCreated(data));
    this.socket.on('session-joined', (data) => this.handleSessionJoined(data));
    this.socket.on('player-joined', (data) => this.handlePlayerJoined(data));
    this.socket.on('game-started', (data) => this.handleGameStarted(data));
    this.socket.on('action-processed', (data) => this.handleActionProcessed(data));
    this.socket.on('hand-completed', (data) => this.handleHandCompleted(data));
    this.socket.on('street-changed', (data) => this.handleStreetChanged(data));
    this.socket.on('hand-history-exported', (data) => this.handleHandHistoryExported(data));
    this.socket.on('player-disconnected', (data) => this.handlePlayerDisconnected(data));
    this.socket.on('error', (data) => this.handleError(data));
    
    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–æ–ª–æ–≤ –∏ —Ä–∞–∑–¥–∞—á
    this.socket.on('table-updated', (data) => this.handleTableUpdated(data));
    this.socket.on('table-update', (data) => this.handleTableUpdate(data));
    this.socket.on('new-hand-started', (data) => this.handleNewHandStarted(data));
    this.socket.on('new-hand-auto-started', (data) => this.handleNewHandAutoStarted(data));
    this.socket.on('all-in-deal-started', (data) => this.handleAllInDealStarted(data));
    this.socket.on('card-dealt-all-in', (data) => this.handleCardDealtAllIn(data));
    
    console.log('üéÆ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  showConnectionStatus() {
    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω
    console.log('Connection status initialized');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
  getAuthToken() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω —Å sessionId
    const sessionId = this.getSessionId();
    if (sessionId) {
      const tokenWithSession = localStorage.getItem(`auth_token_${sessionId}`);
      if (tokenWithSession) {
        return tokenWithSession;
      }
    }
    
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    const fallbackToken = localStorage.getItem('accessToken');
    return fallbackToken || null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å sessionId –∏–∑ localStorage –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π
  getSessionId() {
    let sessionId = localStorage.getItem('sessionId');
    if (!sessionId) {
      sessionId = 'tab_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
      localStorage.setItem('sessionId', sessionId);
    }
    return sessionId;
  }

  updateConnectionStatus(connected) {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.isConnected = connected;
    console.log('Connection status:', connected ? 'connected' : 'disconnected');
    
    if (connected) {
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
    }
  }

  // ===== –°–û–ó–î–ê–ù–ò–ï –ò –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –°–ï–°–°–ò–ò =====
  createSession(playerName) {
    if (!this.isConnected) {
      showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Set –æ–±—ä–µ–∫—Ç—ã –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const settingsForServer = {
      ...state.settings,
      playerRanges: {
        player1: {
          currentWeight: state.settings.playerRanges.player1.currentWeight,
          handWeights: state.settings.playerRanges.player1.handWeights
        },
        player2: {
          currentWeight: state.settings.playerRanges.player2.currentWeight,
          handWeights: state.settings.playerRanges.player2.handWeights
        },
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
        positions: state.settings.playerRanges.positions || {
          player1: 'IP',
          player2: 'OOP'
        }
      }
    };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settingsForServer);
    console.log('üÉè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª–æ–ø–∞:', settingsForServer.boardSettings.flop);
    console.log('üéØ –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ä—É–∫:', settingsForServer.playerRanges);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', settingsForServer.playerRanges.positions);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
    console.log('üìä Player 1 –¥–∏–∞–ø–∞–∑–æ–Ω:', {
      currentWeight: settingsForServer.playerRanges.player1.currentWeight,
      handsCount: Object.keys(settingsForServer.playerRanges.player1.handWeights).length,
      handWeights: settingsForServer.playerRanges.player1.handWeights
    });
    
    console.log('üìä Player 2 –¥–∏–∞–ø–∞–∑–æ–Ω:', {
      currentWeight: settingsForServer.playerRanges.player2.currentWeight,
      handsCount: Object.keys(settingsForServer.playerRanges.player2.handWeights).length,
      handWeights: settingsForServer.playerRanges.player2.handWeights
    });

    const sessionData = {
      playerName: playerName || 'Player 1',
      settings: settingsForServer
    };

    this.socket.emit('create-session', sessionData);
  }

  joinSession(sessionId, playerName) {
    if (!this.isConnected) {
      showNotification('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
      return;
    }

    this.socket.emit('join-session', {
      sessionId: sessionId.toUpperCase(),
      playerName: playerName || 'Player 2'
    });
  }

  startGame() {
    if (!this.isHost) {
      showNotification('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ—Å—Å–∏–∏ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É', 'warning');
      return;
    }

    this.socket.emit('start-game');
  }

  // ===== –ò–ì–†–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø =====
  makeAction(tableId, action, amount = 0) {
    console.log('üé≤ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è:', { tableId, action, amount });
    console.log('üéØ tableId —Ç–∏–ø:', typeof tableId, '–∑–Ω–∞—á–µ–Ω–∏–µ:', tableId);
    
    // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ tableId —ç—Ç–æ —á–∏—Å–ª–æ
    const numericTableId = parseInt(tableId);
    if (isNaN(numericTableId)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π tableId:', tableId);
      return;
    }
    
    const actionData = {
      tableId: numericTableId,
      action,
      amount: Math.round(amount) // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ amount –≤ —Ü–µ–Ω—Ç–∞—Ö
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', actionData);
    this.socket.emit('player-action', actionData);
  }

  nextStreet(tableId, street) {
    this.socket.emit('next-street', {
      tableId,
      street
    });
  }

  exportHandHistory(tableId) {
    this.socket.emit('export-hand-history', {
      tableId
    });
  }

  requestNewHand(tableId) {
    console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
    this.socket.emit('new-hand', {
      tableId
    });
  }

  // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  newHand(tableId) {
    this.requestNewHand(tableId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏
  updateSettings() {
    if (!this.isConnected || !this.sessionId) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const settingsForServer = {
      ...state.settings,
      playerRanges: {
        player1: {
          currentWeight: state.settings.playerRanges.player1.currentWeight,
          handWeights: state.settings.playerRanges.player1.handWeights
        },
        player2: {
          currentWeight: state.settings.playerRanges.player2.currentWeight,
          handWeights: state.settings.playerRanges.player2.handWeights
        },
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
        positions: state.settings.playerRanges.positions || {
          player1: 'IP',
          player2: 'OOP'
        }
      }
    };

    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏:', settingsForServer);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', settingsForServer.playerRanges.positions);

    this.socket.emit('update-settings', {
      settings: settingsForServer
    });
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
  handleSessionCreated(data) {
    this.userId = data.userId;
    this.sessionId = data.sessionId;
    this.isHost = true;

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —Å–µ—Å—Å–∏–∏ –∏ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –ø–∞–Ω–µ–ª—å
    updateSessionIcon(true, data.sessionId);
    this.displaySessionCode(data.sessionId);
    
    // –û–±–Ω–æ–≤–∏—Ç—å UI
    this.updateSessionUI(data.sessionInfo);
    
    showNotification(`–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${data.sessionId}`, 'success');
    console.log('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', data);
  }

  handleSessionJoined(data) {
    this.userId = data.userId;
    this.sessionId = data.sessionId;
    this.isHost = false;

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —Å–µ—Å—Å–∏–∏ –∏ –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    updateSessionIcon(true, data.sessionId);
    this.displayJoinedSessionPanel(data.sessionId);

    // –û–±–Ω–æ–≤–∏—Ç—å UI
    this.updateSessionUI(data.sessionInfo);
    
    showNotification('–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏!', 'success');
    console.log('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏:', data);
  }

  handlePlayerJoined(data) {
    this.updateSessionUI(data.sessionInfo);
    showNotification(`${data.playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`, 'info');

    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –º—ã —Ö–æ—Å—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    if (this.isHost && data.sessionInfo.playersCount >= 2) {
      this.showStartGameButton();
    }
  }

  handleGameStarted(data) {
    closeSettingsPanel();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
    this.generateMultiplayerTables(data.sessionInfo);
    
    showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', 'success');
    console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', data);
  }

  handleActionProcessed(data) {
    console.log('üéØ –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï action-processed:', data);
    console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', data.action?.action, data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ–π—Å—Ç–≤–∏—è`);
        return;
      }
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${this.userId} —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —É–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –¥–µ–π—Å—Ç–≤–∏—è
    if (data.tableInfo && data.tableInfo.street) {
      console.log(`üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª–∏—Ü—ã: —Ç–µ–∫—É—â–∞—è=${data.tableInfo.street}`);
      this.checkAndUpdateStreet(data.tableId, data.tableInfo.street);
    }
    
    // –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (data.action && data.tableId) {
      console.log(`üìù –ü–û–ü–´–¢–ö–ê –ó–ê–ü–ò–°–ò –î–ï–ô–°–¢–í–ò–Ø: playerId=${data.action.playerId}, action=${data.action.action}, amount=${data.action.amount || 0}, tableId=${data.tableId}`);
      console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:`, data.action);
      this.recordAction(data.tableId, data.action.playerId, data.action.action, data.action.amount || 0);
    } else {
      console.log(`‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ü–ò–°–ê–¢–¨ –î–ï–ô–°–¢–í–ò–ï: action=${!!data.action}, tableId=${data.tableId}`);
      console.log(`‚ùå –î–µ—Ç–∞–ª–∏:`, { action: data.action, tableId: data.tableId });
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–º–µ–Ω—É —É–ª–∏—Ü—ã
    if (data.streetChanged) {
      console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —É–ª–∏—Ü—ã: ${data.previousStreet} ‚Üí ${data.tableInfo.street}`);
      this.showNotification(`–ù–æ–≤–∞—è —É–ª–∏—Ü–∞: ${this.getStreetName(data.tableInfo.street)}`, 'info');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–º–µ–Ω—ã —É–ª–∏—Ü—ã
      this.highlightStreetChange(data.tableId, data.tableInfo.street);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏
    if (data.handCompleted) {
      console.log('üèÅ –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      this.showNotification('–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      
      // –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
      this.highlightHandCompletion(data.tableId);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ (–µ—Å–ª–∏ —Ä–∞–∑–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å)
    if (!data.handCompleted) {
      const actionText = this.getActionText(data.action);
      this.showNotification(`–î–µ–π—Å—Ç–≤–∏–µ: ${actionText}`, 'info');
    }
  }

  // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
  handleHandCompleted(data) {
    console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏:', data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏`);
        return;
      }
    }
    
    // –û–ß–ò–©–ê–ï–ú –ó–ê–ü–ò–°–ò –î–ï–ô–°–¢–í–ò–ô –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò –†–ê–ó–î–ê–ß–ò
    console.log(`üßπ –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞ ${data.tableId} –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏`);
    this.resetActionTracker(data.tableId);
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–∞–∑–¥–∞—á
    this.notifyHandCompletedForCounter(data.tableId, data.handData);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –í–º–µ—Å—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–µ–≥–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    this.highlightHandCompletion(data.tableId);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    this.showNotification('–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
    
    // –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É, –Ω–µ –Ω—É–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏...');
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
  async notifyHandCompletedForCounter(tableId, handData) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (typeof authManager !== 'undefined' && authManager) {
      const result = await authManager.notifyHandCompleted(tableId, handData);
      if (result) {
        console.log(`üìä –°—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: ${result.remaining_hands}`);
        
        if (!result.can_continue) {
          this.showNotification('–õ–∏–º–∏—Ç —Ä–∞–∑–¥–∞—á –∏—Å—á–µ—Ä–ø–∞–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'error');
        }
      }
    } else {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–¥–∞—á –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–µ
  prepareNewHand(tableId) {
    console.log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–µ –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.showNotification('–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–µ', 'info');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã
  getStreetName(street) {
    const streetNames = {
      'preflop': '–ü—Ä–µ—Ñ–ª–æ–ø',
      'flop': '–§–ª–æ–ø',
      'turn': '–¢–µ—Ä–Ω',
      'river': '–†–∏–≤–µ—Ä'
    };
    return streetNames[street] || street;
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å–º–µ–Ω—É —É–ª–∏—Ü—ã
  highlightStreetChange(tableId, newStreet) {
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    tableElement.classList.add('street-changed');
    
    // –ù–∞–π—Ç–∏ –æ–±–ª–∞—Å—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ –±–æ—Ä–¥–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
    const communityCards = tableElement.querySelector('.community-cards');
    if (communityCards) {
      communityCards.classList.add('new-card-highlight');
      
      // –£–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        communityCards.classList.remove('new-card-highlight');
        tableElement.classList.remove('street-changed');
      }, 2000);
    }
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏
  highlightHandCompletion(tableId) {
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–æ–ª–∞ (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –±–∞–Ω–∫–∞)
    tableElement.classList.add('hand-completed');
    
    // –£–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      tableElement.classList.remove('hand-completed');
    }, 3000);
  }

  getActionText(action) {
    switch (action.action) {
      case 'fold': return '–§–æ–ª–¥';
      case 'check': return '–ß–µ–∫';
      case 'call': return `–ö–æ–ª–ª $${(action.amount / 100).toFixed(2)}`;
      case 'bet': return `–ë–µ—Ç $${(action.amount / 100).toFixed(2)}`;
      case 'raise': return `–†–µ–π–∑ –¥–æ $${(action.amount / 100).toFixed(2)}`;
      default: return action.action;
    }
  }

  handleStreetChanged(data) {
    console.log('üõ£Ô∏è –°–º–µ–Ω–∞ —É–ª–∏—Ü—ã:', data);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —É–ª–∏—Ü—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if (data.tableId && data.street) {
      console.log(`üõ£Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª–∏—Ü—É ${data.street} –¥–ª—è —Å—Ç–æ–ª–∞ ${data.tableId}`);
      this.setStreet(data.tableId, data.street);
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    this.showNotification(`–ù–æ–≤–∞—è —É–ª–∏—Ü–∞: ${this.getStreetName(data.street)}`, 'info');
    console.log('‚úÖ –£–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:', data);
  }

  handleHandHistoryExported(data) {
    // –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª HandHistory
    this.downloadHandHistory(data.handHistory, data.tableId);
    
    showNotification('HandHistory —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
    console.log('HandHistory —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', data);
  }

  handlePlayerDisconnected(data) {
    this.updateSessionUI(data.sessionInfo);
    showNotification('–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'warning');
  }

  handleError(data) {
    showNotification(data.message, 'error');
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data);
  }

  // ===== UI –ú–ï–¢–û–î–´ =====
  displaySessionCode(sessionId) {
    // –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–µ—Å—Å–∏–∏ - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é
    console.log('Session created with ID:', sessionId);
  }

  displayJoinedSessionPanel(sessionId) {
    // –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    console.log('Joined session with ID:', sessionId);
  }

  updateTablesGridLayout(collapsed) {
    const tablesGrid = document.querySelector('.tables-grid');
    if (tablesGrid) {
      tablesGrid.classList.remove('with-session-panel', 'collapsed-session-panel');
      if (collapsed) {
        tablesGrid.classList.add('collapsed-session-panel');
      } else {
        tablesGrid.classList.add('with-session-panel');
      }
    }
  }

  showStartGameButton() {
    const sessionPanel = document.querySelector('.session-panel-content');
    if (sessionPanel && !sessionPanel.querySelector('.start-game-btn')) {
      const startButton = document.createElement('button');
      startButton.className = 'btn btn-primary start-game-btn';
      startButton.innerHTML = '<i class="fas fa-play"></i> –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
      startButton.onclick = () => this.startGame();
      sessionPanel.appendChild(startButton);
    }
  }

  updateSessionUI(sessionInfo) {
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    const sessionStats = document.querySelector('.session-stats-compact');
    if (sessionStats) {
      sessionStats.innerHTML = `
        <div class="stat-compact">
          <span class="stat-label">–ò–≥—Ä–æ–∫–∏:</span>
          <span class="stat-value">${sessionInfo.playersCount}/2</span>
        </div>
        <div class="stat-compact">
          <span class="stat-label">–°—Ç–æ–ª—ã:</span>
          <span class="stat-value">${sessionInfo.tablesCount}</span>
        </div>
        <div class="stat-compact">
          <span class="stat-label">–°—Ç–∞—Ç—É—Å:</span>
          <span class="stat-value status-${sessionInfo.status}">${this.getStatusText(sessionInfo.status)}</span>
        </div>
      `;
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    this.updatePlayersList(sessionInfo);
  }

  updatePlayersList(sessionInfo) {
    // –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    let playersList = document.querySelector('.players-list');
    
    if (!playersList) {
      playersList = document.createElement('div');
      playersList.className = 'players-list';
      
      const sessionPanel = document.querySelector('.session-panel-content');
      if (sessionPanel) {
        const instructions = sessionPanel.querySelector('.session-instructions');
        sessionPanel.insertBefore(playersList, instructions);
      }
    }

    // –°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö –∏–∑ —Å—Ç–æ–ª–æ–≤
    const allPlayers = new Set();
    if (sessionInfo.tables && sessionInfo.tables.length > 0) {
      sessionInfo.tables.forEach(table => {
        table.players.forEach(player => {
          allPlayers.add(player.name);
        });
      });
    }

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    playersList.innerHTML = `
      <div class="players-list-header">
        <i class="fas fa-users"></i> –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:
      </div>
      <div class="players-list-content">
        ${Array.from(allPlayers).map(playerName => 
          `<div class="player-item">
            <i class="fas fa-user"></i> ${playerName}
          </div>`
        ).join('')}
      </div>
    `;
  }

  getStatusText(status) {
    const statusMap = {
      'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ',
      'playing': '–ò–≥—Ä–∞',
      'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
  }

  generateMultiplayerTables(sessionInfo) {
    console.log('üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–æ–≤, –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', sessionInfo);
    console.log('üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤:', sessionInfo.tables?.length);
    console.log('üé≤ –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–æ–≤:', sessionInfo.tables);
    console.log('üé≤ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤:', this.lastTablesCount);
    console.log('üé≤ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤:', sessionInfo.tablesCount);
    
    const tablesArea = document.getElementById('tables-area');
    
    // –°–∫—Ä—ã—Ç—å welcome screen –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å session panel
    const welcomeScreen = tablesArea.querySelector('.welcome-screen');
    if (welcomeScreen) {
      welcomeScreen.style.display = 'none';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ç–∫—É —Å—Ç–æ–ª–æ–≤
    let tablesGrid = tablesArea.querySelector('.tables-grid');
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–æ–≤
    const existingTables = tablesGrid ? tablesGrid.querySelectorAll('.poker-table').length : 0;
    console.log('üé≤ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–æ–≤ –≤ DOM:', existingTables);
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –°–µ—Ç–∫–∏ —Å—Ç–æ–ª–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç
    // 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤ –≤ sessionInfo –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç lastTablesCount
    // 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–æ–≤ –≤ DOM –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    const shouldRecreate = !tablesGrid || 
                          sessionInfo.tablesCount !== this.lastTablesCount ||
                          existingTables !== sessionInfo.tablesCount;
    
    console.log('üé≤ –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–æ–ª—ã:', shouldRecreate);
    
    if (shouldRecreate) {
      console.log('üé≤ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—ã...');
      
      // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (tablesGrid) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Ç–∫—É —Å—Ç–æ–ª–æ–≤');
        tablesGrid.remove();
      }
      
      tablesGrid = document.createElement('div');
      tablesGrid.className = `tables-grid ${this.getTableGridClass(sessionInfo.tablesCount)}`;
      tablesArea.appendChild(tablesGrid);
      
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–æ–ª—ã
      sessionInfo.tables.forEach((tableInfo, index) => {
        console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞ ${index + 1}:`, tableInfo);
        const table = this.createMultiplayerTable(tableInfo, index + 1);
        tablesGrid.appendChild(table);
      });
      
      this.lastTablesCount = sessionInfo.tablesCount;
      console.log('‚úÖ –°—Ç–æ–ª—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã, lastTablesCount –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ:', this.lastTablesCount);
    } else {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª—ã...');
      // –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª—ã
      sessionInfo.tables.forEach((tableInfo, index) => {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ ${index + 1}:`, tableInfo);
        this.updateTableUI(tableInfo.tableId, tableInfo);
      });
      console.log('‚úÖ –°—Ç–æ–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è');
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤
    const exportIcon = document.querySelector('.export-icon');
    if (exportIcon) {
      exportIcon.style.display = 'flex';
    }
  }

  createMultiplayerTable(tableInfo, tableNumber) {
    const table = document.createElement('div');
    table.className = 'poker-table multiplayer-table';
    table.dataset.tableId = tableInfo.tableId;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ—Ä–æ—è –∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponentPlayer = tableInfo.players.find(p => p.id !== this.userId);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–µ –∏ –±–ª–∞–π–Ω–¥–∞—Ö –∏–∑ preflopSpot
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const potAmount = this.calculatePotAmount(tableInfo, handHistoryInfo);
    const effectiveStack = this.calculateEffectiveStack(tableInfo, handHistoryInfo);
    
    console.log('üí∞ –ü–∞—Ä—Å–∏–Ω–≥ hand history:', handHistoryInfo);
    console.log('üè¶ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–Ω–∫:', potAmount);
    console.log('üíµ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫:', effectiveStack);
    
    table.innerHTML = `
      <div class="table-layout">
        <!-- –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–∞ —Å–ª–µ–≤–∞ + –æ–ø–ø–æ–Ω–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞ -->
        <div class="top-row">
          <div class="table-header-compact">
            <div class="table-title">–°—Ç–æ–ª ${tableNumber}</div>
            <div class="table-stats">
              <span><i class="fas fa-users"></i> ${tableInfo.players.length}/2</span>
            </div>
          </div>
          <div class="opponent-area-compact">
            ${this.renderOpponentPlayer(opponentPlayer, handHistoryInfo)}
          </div>
        </div>

        <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –∫–∞—Ä—Ç—ã –∏ –±–∞–Ω–∫ -->
        <div class="center-area">
          <div class="board-content">
            <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å: —Å—Ç–∞–≤–∫–∏ –∏ –∫–∞—Ä—Ç—ã -->
            <div class="board-with-betting">
              <!-- –°—Ç–∞–≤–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ -->
              <div class="opponent-bet-display">
                <div class="bet-amount">$0.00</div>
                <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ -->
                <div class="opponent-actions-display">
                  <div class="actions-text"></div>
                </div>
              </div>
              
              <!-- –û–±—â–∏–µ –∫–∞—Ä—Ç—ã -->
              <div class="community-cards">
                ${this.renderCommunityCards(tableInfo.communityCards || [])}
              </div>
              
              <!-- –°—Ç–∞–≤–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ -->
              <div class="hero-bet-display">
                <div class="bet-amount">$0.00</div>
                <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≥–µ—Ä–æ—è -->
                <div class="hero-actions-display">
                  <div class="actions-text"></div>
                </div>
              </div>
            </div>
            
            <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ -->
            <div class="pot-display">
              <div class="pot-label">–ë–∞–Ω–∫</div>
              <div class="pot-amount">$${potAmount.toFixed(2)}</div>
              <div class="bb-info">BB: $${handHistoryInfo.bigBlind.toFixed(2)}</div>
              <div class="effective-stack">–≠—Ñ—Ñ: $${effectiveStack.toFixed(2)}</div>
            </div>
          </div>
        </div>

        <!-- –ì–µ—Ä–æ–π –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∏–≥—Ä–æ–∫—É) -->
        <div class="hero-area">
          <div class="player-section hero-green">
            <div class="player-cards-section">
              ${this.renderHeroCards(heroPlayer)}
            </div>
            <div class="player-info-horizontal-green">
              ${heroPlayer ? `
                <div class="player-name">${heroPlayer.name}</div>
                <div class="player-position">${heroPlayer.position}</div>
                <div class="player-stack">$${((heroPlayer.stack || 0) / 100).toFixed(2)}</div>
              ` : ''}
            </div>
          </div>
          <div class="actions-right">
            <div class="table-actions">
              ${this.renderTableActions(tableInfo, tableInfo.tableId)}
            </div>
          </div>
        </div>
      </div>
    `;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞
    this.initializeActionTracker(tableInfo.tableId);
    
    return table;
  }

  renderOpponentPlayer(player, handHistoryInfo) {
    if (!player) {
      return `
        <div class="player-section opponent">
          <div class="player-info-horizontal">
            <div class="player-name">–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...</div>
            <div class="player-position">-</div>
            <div class="player-stack">$0.00</div>
          </div>
          <div class="player-cards-section">
            <div class="player-card empty">?</div>
            <div class="player-card empty">?</div>
          </div>
        </div>
      `;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ –∏–≥—Ä–æ–∫–∞ –∏–∑ server.js (—É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫–∏)
    const playerStack = (player.stack || 0) / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã

    return `
      <div class="player-section opponent">
        <div class="player-info-horizontal">
          <div class="player-name">${player.name}</div>
          <div class="player-position">${player.position}</div>
          <div class="player-stack">$${playerStack.toFixed(2)}</div>
        </div>
        <div class="player-cards-section">
          ${this.renderPlayerCards(player.cards, 'opponent')}
        </div>
      </div>
    `;
  }

  renderCommunityCards(cards) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined/null
    if (!cards) cards = [];
    
    let html = '';
    for (let i = 0; i < 5; i++) {
      if (i < cards.length) {
        const card = cards[i];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–∞—Ä—Ç
        let rank, suit, suitClass;
        
        if (typeof card === 'string') {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "As" –∏–ª–∏ "Kh"
          rank = card.charAt(0);
          const suitChar = card.charAt(1);
          suit = this.getSuitSymbol(suitChar);
          suitClass = this.getSuitClass(suit);
        } else if (card && typeof card === 'object') {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞
          rank = card.rank || card.value || '?';
          const cardSuit = card.suit || '?';
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ suit —É–∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏–ª–∏ –±—É–∫–≤–æ–π
          if (cardSuit.length === 1 && ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'].includes(cardSuit)) {
            // –£–∂–µ —Å–∏–º–≤–æ–ª –º–∞—Å—Ç–∏
            suit = cardSuit;
          } else {
            // –ë—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–∏–º–≤–æ–ª
            suit = this.getSuitSymbol(cardSuit);
          }
          suitClass = this.getSuitClass(suit);
        } else {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
          rank = '?';
          suit = '?';
          suitClass = 'spades';
        }
        
        html += `<div class="community-card ${suitClass}" data-suit="${suit}">
                   <span class="card-rank">${rank}</span>
                 </div>`;
      } else {
        html += `<div class="community-card empty">?</div>`;
      }
    }
    return html;
  }

  renderPlayerCards(cards, role) {
    if (!cards || cards.length === 0) {
      return `
        <div class="player-card empty">?</div>
        <div class="player-card empty">?</div>
      `;
    }

    // –î–ª—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã (—Ä—É–±–∞—à–∫–∏)
    if (role === 'opponent') {
      return `
        <div class="player-card hidden"><i class="fas fa-square"></i></div>
        <div class="player-card hidden"><i class="fas fa-square"></i></div>
      `;
    }

    // –î–ª—è –≥–µ—Ä–æ—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
    return cards.map(card => {
      if (card && card.hidden) {
        // –†—É–±–∞—à–∫–∞ –∫–∞—Ä—Ç—ã
        return `<div class="player-card hidden"><i class="fas fa-square"></i></div>`;
      } else {
        // –û—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        let rank, suit, suitClass;
        
        if (typeof card === 'string') {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "As" –∏–ª–∏ "Kh"
          rank = card.charAt(0);
          const suitChar = card.charAt(1);
          suit = this.getSuitSymbol(suitChar);
          suitClass = this.getSuitClass(suit);
        } else if (card && typeof card === 'object') {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞
          rank = card.rank || card.value || '?';
          const cardSuit = card.suit || '?';
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ suit —É–∂–µ —Å–∏–º–≤–æ–ª–æ–º –∏–ª–∏ –±—É–∫–≤–æ–π
          if (cardSuit.length === 1 && ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'].includes(cardSuit)) {
            // –£–∂–µ —Å–∏–º–≤–æ–ª –º–∞—Å—Ç–∏
            suit = cardSuit;
          } else {
            // –ë—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–∏–º–≤–æ–ª
            suit = this.getSuitSymbol(cardSuit);
          }
          suitClass = this.getSuitClass(suit);
        } else {
          // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
          rank = '?';
          suit = '?';
          suitClass = 'spades';
        }
        
        return `<div class="player-card ${suitClass}" data-suit="${suit}">
                  <span class="card-rank">${rank}</span>
                </div>`;
      }
    }).join('');
  }

  getSuitClass(suit) {
    const suitMap = {
      '‚ô•': 'hearts',
      '‚ô¶': 'diamonds', 
      '‚ô£': 'clubs',
      '‚ô†': 'spades'
    };
    return suitMap[suit] || 'spades';
  }

  getSuitSymbol(suitChar) {
    const suitSymbolMap = {
      'h': '‚ô•',
      'd': '‚ô¶',
      'c': '‚ô£',
      's': '‚ô†'
    };
    return suitSymbolMap[suitChar.toLowerCase()] || '‚ô†';
  }

  renderTableActions(tableInfo, tableId = null) {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π tableId –∏–ª–∏ –≤–∑—è—Ç—å –∏–∑ tableInfo
    const currentTableId = tableId || tableInfo.tableId;
    if (!currentTableId) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å tableId –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π');
      return '<div class="action-info">–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID —Å—Ç–æ–ª–∞</div>';
    }
    
    console.log('üéÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞:', currentTableId);
    console.log('üéÆ TableInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥—Ä–æ–∫–æ–≤:', tableInfo.players?.map(p => ({ id: p.id, name: p.name })));
    console.log('üéÆ –¢–µ–∫—É—â–∏–π userId:', this.userId);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ—Ä–æ—è –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    if (!heroPlayer) {
      console.warn(`‚ö†Ô∏è –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç–æ–ª–µ ${currentTableId}! UserId: ${this.userId}, –∏–≥—Ä–æ–∫–∏:`, tableInfo.players?.map(p => p.id));
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
      return `
        <div class="table-actions" style="opacity: 0.7;">
          <div style="text-align: center; color: #888; font-size: 0.8rem;">–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ</div>
        </div>
      `;
    }
    
    console.log('‚úÖ –ì–µ—Ä–æ–π –Ω–∞–π–¥–µ–Ω:', heroPlayer.name, '–ø–æ–∑–∏—Ü–∏—è:', heroPlayer.position);
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –≤ –∫—ç—à –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π–∑–∞
    this.tables.set(currentTableId, tableInfo);
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    const heroPosition = heroPlayer.position;
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    const opponent = tableInfo.players.find(p => p.id !== this.userId);
    const opponentPosition = opponent ? opponent.position : null;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    let heroCurrentBet = 0;
    let opponentCurrentBet = 0;
    let maxBet = 0;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (currentBet –∏ players.bet)
    if (tableInfo.currentBet !== undefined && tableInfo.players) {
      // –ù–∞–π—Ç–∏ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const heroPlayerData = tableInfo.players.find(p => p.id === this.userId);
      const opponentPlayerData = tableInfo.players.find(p => p.id === opponent?.id);
      
      heroCurrentBet = heroPlayerData?.bet || 0;
      opponentCurrentBet = opponentPlayerData?.bet || 0;
      maxBet = Math.max(heroCurrentBet, opponentCurrentBet, tableInfo.currentBet || 0);
      
      console.log('üí∞ –ò—Å–ø–æ–ª—å–∑—É—é —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–≤–∫–∞—Ö:', {
        heroCurrentBet: `$${(heroCurrentBet / 100).toFixed(2)}`,
        opponentCurrentBet: `$${(opponentCurrentBet / 100).toFixed(2)}`,
        serverCurrentBet: `$${((tableInfo.currentBet || 0) / 100).toFixed(2)}`,
        maxBet: `$${(maxBet / 100).toFixed(2)}`
      });
    } else {
      // Fallback: –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ streetBets
      const currentStreet = tableInfo.currentStreet || 'preflop';
      const streetBets = tableInfo.streetBets || {};
      const currentBets = streetBets[currentStreet] || {};
      heroCurrentBet = currentBets[this.userId] || 0;
      opponentCurrentBet = currentBets[opponent?.id] || 0;
      maxBet = Math.max(heroCurrentBet, opponentCurrentBet, 0);
      
      console.log('üí∞ –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞–≤–∫–∞—Ö (fallback):', {
        heroCurrentBet: `$${(heroCurrentBet / 100).toFixed(2)}`,
        opponentCurrentBet: `$${(opponentCurrentBet / 100).toFixed(2)}`,
        maxBet: `$${(maxBet / 100).toFixed(2)}`
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∞–π–∑–∏–Ω–≥–∞
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const potAmount = this.calculatePotAmount(tableInfo, handHistoryInfo);
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
    const minimumRaise = this.calculateMinimumRaise(currentTableId);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç–∞–≤–∫—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º)
    const heroStack = (heroPlayer.stack || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const heroCurrentBetDollars = (heroPlayer.bet || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const maxPossibleBet = heroStack + heroCurrentBetDollars;
    
    console.log(`üéØ –ì–µ—Ä–æ–π: ${heroPosition} vs –û–ø–ø–æ–Ω–µ–Ω—Ç: ${opponentPosition}`);
    console.log(`üí∞ –°—Ç–∞–≤–∫–∏: –ì–µ—Ä–æ–π ${heroCurrentBet}, –û–ø–ø–æ–Ω–µ–Ω—Ç ${opponentCurrentBet}, –ú–∞–∫—Å: ${maxBet}`);
    console.log(`üè¶ –†–∞–∑–º–µ—Ä –ø–æ—Ç–∞: $${potAmount.toFixed(2)}`);
    console.log(`üî• –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑: $${minimumRaise.toFixed(2)}`);
    console.log(`üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $${maxPossibleBet.toFixed(2)} (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º)`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞–∑–¥–∞—á–∞
    if (!tableInfo.isHandActive) {
      return `
        <div class="table-actions">
          <div style="text-align: center; margin-bottom: 10px;">
            <button class="action-btn start-hand-btn" onclick="multiplayerClient.requestNewHand(${currentTableId})" style="background: #28a745; color: white;">
              –ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É
            </button>
          </div>
        </div>
      `;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∞
    if (!this.isHeroTurn(tableInfo, heroPlayer)) {
      return `
        <div class="table-actions" style="opacity: 0.5; pointer-events: none;">
          <div style="text-align: center; color: #666; font-size: 0.8rem;">–û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞...</div>
        </div>
      `;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const canCheck = heroCurrentBet === maxBet;
    const canCall = heroCurrentBet < maxBet;
    const callAmount = maxBet - heroCurrentBet;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    let inputDefaultValue;
    if (canCheck) {
      inputDefaultValue = Math.min(handHistoryInfo.bigBlind, maxPossibleBet).toFixed(2);
    } else {
      inputDefaultValue = Math.min(minimumRaise, maxPossibleBet).toFixed(2);
    }

    let actionsHTML = `
      <div class="table-actions" data-table-id="${currentTableId}" onwheel="multiplayerClient.handleTableWheel(event, ${currentTableId})">
        <!-- –ö–Ω–æ–ø–∫–∏ —Å–∞–π–∑–∏–Ω–≥–∞ -->
        <div class="sizing-buttons">
          <button class="sizing-btn" onclick="multiplayerClient.setSizingPercentage(${currentTableId}, 25, ${potAmount})" title="25% –ø–æ—Ç–∞">25</button>
          <button class="sizing-btn" onclick="multiplayerClient.setSizingPercentage(${currentTableId}, 50, ${potAmount})" title="50% –ø–æ—Ç–∞">50</button>
          <button class="sizing-btn" onclick="multiplayerClient.setSizingPercentage(${currentTableId}, 75, ${potAmount})" title="75% –ø–æ—Ç–∞">75</button>
          <button class="sizing-btn" onclick="multiplayerClient.setSizingPercentage(${currentTableId}, 150, ${potAmount})" title="150% –ø–æ—Ç–∞">150</button>
          <input type="text" class="sizing-input" id="sizing-input-${currentTableId}" placeholder="$" title="–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏" 
                 value="${inputDefaultValue}"
                 onwheel="multiplayerClient.handleSizingWheel(event, ${currentTableId})"
                 oninput="multiplayerClient.handleSizingInputChange(event, ${currentTableId})"
                 onkeydown="multiplayerClient.handleSizingKeydown(event, ${currentTableId})"
                 onclick="this.select()">
          <button class="sizing-settings-btn" onclick="multiplayerClient.showSizingSettings(${currentTableId})" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π–∑–∏–Ω–≥–æ–≤">‚öô</button>
        </div>
        
        <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
        <div class="main-actions">
    `;
    
    // –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω FOLD (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ —á–µ–∫–Ω—É—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    if (!canCheck) {
      actionsHTML += `<button class="action-btn fold-btn" onclick="multiplayerClient.makeAction(${currentTableId}, 'fold')">FOLD</button>`;
    }
    
    // CHECK –∏–ª–∏ CALL
    if (canCheck) {
      actionsHTML += `<button class="action-btn check-btn" onclick="multiplayerClient.makeAction(${currentTableId}, 'check')">CHECK</button>`;
    } else if (canCall) {
      actionsHTML += `<button class="action-btn call-btn" onclick="multiplayerClient.makeAction(${currentTableId}, 'call', ${callAmount})">CALL $${(callAmount / 100).toFixed(2)}</button>`;
    }
    
    // BET –∏–ª–∏ RAISE —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
    if (canCheck) {
      const minBet = handHistoryInfo.bigBlind;
      actionsHTML += `<button class="action-btn bet-btn" id="bet-btn-${currentTableId}" onclick="multiplayerClient.makeBetFromInput(${currentTableId}, 'bet')">BET $${inputDefaultValue}</button>`;
    } else {
      actionsHTML += `<button class="action-btn raise-btn" id="raise-btn-${currentTableId}" onclick="multiplayerClient.makeBetFromInput(${currentTableId}, 'raise')">RAISE $${inputDefaultValue}</button>`;
    }
    
    actionsHTML += '</div></div>';
    
    console.log('üéÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞', currentTableId);
    return actionsHTML;
  }

  getPlayerPosition(isPlayerOne) {
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    return isPlayerOne ? 'player1' : 'player2';
  }

  isHeroTurn(tableInfo, heroPlayer) {
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (tableInfo.currentPlayer !== undefined) {
      const isHeroToAct = tableInfo.currentPlayer === heroPlayer.id;
      console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ - –≥–µ—Ä–æ–π –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å:', isHeroToAct, {
        currentPlayer: tableInfo.currentPlayer,
        heroId: heroPlayer.id,
        isMatch: isHeroToAct
      });
      return isHeroToAct;
    }
    
    // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º activeToAct –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (tableInfo.activeToAct !== undefined) {
      const isHeroToAct = tableInfo.activeToAct === heroPlayer.id;
      console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (activeToAct) - –≥–µ—Ä–æ–π –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å:', isHeroToAct);
      return isHeroToAct;
    }
    
    // Fallback –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–∞–∑–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (!tableInfo.isHandActive) {
      console.log('üéØ –†–∞–∑–¥–∞—á–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ —Å—Ñ–æ–ª–¥–∏–ª
    if (heroPlayer.folded) {
      console.log('üéØ –ì–µ—Ä–æ–π —Å—Ñ–æ–ª–¥–∏–ª');
      return false;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –≤ —Ö–µ–¥—Å-–∞–ø
    const currentStreet = tableInfo.currentStreet || 'preflop';
    const streetBets = tableInfo.streetBets || {};
    const currentBets = streetBets[currentStreet] || {};
    
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞:', {
      heroPosition: heroPlayer.position,
      currentStreet,
      currentBets,
      heroActed: heroPlayer.acted
    });
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    const opponent = tableInfo.players.find(p => p.id !== heroPlayer.id);
    if (!opponent) return false;
    
    console.log('üéØ –û–ø–ø–æ–Ω–µ–Ω—Ç:', {
      opponentPosition: opponent.position,
      heroPosition: heroPlayer.position,
      opponentActed: opponent.acted
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ç–æ —É–∂–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ
    const heroActed = heroPlayer.acted || currentBets.hasOwnProperty(heroPlayer.id);
    const opponentActed = opponent.acted || currentBets.hasOwnProperty(opponent.id);
    const heroBet = heroPlayer.bet || currentBets[heroPlayer.id] || 0;
    const opponentBet = opponent.bet || currentBets[opponent.id] || 0;
    
    console.log('üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:', {
      heroActed,
      opponentActed,
      heroBet,
      opponentBet,
      heroPosition: heroPlayer.position,
      opponentPosition: opponent.position
    });
    
    // –ï—Å–ª–∏ —Ç–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–æ–±–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –∏ —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω—ã), –Ω–∏–∫—Ç–æ –Ω–µ —Ö–æ–¥–∏—Ç
    if (heroActed && opponentActed && heroBet === opponentBet) {
      console.log('üéØ –¢–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: –æ–±–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —Ä–∞–≤–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏');
      return false;
    }
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª
    if (!heroActed && opponentActed) {
      console.log('üéØ –ì–µ—Ä–æ–π –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –µ–≥–æ –æ—á–µ—Ä–µ–¥—å');
      return true;
    }
    
    if (heroActed && !opponentActed) {
      console.log('üéØ –û–ø–ø–æ–Ω–µ–Ω—Ç –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –æ—á–µ—Ä–µ–¥—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞');
      return false;
    }
    
    // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    if (!heroActed && !opponentActed) {
      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
      const isHeroInPosition = this.isInPosition(heroPlayer.position, opponent.position);
      const shouldHeroActFirst = !isHeroInPosition; // OOP —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
      console.log('üéØ –ù–∏–∫—Ç–æ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –¥–æ–ª–∂–µ–Ω —Ö–æ–¥–∏—Ç—å OOP:', shouldHeroActFirst);
      return shouldHeroActFirst;
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ —Ä–∞–∑–Ω—ã–µ, –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ—Ç, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ —Å—Ç–∞–≤–∫–∞
    if (heroBet !== opponentBet) {
      const shouldHeroAct = heroBet < opponentBet;
      console.log('üéØ –†–∞–∑–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ—Ç —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ:', shouldHeroAct);
      return shouldHeroAct;
    }
    
    console.log('üéØ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false');
    return false;
  }

  showBetDialog(tableId) {
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∞–π–Ω–¥–∞—Ö –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    const tableInfo = this.tables.get(tableId);
    let minimumBet = 1.00; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (tableInfo) {
      const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
      minimumBet = handHistoryInfo.bigBlind;
    }
    
    const defaultValue = minimumBet.toFixed(2);
    const betAmount = prompt(`–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $${minimumBet.toFixed(2)}`, defaultValue);
    
    if (betAmount && !isNaN(betAmount)) {
      const amountInDollars = parseFloat(betAmount);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
      if (amountInDollars < minimumBet) {
        alert(`–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ $${minimumBet.toFixed(2)}`);
        return;
      }
      
      const amountInCents = Math.round(amountInDollars * 100);
      if (amountInCents > 0) {
        this.makeAction(tableId, 'bet', amountInCents);
      }
    }
  }

  showRaiseDialog(tableId) {
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
    const minimumRaise = this.calculateMinimumRaise(tableId);
    const defaultValue = minimumRaise > 0 ? minimumRaise.toFixed(2) : '';
    
    const raiseAmount = prompt(`–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑: $${minimumRaise.toFixed(2)}`, defaultValue);
    if (raiseAmount && !isNaN(raiseAmount)) {
      const amountInDollars = parseFloat(raiseAmount);
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–π–∑ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
      if (amountInDollars < minimumRaise) {
        alert(`–†–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ $${minimumRaise.toFixed(2)}`);
        return;
      }
      
      const amountInCents = Math.round(amountInDollars * 100);
      if (amountInCents > 0) {
        this.makeAction(tableId, 'raise', amountInCents);
      }
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∞–π–∑–∏–Ω–≥–∞
  setSizingPercentage(tableId, percentage, potAmount) {
    // potAmount —É–∂–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ calculatePotAmount)
    let betAmount = potAmount * (percentage / 100);
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ç–µ–∫—É
    const tableInfo = this.tables.get(tableId);
    if (tableInfo) {
      const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
      if (heroPlayer) {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å—Ç–µ–∫–æ–º –∏–≥—Ä–æ–∫–∞
        const heroStack = (heroPlayer.stack || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        const heroCurrentBet = (heroPlayer.currentBet || 0) / 100;
        const maxPossibleBet = heroStack + heroCurrentBet; // –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–µ–∫
        
        // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–µ–∫–∞
        betAmount = Math.min(betAmount, maxPossibleBet);
        
        console.log(`üí∞ –°–∞–π–∑–∏–Ω–≥ ${percentage}% –æ—Ç –ø–æ—Ç–∞ $${potAmount.toFixed(2)} = $${(potAmount * (percentage / 100)).toFixed(2)}, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Å—Ç–µ–∫–æ–º –¥–æ $${betAmount.toFixed(2)}`);
      }
    }
    
    const betInDollars = betAmount.toFixed(2);
    
    const inputElement = document.getElementById(`sizing-input-${tableId}`);
    if (inputElement) {
      inputElement.value = betInDollars;
      inputElement.focus();
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
      if (tableInfo) {
        const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
        const opponent = tableInfo.players.find(p => p.id !== this.userId);
        const heroCurrentBet = (heroPlayer?.bet || 0) / 100;
        const opponentCurrentBet = (opponent?.bet || 0) / 100;
        const maxBet = Math.max(heroCurrentBet, opponentCurrentBet, 0);
        const canCheck = heroCurrentBet === maxBet;
        
        this.updateBetButtonText(tableId, parseFloat(betInDollars), canCheck);
      }
    }
    
    console.log(`üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∞–π–∑–∏–Ω–≥ ${percentage}% –æ—Ç –ø–æ—Ç–∞: $${betInDollars}`);
  }

  handleSizingWheel(event, tableId) {
    event.preventDefault();
    
    const inputElement = event.target;
    const currentValue = parseFloat(inputElement.value) || 0;
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const tableInfo = this.tables.get(tableId);
    if (!tableInfo) return;
    
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const bigBlindAmount = handHistoryInfo.bigBlind;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: BB –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —à–∞–≥–∏
    let step = bigBlindAmount;
    if (currentValue > bigBlindAmount * 10) {
      step = bigBlindAmount * 2; // –®–∞–≥ –≤ 2BB –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º
    }
    if (currentValue > bigBlindAmount * 50) {
      step = bigBlindAmount * 5; // –®–∞–≥ –≤ 5BB –¥–ª—è –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const delta = event.deltaY > 0 ? -step : step;
    let newValue = currentValue + delta;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponent = tableInfo.players.find(p => p.id !== this.userId);
    const heroCurrentBet = (heroPlayer?.bet || 0) / 100;
    const opponentCurrentBet = (opponent?.bet || 0) / 100;
    const maxBet = Math.max(heroCurrentBet, opponentCurrentBet, 0);
    const canCheck = heroCurrentBet === maxBet;
    
    let minimumValue;
    if (canCheck) {
      // –ï—Å–ª–∏ –º–æ–∂–µ–º —á–µ–∫–Ω—É—Ç—å, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ = BB
      minimumValue = bigBlindAmount;
    } else {
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–π–∑–∏—Ç—å, –º–∏–Ω–∏–º—É–º = –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
      minimumValue = this.calculateMinimumRaise(tableId);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º –∏–≥—Ä–æ–∫–∞)
    const heroStack = (heroPlayer?.stack || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const maxPossibleBet = heroStack + heroCurrentBet; // –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–µ–∫
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º)
    newValue = Math.max(minimumValue, newValue);
    newValue = Math.min(maxPossibleBet, newValue);
    
    // –û–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ —Ü–µ–Ω—Ç–æ–≤
    newValue = Math.round(newValue * 100) / 100;
    
    inputElement.value = newValue.toFixed(2);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
    this.updateBetButtonText(tableId, newValue, canCheck);
    
    console.log(`üñ±Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º: $${newValue.toFixed(2)} (—à–∞–≥: $${step.toFixed(2)}, –º–∞–∫—Å: $${maxPossibleBet.toFixed(2)})`);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
  updateBetButtonText(tableId, amount, canCheck) {
    const betBtnId = canCheck ? `bet-btn-${tableId}` : `raise-btn-${tableId}`;
    const betBtn = document.getElementById(betBtnId);
    
    if (betBtn) {
      const action = canCheck ? 'BET' : 'RAISE';
      betBtn.textContent = `${action} $${amount.toFixed(2)}`;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
  handleSizingInputChange(event, tableId) {
    const inputElement = event.target;
    const newValue = parseFloat(inputElement.value) || 0;
    
    const tableInfo = this.tables.get(tableId);
    if (!tableInfo) return;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ —á–µ–∫–Ω—É—Ç—å
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponent = tableInfo.players.find(p => p.id !== this.userId);
    const heroCurrentBet = (heroPlayer?.bet || 0) / 100;
    const opponentCurrentBet = (opponent?.bet || 0) / 100;
    const maxBet = Math.max(heroCurrentBet, opponentCurrentBet, 0);
    const canCheck = heroCurrentBet === maxBet;
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    this.updateBetButtonText(tableId, newValue, canCheck);
  }

  handleSizingKeydown(event, tableId) {
    if (event.key === 'Enter') {
      event.preventDefault();
      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (bet –∏–ª–∏ raise) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
      const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
      const checkBtn = tableElement?.querySelector('.check-btn');
      const actionType = checkBtn ? 'bet' : 'raise';
      
      this.makeBetFromInput(tableId, actionType);
    }
  }

  makeBetFromInput(tableId, actionType) {
    const inputElement = document.getElementById(`sizing-input-${tableId}`);
    if (!inputElement) {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–æ–ª–∞', tableId);
      return;
    }
    
    let amount = parseFloat(inputElement.value);
    
    // –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (isNaN(amount) || amount <= 0) {
      const tableInfo = this.tables.get(tableId);
      if (tableInfo) {
        if (actionType === 'bet') {
          const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
          amount = handHistoryInfo.bigBlind;
        } else if (actionType === 'raise') {
          amount = this.calculateMinimumRaise(tableId);
        }
      }
      
      if (isNaN(amount) || amount <= 0) {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏', 'error');
        return;
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞ –∏ –º–∞–∫—Å–∏–º—É–º–∞
    const tableInfo = this.tables.get(tableId);
    if (tableInfo) {
      const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
      if (heroPlayer) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º)
        const heroStack = (heroPlayer.stack || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        const heroCurrentBet = (heroPlayer.bet || 0) / 100;
        const maxPossibleBet = heroStack + heroCurrentBet;
        
        if (amount > maxPossibleBet) {
          this.showNotification(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $${maxPossibleBet.toFixed(2)} (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º)`, 'error');
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è —Ä–µ–π–∑–∞
        if (actionType === 'raise') {
          const minimumRaise = this.calculateMinimumRaise(tableId);
          
          // –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–ª–ª-–∏–Ω –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π–∑–∞
          const isAllIn = amount === maxPossibleBet;
          
          if (amount < minimumRaise && !isAllIn) {
            this.showNotification(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑: $${minimumRaise.toFixed(2)} (–∏–ª–∏ –æ–ª–ª-–∏–Ω: $${maxPossibleBet.toFixed(2)})`, 'error');
            return;
          }
        }
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—ã
    const amountInCents = Math.round(amount * 100);
    
    console.log(`üí∞ ${actionType.toUpperCase()} –Ω–∞ —Å—É–º–º—É $${amount.toFixed(2)} (${amountInCents} —Ü–µ–Ω—Ç–æ–≤)`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    this.makeAction(tableId, actionType, amountInCents);
  }

  showSizingSettings(tableId) {
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫ —Å–∞–π–∑–∏–Ω–≥–∞
    const settings = this.getSizingSettings() || [25, 50, 75, 150];
    const settingsStr = settings.join(', ');
    
    const newSettings = prompt(
      `–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∞–π–∑–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–¢–µ–∫—É—â–∏–µ: ${settingsStr}`,
      settingsStr
    );
    
    if (newSettings) {
      try {
        const values = newSettings.split(',').map(v => parseInt(v.trim())).filter(v => !isNaN(v) && v > 0);
        if (values.length > 0) {
          this.setSizingSettings(values);
          // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
          const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
          if (tableElement) {
            // –ù–∞–π—Ç–∏ tableInfo –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∞
            console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π–∑–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', values);
          }
        }
      } catch (error) {
        alert('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25, 50, 75, 100)');
      }
    }
  }

  getSizingSettings() {
    try {
      return JSON.parse(localStorage.getItem('pokersim_sizing_settings'));
    } catch {
      return null;
    }
  }

  setSizingSettings(settings) {
    localStorage.setItem('pokersim_sizing_settings', JSON.stringify(settings));
  }

  updateTableUI(tableId, tableInfo) {
    console.log('üîÑ –ù–ê–ß–ê–õ–û updateTableUI –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∞:', {
      tableId,
      currentPlayer: tableInfo?.currentPlayer,
      currentBet: tableInfo?.currentBet,
      playersCount: tableInfo?.players?.length,
      players: tableInfo?.players?.map(p => ({ id: p.id, name: p.name, bet: p.bet, hasActed: p.hasActed })),
      myUserId: this.userId
    });
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    console.log('üéØ –ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è –≤ updateTableUI:', {
      myUserId: this.userId,
      foundHero: !!heroPlayer,
      heroData: heroPlayer
    });
    
    if (!heroPlayer) {
      console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –≤ –∫—ç—à
    this.tables.set(tableId, tableInfo);
    
    const tableElement = document.querySelector(`[data-table-id=\"${tableId}\"]`);
    if (!tableElement) return;

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ—Ä–æ—è –∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    const opponentPlayer = tableInfo.players.find(p => p.id !== this.userId);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–µ –∏ –±–ª–∞–π–Ω–¥–∞—Ö
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const potAmount = this.calculatePotAmount(tableInfo, handHistoryInfo);
    const effectiveStack = this.calculateEffectiveStack(tableInfo, handHistoryInfo);

    console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–∞—Ä—Å–∏–Ω–≥ hand history:', handHistoryInfo);
    console.log('üè¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –±–∞–Ω–∫:', potAmount);
    console.log('üíµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫:', effectiveStack);

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –≥–µ—Ä–æ—è
    if (heroPlayer) {
      const heroCardsArea = tableElement.querySelector('.hero-cards-center');
      if (heroCardsArea) {
        heroCardsArea.innerHTML = this.renderHeroCards(heroPlayer);
      }
      
      // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ
      const heroInfoArea = tableElement.querySelector('.player-section.hero-green .player-info-horizontal-green');
      if (heroInfoArea) {
        const heroStack = (heroPlayer.stack || 0) / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
        heroInfoArea.innerHTML = `
          <div class="player-name">${heroPlayer.name}</div>
          <div class="player-position">${heroPlayer.position}</div>
          <div class="player-stack">$${heroStack.toFixed(2)}</div>
        `;
      }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ø–æ–Ω–µ–Ω—Ç–µ
    if (opponentPlayer) {
      const opponentArea = tableElement.querySelector('.opponent-area-compact');
      if (opponentArea) {
        opponentArea.innerHTML = this.renderOpponentPlayer(opponentPlayer, handHistoryInfo);
      }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –±–æ—Ä–¥–∞
    const communityCardsArea = tableElement.querySelector('.community-cards');
    if (communityCardsArea) {
      communityCardsArea.innerHTML = this.renderCommunityCards(tableInfo.communityCards || []);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–∫–µ
    const potDisplay = tableElement.querySelector('.pot-display');
    if (potDisplay) {
      potDisplay.innerHTML = `
        <div class="pot-label">–ë–∞–Ω–∫</div>
        <div class="pot-amount">$${potAmount.toFixed(2)}</div>
        <div class="bb-info">BB: $${handHistoryInfo.bigBlind.toFixed(2)}</div>
        <div class="effective-stack">–≠—Ñ—Ñ: $${effectiveStack.toFixed(2)}</div>
      `;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    const opponentBetDisplay = tableElement.querySelector('.opponent-bet-display .bet-amount');
    const heroBetDisplay = tableElement.querySelector('.hero-bet-display .bet-amount');
    
    if (opponentBetDisplay && opponentPlayer) {
      const opponentBetAmount = (opponentPlayer.bet || 0) / 100;
      opponentBetDisplay.textContent = `$${opponentBetAmount.toFixed(2)}`;
    }
    
    if (heroBetDisplay && heroPlayer) {
      const heroBetAmount = (heroPlayer.bet || 0) / 100;
      heroBetDisplay.textContent = `$${heroBetAmount.toFixed(2)}`;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const actionsArea = tableElement.querySelector('.table-actions');
    console.log('üéÆ –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π:', {
      tableId,
      actionsAreaFound: !!actionsArea,
      selector: '.table-actions'
    });
    
    if (actionsArea) {
      const newActions = this.renderTableActions(tableInfo, tableId);
      console.log('üéÆ –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞', tableId, ':', newActions);
      actionsArea.innerHTML = newActions;
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç–æ–ª–∞', tableId);
    } else {
      console.error('‚ùå –û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å—Ç–æ–ª–∞', tableId);
    }
    
    console.log('üèÅ –ö–û–ù–ï–¶ updateTableUI –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
  }

  getTableGridClass(tablesCount) {
    const classMap = {
      1: 'one-table',
      2: 'two-tables',
      3: 'three-tables',
      4: 'four-tables'
    };
    return classMap[tablesCount] || 'one-table';
  }

  downloadHandHistory(handHistory, tableId) {
    const filename = `hand_${handHistory.raw.handId}_table_${tableId}.txt`;
    const content = handHistory.formatted;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }

  renderHeroCards(player) {
    if (!player) {
      return `
        <div class="player-cards-section">
          <div class="player-card empty">?</div>
          <div class="player-card empty">?</div>
        </div>
      `;
    }

    return `
      <div class="player-cards-section">
        ${this.renderPlayerCards(player.cards, 'hero')}
      </div>
    `;
  }

  renderHeroWithActions(player, tableId) {
    // Implementation of renderHeroWithActions method
  }

  showNotification(message, type = 'info') {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    if (typeof message !== 'string') {
      if (message && typeof message === 'object') {
        // –ï—Å–ª–∏ —ç—Ç–æ DOM —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        if (message.nodeType) {
          message = `DOM Element: ${message.tagName || 'Unknown'}`;
        } else {
          message = JSON.stringify(message, null, 2);
        }
      } else {
        message = String(message);
      }
    }
    
    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showNotification –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof window.showNotification === 'function') {
      window.showNotification(message, type);
      return;
    }
    
    // –§–æ–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å alert –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (type === 'error') {
      alert(`–û—à–∏–±–∫–∞: ${message}`);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ (IP) –ø—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ (OOP)
  isInPosition(heroPosition, opponentPosition) {
    // –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –æ—Ç —Ä–∞–Ω–Ω–µ–π –∫ –ø–æ–∑–¥–Ω–µ–π
    const positionOrder = ['SB', 'BB', 'EP', 'MP', 'CO', 'BTN'];
    
    const heroIndex = positionOrder.indexOf(heroPosition);
    const opponentIndex = positionOrder.indexOf(opponentPosition);
    
    // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–µ—Ä–Ω—É—Ç—å false
    if (heroIndex === -1 || opponentIndex === -1) {
      return false;
    }
    
    // –ò–≥—Ä–æ–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ (–ø–æ–∑–∂–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏)
    return heroIndex > opponentIndex;
  }

  parseHandHistoryInfo(tableInfo) {
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (tableInfo.handHistoryInfo) {
      return tableInfo.handHistoryInfo;
    }

    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      bigBlind: 1.00,
      smallBlind: 0.50,
      initialPot: 0,
      effectiveStack: 100.00,
      flopBets: { player1: 0, player2: 0 },
      turnBets: { player1: 0, player2: 0 },
      riverBets: { player1: 0, player2: 0 }
    };
  }

  calculatePotAmount(tableInfo, handHistoryInfo) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—É–∂–µ –≤ —Ü–µ–Ω—Ç–∞—Ö)
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è  
    return (tableInfo.pot || 0) / 100;
  }

  calculateEffectiveStack(tableInfo, handHistoryInfo) {
    // –ü–æ–ª—É—á–∏—Ç—å –≥–µ—Ä–æ—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–∫–∞
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponentPlayer = tableInfo.players.find(p => p.id !== this.userId);
    
    if (!heroPlayer || !opponentPlayer) {
      return handHistoryInfo.effectiveStack || 1000; // fallback
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫ = –º–∏–Ω–∏–º—É–º –∏–∑ —Å—Ç–µ–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
    const heroStack = (heroPlayer.stack || 0) / 100; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–æ–ª–ª–∞—Ä—ã
    const opponentStack = (opponentPlayer.stack || 0) / 100;
    
    return Math.min(heroStack, opponentStack);
  }

  calculateStreetBets(tableInfo, street) {
    // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É —Å—Ç–∞–≤–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ
    const streetBets = tableInfo.streetBets?.[street] || {};
    return Object.values(streetBets).reduce((sum, bet) => sum + (bet / 100), 0);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞
  handleTableUpdated(data) {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞:', data);
    
    const tableId = data.tableId;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    this.initializeActionTracker(tableId);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    let tableInfo;
    if (data.tableInfo) {
      tableInfo = data.tableInfo;
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ tableInfo');
    } else {
      // –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
      tableInfo = {
        ...data
      };
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç (–ø—Ä—è–º—ã–µ –ø–æ–ª—è)');
    }
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç –ò –ø–æ —Å–º–µ–Ω–µ —É–ª–∏—Ü
    if (tableInfo && tableInfo.communityCards) {
      const cardCount = tableInfo.communityCards.length;
      const currentTracker = this.actionHistory.get(tableId);
      
      if (currentTracker) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (currentTracker.separatorAdded4 === undefined) currentTracker.separatorAdded4 = false;
        if (currentTracker.separatorAdded5 === undefined) currentTracker.separatorAdded5 = false;
        if (currentTracker.lastCardCount === undefined) currentTracker.lastCardCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
        if (cardCount !== currentTracker.lastCardCount) {
          console.log(`üÉè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç: ${currentTracker.lastCardCount} ‚Üí ${cardCount}`);
          
          // –ü—Ä–∏ 4 –∫–∞—Ä—Ç–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ñ–ª–æ–ø -> —Ç—ë—Ä–Ω)
          if (cardCount === 4 && !currentTracker.separatorAdded4) {
            console.log(`üõ£Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ 4 –∫–∞—Ä—Ç–∞—Ö (—Ñ–ª–æ–ø ‚Üí —Ç—ë—Ä–Ω)`);
            this.addSeparatorToActions(tableId);
            currentTracker.separatorAdded4 = true;
            // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —É–ª–∏—Ü—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            currentTracker.setStreet('turn');
          }
          // –ü—Ä–∏ 5 –∫–∞—Ä—Ç–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ç—ë—Ä–Ω -> —Ä–∏–≤–µ—Ä)
          else if (cardCount === 5 && !currentTracker.separatorAdded5) {
            console.log(`üõ£Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ 5 –∫–∞—Ä—Ç–∞—Ö (—Ç—ë—Ä–Ω ‚Üí —Ä–∏–≤–µ—Ä)`);
            this.addSeparatorToActions(tableId);
            currentTracker.separatorAdded5 = true;
            // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —É–ª–∏—Ü—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            currentTracker.setStreet('river');
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
          currentTracker.lastCardCount = cardCount;
        }
      }
    }
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —É–ª–∏—Ü –ø–æ –ø–æ–ª—é street
    if (tableInfo && tableInfo.street) {
      const currentTracker = this.actionHistory.get(tableId);
      if (currentTracker && currentTracker.currentStreet !== tableInfo.street) {
        console.log(`üõ£Ô∏è –°–º–µ–Ω–∞ —É–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø–æ–ª–µ street: ${currentTracker.currentStreet} ‚Üí ${tableInfo.street}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü–µ
        const hasHeroActions = currentTracker.heroActions[currentTracker.currentStreet] && 
                              currentTracker.heroActions[currentTracker.currentStreet].length > 0;
        const hasOpponentActions = currentTracker.opponentActions[currentTracker.currentStreet] && 
                                  currentTracker.opponentActions[currentTracker.currentStreet].length > 0;
        
        if (hasHeroActions || hasOpponentActions) {
          console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã —á–µ—Ä–µ–∑ street –ø–æ–ª–µ`);
          this.addSeparatorToActions(tableId);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —É–ª–∏—Ü—É
        currentTracker.setStreet(tableInfo.street);
      }
    }
    
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞:', {
      tableId,
      currentPlayer: tableInfo?.currentPlayer,
      currentBet: tableInfo?.currentBet,
      players: tableInfo?.players?.map(p => ({ id: p.id, name: p.name, bet: p.bet, hasActed: p.hasActed })),
      myUserId: this.userId
    });
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (tableInfo.players && tableInfo.players.length > 0) {
      const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
      console.log('üéØ –ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è:', {
        myUserId: this.userId,
        foundHero: !!heroPlayer,
        heroData: heroPlayer,
        allPlayerIds: tableInfo.players.map(p => p.id)
      });
      
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞`);
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤
    if (tableInfo.players) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const previousTableInfo = this.tables.get(tableId);
      
      tableInfo.players.forEach(player => {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        let previousPlayer = null;
        let previousBet = 0;
        let previousHasActed = false;
        
        if (previousTableInfo && previousTableInfo.players) {
          previousPlayer = previousTableInfo.players.find(p => p.id === player.id);
          if (previousPlayer) {
            previousBet = previousPlayer.bet || 0;
            previousHasActed = previousPlayer.hasActed || false;
          }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª –µ–≥–æ
        if (player.hasActed && !previousHasActed) {
          let action = 'check';
          let amount = player.bet;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ñ–æ–ª–¥ –ª–∏ —ç—Ç–æ
          if (player.folded || (player.bet === 0 && tableInfo.currentBet > 0)) {
            action = 'fold';
            amount = 0;
          } else if (player.bet === 0 && tableInfo.currentBet === 0) {
            // –ò–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª 0 –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ CHECK
            action = 'check';
            amount = 0;
          } else if (player.bet > 0) {
            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ)
            const otherPlayersBets = tableInfo.players
              .filter(p => p.id !== player.id)
              .map(p => p.bet || 0);
            const maxOtherBet = Math.max(0, ...otherPlayersBets);
            
            console.log(`üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–∞ ${player.name}: –µ–≥–æ —Å—Ç–∞–≤–∫–∞=${player.bet}, –º–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ –¥—Ä—É–≥–∏—Ö=${maxOtherBet}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–∞=${tableInfo.currentBet}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞=${previousBet}`);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É—Ä–∞–≤–Ω—è–ª —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É —Å—Ç–æ–ª–∞ - —ç—Ç–æ CALL
            if (player.bet === tableInfo.currentBet && tableInfo.currentBet > 0) {
              action = 'call';
            }
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–∞ - —ç—Ç–æ BET –∏–ª–∏ RAISE
            else if (player.bet > tableInfo.currentBet) {
              if (tableInfo.currentBet === 0) {
                // –ù–µ—Ç —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ BET
                action = 'bet';
              } else {
                // –ï—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ RAISE
                action = 'raise';
              }
            }
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ALL-IN –∏–ª–∏ –æ—à–∏–±–∫–∞
            else if (player.bet < tableInfo.currentBet && player.bet > 0) {
              // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ ALL-IN
              action = 'call'; // –∏–ª–∏ 'all-in' –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
            }
            // Fallback - –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            else {
              if (tableInfo.currentBet === 0) {
                action = 'bet';
              } else {
                action = 'call';
              }
            }
          } else {
            // –°—Ç–∞–≤–∫–∞ 0 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (tableInfo.currentBet === 0) {
              action = 'check';
            } else {
              // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ, –∞ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª 0 - —ç—Ç–æ —Ñ–æ–ª–¥
              action = 'fold';
            }
          }
          
          console.log(`üéØ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: –∏–≥—Ä–æ–∫ ${player.name}, –¥–µ–π—Å—Ç–≤–∏–µ: ${action}, —Å—É–º–º–∞: ${amount}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–∞: ${tableInfo.currentBet}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞: ${previousBet}`);
          this.recordAction(tableId, player.id, action, amount);
        }
      });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å—Ç–æ–ª–∞
    this.tables.set(tableId, tableInfo);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞
    this.updatePlayerTurnAnimationsFromTableInfo(tableInfo);
    
    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–ª–∞
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–æ–ª–∞:', {
      tableId,
      elementFound: !!tableElement,
      selector: `[data-table-id="${tableId}"]`
    });
    
    if (tableElement) {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º updateTableUI –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–∞
      console.log('üîÑ –í—ã–∑–æ–≤ updateTableUI –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
      this.updateTableUI(tableId, tableInfo);
      
      console.log('‚úÖ –°—Ç–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ updateTableUI');
    } else {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', tableId);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allTables = document.querySelectorAll('[data-table-id]');
      console.log('üîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã:', Array.from(allTables).map(el => el.getAttribute('data-table-id')));
    }
  }

  handleTableUpdate(data) {
    console.log('üì• –ü–û–õ–£–ß–ï–ù–û table-updated —Å–æ–±—ã—Ç–∏–µ:', data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
    if (data.message === '–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞') {
      console.log('üèÅ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏, –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É...');
      
      // –û–ß–ò–©–ê–ï–ú –ó–ê–ü–ò–°–ò –î–ï–ô–°–¢–í–ò–ô –ü–†–ò –ó–ê–í–ï–†–®–ï–ù–ò–ò –†–ê–ó–î–ê–ß–ò
      this.resetActionTracker(data.tableId);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏
      const tableElement = document.querySelector(`[data-table-id="${data.tableId}"]`);
      if (tableElement) {
        const actionsArea = tableElement.querySelector('.table-actions');
        if (actionsArea) {
          actionsArea.innerHTML = `
            <div class="table-actions" style="opacity: 0.7; pointer-events: none;">
              <div style="text-align: center; color: #4CAF50; font-size: 0.9rem; font-weight: bold;">
                üèÅ –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
              </div>
            </div>
          `;
        }
      }
      return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º —Å–º–µ–Ω—ã —É–ª–∏—Ü—ã
    if (data.street && data.tableId) {
      console.log(`üõ£Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —É–ª–∏—Ü—ã –Ω–∞ ${data.street} –¥–ª—è —Å—Ç–æ–ª–∞ ${data.tableId}`);
      this.setStreet(data.tableId, data.street);
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —É–ª–∏—Ü—ã
      this.updateActionDisplays(data.tableId);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ
    let tableInfo;
    let tableId;
    
    if (data.tableInfo) {
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: { tableId, tableInfo: {...} }
      tableId = data.tableId;
      tableInfo = data.tableInfo;
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (tableInfo)');
    } else {
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: { tableId, currentPlayer, currentBet, players }
      tableId = data.tableId;
      tableInfo = {
        tableId: data.tableId,
        currentPlayer: data.currentPlayer,
        currentBet: data.currentBet,
        players: data.players || [],
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        ...data
      };
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç (–ø—Ä—è–º—ã–µ –ø–æ–ª—è)');
    }
    
    // –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç
    if (tableInfo && tableInfo.communityCards) {
      const cardCount = tableInfo.communityCards.length;
      const currentTracker = this.actionHistory.get(tableId);
      
      if (currentTracker) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (currentTracker.separatorAdded4 === undefined) currentTracker.separatorAdded4 = false;
        if (currentTracker.separatorAdded5 === undefined) currentTracker.separatorAdded5 = false;
        if (currentTracker.lastCardCount === undefined) currentTracker.lastCardCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
        if (cardCount !== currentTracker.lastCardCount) {
          console.log(`üÉè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç: ${currentTracker.lastCardCount} ‚Üí ${cardCount}`);
          
          // –ü—Ä–∏ 4 –∫–∞—Ä—Ç–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ñ–ª–æ–ø -> —Ç—ë—Ä–Ω)
          if (cardCount === 4 && !currentTracker.separatorAdded4) {
            console.log(`üõ£Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ 4 –∫–∞—Ä—Ç–∞—Ö (—Ñ–ª–æ–ø ‚Üí —Ç—ë—Ä–Ω)`);
            this.addSeparatorToActions(tableId);
            currentTracker.separatorAdded4 = true;
            // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —É–ª–∏—Ü—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            currentTracker.setStreet('turn');
          }
          // –ü—Ä–∏ 5 –∫–∞—Ä—Ç–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ç—ë—Ä–Ω -> —Ä–∏–≤–µ—Ä)
          else if (cardCount === 5 && !currentTracker.separatorAdded5) {
            console.log(`üõ£Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø—Ä–∏ 5 –∫–∞—Ä—Ç–∞—Ö (—Ç—ë—Ä–Ω ‚Üí —Ä–∏–≤–µ—Ä)`);
            this.addSeparatorToActions(tableId);
            currentTracker.separatorAdded5 = true;
            // –¢–∞–∫–∂–µ –º–µ–Ω—è–µ–º —É–ª–∏—Ü—É –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            currentTracker.setStreet('river');
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
          currentTracker.lastCardCount = cardCount;
        }
      }
    }
    
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–∞:', {
      tableId,
      currentPlayer: tableInfo?.currentPlayer,
      currentBet: tableInfo?.currentBet,
      players: tableInfo?.players?.map(p => ({ id: p.id, name: p.name, bet: p.bet, hasActed: p.hasActed })),
      myUserId: this.userId
    });
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (tableInfo.players && tableInfo.players.length > 0) {
      const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
      console.log('üéØ –ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è:', {
        myUserId: this.userId,
        foundHero: !!heroPlayer,
        heroData: heroPlayer,
        allPlayerIds: tableInfo.players.map(p => p.id)
      });
      
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞`);
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤
    if (tableInfo.players) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const previousTableInfo = this.tables.get(tableId);
      
      tableInfo.players.forEach(player => {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        let previousPlayer = null;
        let previousBet = 0;
        let previousHasActed = false;
        
        if (previousTableInfo && previousTableInfo.players) {
          previousPlayer = previousTableInfo.players.find(p => p.id === player.id);
          if (previousPlayer) {
            previousBet = previousPlayer.bet || 0;
            previousHasActed = previousPlayer.hasActed || false;
          }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª –µ–≥–æ
        if (player.hasActed && !previousHasActed) {
          let action = 'check';
          let amount = player.bet;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ñ–æ–ª–¥ –ª–∏ —ç—Ç–æ
          if (player.folded || (player.bet === 0 && tableInfo.currentBet > 0)) {
            action = 'fold';
            amount = 0;
          } else if (player.bet === 0 && tableInfo.currentBet === 0) {
            // –ò–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª 0 –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ CHECK
            action = 'check';
            amount = 0;
          } else if (player.bet > 0) {
            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            
            // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ)
            const otherPlayersBets = tableInfo.players
              .filter(p => p.id !== player.id)
              .map(p => p.bet || 0);
            const maxOtherBet = Math.max(0, ...otherPlayersBets);
            
            console.log(`üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–∞ ${player.name}: –µ–≥–æ —Å—Ç–∞–≤–∫–∞=${player.bet}, –º–∞–∫—Å. —Å—Ç–∞–≤–∫–∞ –¥—Ä—É–≥–∏—Ö=${maxOtherBet}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–∞=${tableInfo.currentBet}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞=${previousBet}`);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É—Ä–∞–≤–Ω—è–ª —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É —Å—Ç–æ–ª–∞ - —ç—Ç–æ CALL
            if (player.bet === tableInfo.currentBet && tableInfo.currentBet > 0) {
              action = 'call';
            }
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–∞ - —ç—Ç–æ BET –∏–ª–∏ RAISE
            else if (player.bet > tableInfo.currentBet) {
              if (tableInfo.currentBet === 0) {
                // –ù–µ—Ç —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ BET
                action = 'bet';
              } else {
                // –ï—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ - —ç—Ç–æ RAISE
                action = 'raise';
              }
            }
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ALL-IN –∏–ª–∏ –æ—à–∏–±–∫–∞
            else if (player.bet < tableInfo.currentBet && player.bet > 0) {
              // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ ALL-IN
              action = 'call'; // –∏–ª–∏ 'all-in' –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
            }
            // Fallback - –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            else {
              if (tableInfo.currentBet === 0) {
                action = 'bet';
              } else {
                action = 'call';
              }
            }
          } else {
            // –°—Ç–∞–≤–∫–∞ 0 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (tableInfo.currentBet === 0) {
              action = 'check';
            } else {
              // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ, –∞ –∏–≥—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∏–ª 0 - —ç—Ç–æ —Ñ–æ–ª–¥
              action = 'fold';
            }
          }
          
          console.log(`üéØ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: –∏–≥—Ä–æ–∫ ${player.name}, –¥–µ–π—Å—Ç–≤–∏–µ: ${action}, —Å—É–º–º–∞: ${amount}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–∞: ${tableInfo.currentBet}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞: ${previousBet}`);
          this.recordAction(tableId, player.id, action, amount);
        }
      });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —Å—Ç–æ–ª–∞
    this.tables.set(tableId, tableInfo);
    
    // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–ª–∞
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–æ–ª–∞:', {
      tableId,
      elementFound: !!tableElement,
      selector: `[data-table-id="${tableId}"]`
    });
    
    if (tableElement) {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º updateTableUI –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–∞
      console.log('üîÑ –í—ã–∑–æ–≤ updateTableUI –¥–ª—è —Å—Ç–æ–ª–∞:', tableId);
      this.updateTableUI(tableId, tableInfo);
      
      console.log('‚úÖ –°—Ç–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ updateTableUI');
    } else {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', tableId);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const allTables = document.querySelectorAll('[data-table-id]');
      console.log('üîç –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã:', Array.from(allTables).map(el => el.getAttribute('data-table-id')));
    }
  }

  handleNewHandStarted(data) {
    console.log('üé≤ –ù–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞:', data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏`);
        return;
      }
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏
    console.log(`üßπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}`);
    this.resetActionTracker(data.tableId);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(`–ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}`, 'info');
    
    console.log(`‚úÖ –°—Ç–æ–ª ${data.tableId} - –Ω–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
  }

  handleNewHandAutoStarted(data) {
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞:', data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏`);
        return;
      }
    }
    
    // –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏
    this.resetActionTracker(data.tableId);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ
    this.showNotification(`${data.message} (—Ä–∞–∑–¥–∞—á–∞ #${data.handNumber})`, 'success');
    
    console.log(`üéÆ –°—Ç–æ–ª ${data.tableId} - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ #${data.handNumber} –Ω–∞—á–∞–ª–∞—Å—å`);
  }

  handleAllInDealStarted(data) {
    console.log('üéØ –ù–∞—á–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ all-in:', data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É all-in —Ä–∞–∑–¥–∞—á–∏`);
        return;
      }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ all-in
    this.showAllInNotification(data.tableId, 'All-in! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç...');
    
    // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å—Ç–æ–ª–µ
    this.disableTableActions(data.tableId);
    
    console.log(`‚úÖ –°—Ç–æ–ª ${data.tableId} - –Ω–∞—á–∞–ª–∞—Å—å all-in —Ä–∞–∑–¥–∞—á–∞`);
  }

  handleCardDealtAllIn(data) {
    console.log('üÉè –ö–∞—Ä—Ç–∞ —Ä–∞–∑–¥–∞–Ω–∞ –≤ all-in —Ä–µ–∂–∏–º–µ:', data);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–º —Å—Ç–æ–ª–µ
    if (data.tableInfo) {
      const heroPlayer = data.tableInfo.players.find(p => p.id === this.userId);
      if (!heroPlayer) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${this.userId} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç–æ–ª–µ ${data.tableId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç—ã all-in`);
        return;
      }
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ–ª–∞ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
    if (data.tableInfo) {
      this.updateTableUI(data.tableId, data.tableInfo);
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    this.animateNewCard(data.tableId, data.street);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç—ã
    this.showNotification(`–†–∞–∑–¥–∞—á–∞: ${data.streetName}`, 'info');
    
    console.log(`‚úÖ –°—Ç–æ–ª ${data.tableId} - —Ä–∞–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ ${data.street}`);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ all-in —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showAllInNotification(tableId, message) {
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) return;
    
    // –°–æ–∑–¥–∞—Ç—å –æ–≤–µ—Ä–ª–µ–π all-in
    const overlay = document.createElement('div');
    overlay.className = 'all-in-overlay';
    overlay.innerHTML = `
      <div class="all-in-content">
        <div class="all-in-icon">üéØ</div>
        <h3>ALL-IN!</h3>
        <p>${message}</p>
        <div class="all-in-progress">
          <div class="progress-bar"></div>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è
    overlay.style.cssText = `
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 140, 0, 0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      border-radius: 8px;
      backdrop-filter: blur(3px);
    `;
    
    tableElement.appendChild(overlay);
    
    // –£–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (overlay.parentElement) {
        overlay.style.opacity = '0';
        overlay.style.transition = 'opacity 0.5s ease';
        setTimeout(() => overlay.remove(), 500);
      }
    }, 3000);
  }
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  animateNewCard(tableId, street) {
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) return;
    
    const communityCards = tableElement.querySelector('.community-cards');
    if (!communityCards) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    communityCards.classList.add('new-card-animation');
    
    // –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—à–∫–∏
    const flash = document.createElement('div');
    flash.className = 'card-flash-effect';
    flash.style.cssText = `
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, #ffd700, #ffed4e);
      opacity: 0.7;
      border-radius: 8px;
      animation: cardFlash 0.5s ease-out;
      pointer-events: none;
      z-index: 100;
    `;
    
    communityCards.appendChild(flash);
    
    // –£–±—Ä–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    setTimeout(() => {
      communityCards.classList.remove('new-card-animation');
      if (flash.parentElement) {
        flash.remove();
      }
    }, 1000);
  }
  
  // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å—Ç–æ–ª–µ
  disableTableActions(tableId) {
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) return;
    
    const actionsArea = tableElement.querySelector('.table-actions');
    if (actionsArea) {
      actionsArea.style.opacity = '0.5';
      actionsArea.style.pointerEvents = 'none';
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫
      actionsArea.innerHTML = `
        <div class="all-in-message">
          <i class="fas fa-clock"></i>
          <div>All-in —Ä–µ–∂–∏–º</div>
          <div style="font-size: 0.8rem; color: #ccc;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç...</div>
        </div>
      `;
    }
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ–∫–µ—Ä–∞
  calculateMinimumRaise(tableId) {
    const tableInfo = this.tables.get(tableId);
    if (!tableInfo) {
      console.log('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π–∑–∞');
      return 0;
    }
    
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponent = tableInfo.players.find(p => p.id !== this.userId);
    
    if (!heroPlayer || !opponent) {
      console.log('‚ùå –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π–∑–∞');
      return 0;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    const heroBet = (heroPlayer.bet || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const opponentBet = (opponent.bet || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const currentBet = Math.max(heroBet, opponentBet);
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∞–π–Ω–¥–∞—Ö
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const bigBlind = handHistoryInfo.bigBlind;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ–∫–µ—Ä–∞
    let lastRaiseSize = bigBlind; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BB
    
    if (currentBet > 0) {
      // –ü—Ä–∞–≤–∏–ª–æ: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ = —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–≤–∫–∏/—Ä–µ–π–∑–∞
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ = —É–¥–≤–æ–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É
      // –ü—Ä–∏–º–µ—Ä: –±–µ—Ç $50 ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ –¥–æ $100 (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ $50)
      lastRaiseSize = currentBet;
    }
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ = —Ç–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ + —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    const minimumRaiseTotal = currentBet + lastRaiseSize;
    
    console.log(`üí∞ –†–∞—Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π–∑–∞:`, {
      heroBet: `$${heroBet.toFixed(2)}`,
      opponentBet: `$${opponentBet.toFixed(2)}`,
      currentBet: `$${currentBet.toFixed(2)}`,
      lastRaiseSize: `$${lastRaiseSize.toFixed(2)}`,
      minimumRaiseTotal: `$${minimumRaiseTotal.toFixed(2)}`
    });
    
    return minimumRaiseTotal;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–æ–ª–∞
  handleTableWheel(event, tableId) {
    event.preventDefault();
    
    const inputElement = document.getElementById(`sizing-input-${tableId}`);
    if (!inputElement) return;
    
    const currentValue = parseFloat(inputElement.value) || 0;
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∞–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const tableInfo = this.tables.get(tableId);
    if (!tableInfo) return;
    
    const handHistoryInfo = this.parseHandHistoryInfo(tableInfo);
    const bigBlindAmount = handHistoryInfo.bigBlind;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: BB –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —à–∞–≥–∏
    let step = bigBlindAmount;
    if (currentValue > bigBlindAmount * 10) {
      step = bigBlindAmount * 2; // –®–∞–≥ –≤ 2BB –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º
    }
    if (currentValue > bigBlindAmount * 50) {
      step = bigBlindAmount * 5; // –®–∞–≥ –≤ 5BB –¥–ª—è –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const delta = event.deltaY > 0 ? -step : step;
    let newValue = currentValue + delta;
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const heroPlayer = tableInfo.players.find(p => p.id === this.userId);
    const opponent = tableInfo.players.find(p => p.id !== this.userId);
    const heroCurrentBet = (heroPlayer?.bet || 0) / 100;
    const opponentCurrentBet = (opponent?.bet || 0) / 100;
    const maxBet = Math.max(heroCurrentBet, opponentCurrentBet, 0);
    const canCheck = heroCurrentBet === maxBet;
    
    let minimumValue;
    if (canCheck) {
      // –ï—Å–ª–∏ –º–æ–∂–µ–º —á–µ–∫–Ω—É—Ç—å, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ = BB
      minimumValue = bigBlindAmount;
    } else {
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ–π–∑–∏—Ç—å, –º–∏–Ω–∏–º—É–º = –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
      minimumValue = this.calculateMinimumRaise(tableId);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ —Å—Ç–µ–∫–æ–º –∏–≥—Ä–æ–∫–∞)
    const heroStack = (heroPlayer?.stack || 0) / 100; // –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    const maxPossibleBet = heroStack + heroCurrentBet; // –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–µ–∫
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º)
    newValue = Math.max(minimumValue, newValue);
    newValue = Math.min(maxPossibleBet, newValue);
    
    // –û–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ —Ü–µ–Ω—Ç–æ–≤
    newValue = Math.round(newValue * 100) / 100;
    
    inputElement.value = newValue.toFixed(2);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏
    this.updateBetButtonText(tableId, newValue, canCheck);
    
    console.log(`üñ±Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –∫–æ–ª–µ—Å–∏–∫–æ–º –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}: $${newValue.toFixed(2)} (—à–∞–≥: $${step.toFixed(2)}, –º–∞–∫—Å: $${maxPossibleBet.toFixed(2)})`);
  }

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–°–¢–û–†–ò–ï–ô –î–ï–ô–°–¢–í–ò–ô =====
  initializeActionTracker(tableId) {
    if (!this.actionHistory.has(tableId)) {
      const tracker = new ActionTracker();
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
      tracker.separatorAdded4 = false;
      tracker.separatorAdded5 = false;
      tracker.lastCardCount = 0;
      this.actionHistory.set(tableId, tracker);
    }
  }

  resetActionTracker(tableId) {
    console.log(`üîÑ –°–±—Ä–æ—Å —Ç—Ä–µ–∫–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
    
    if (this.actionHistory.has(tableId)) {
      this.actionHistory.get(tableId).reset();
    } else {
      this.initializeActionTracker(tableId);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    const tracker = this.actionHistory.get(tableId);
    if (tracker) {
      tracker.separatorAdded4 = false;
      tracker.separatorAdded5 = false;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (tableElement) {
      const heroActionsElement = tableElement.querySelector('.hero-actions-display .actions-text');
      const opponentActionsElement = tableElement.querySelector('.opponent-actions-display .actions-text');
      
      if (heroActionsElement) {
        heroActionsElement.textContent = '';
        console.log(`üßπ –û—á–∏—â–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≥–µ—Ä–æ—è –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
      }
      
      if (opponentActionsElement) {
        opponentActionsElement.textContent = '';
        console.log(`üßπ –û—á–∏—â–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
      }
    }
    
    this.updateActionDisplays(tableId);
  }

  addSeparatorToActions(tableId) {
    console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
    const tracker = this.actionHistory.get(tableId);
    if (tracker) {
      tracker.addSeparator();
      // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
      this.updateActionDisplays(tableId);
    }
  }

  recordAction(tableId, playerId, action, amount) {
    console.log(`üéØ –í–´–ó–û–í recordAction: tableId=${tableId}, playerId=${playerId}, action=${action}, amount=${amount}`);
    
    this.initializeActionTracker(tableId);
    const tracker = this.actionHistory.get(tableId);
    
    if (!tracker) {
      console.log(`‚ùå –¢—Ä–µ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≥–µ—Ä–æ—è
    const isHero = playerId === this.userId;
    console.log(`üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è: playerId=${playerId}, this.userId=${this.userId}, isHero=${isHero}`);
    
    tracker.addAction(playerId, action, amount, isHero);
    this.updateActionDisplays(tableId);
    
    console.log(`üìù –ó–ê–ü–ò–°–ê–ù–û –î–ï–ô–°–¢–í–ò–ï: ${action} ${amount} –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} (–≥–µ—Ä–æ–π: ${isHero})`);
  }

  checkAndUpdateStreet(tableId, newStreet) {
    console.log(`üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —É–ª–∏—Ü—ã –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}: –Ω–æ–≤–∞—è —É–ª–∏—Ü–∞ = ${newStreet}`);
    this.initializeActionTracker(tableId);
    const tracker = this.actionHistory.get(tableId);
    
    if (tracker.currentStreet !== newStreet) {
      console.log(`üîÑ –°–º–µ–Ω–∞ —É–ª–∏—Ü—ã: ${tracker.currentStreet} ‚Üí ${newStreet}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —É–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è)
      if (tracker.heroActions[tracker.currentStreet].length > 0 || 
          tracker.opponentActions[tracker.currentStreet].length > 0) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —É–ª–∏—Ü—ã`);
        tracker.addSeparator();
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —É–ª–∏—Ü—É
      tracker.setStreet(newStreet);
      this.updateActionDisplays(tableId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã
      this.showNotification(`–ù–æ–≤–∞—è —É–ª–∏—Ü–∞: ${this.getStreetName(newStreet)}`, 'info');
    }
  }

  setStreet(tableId, street) {
    this.initializeActionTracker(tableId);
    const tracker = this.actionHistory.get(tableId);
    tracker.setStreet(street);
    
    console.log(`üõ£Ô∏è –£–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${street} –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
  }

  updateActionDisplays(tableId) {
    console.log(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
    
    const tableElement = document.querySelector(`[data-table-id="${tableId}"]`);
    if (!tableElement) {
      console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–ª–∞ ${tableId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const tracker = this.actionHistory.get(tableId);
    if (!tracker) {
      console.log(`‚ùå –¢—Ä–µ–∫–µ—Ä –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≥–µ—Ä–æ—è
    const heroActionsElement = tableElement.querySelector('.hero-actions-display .actions-text');
    console.log(`üéØ –ü–æ–∏—Å–∫ –≥–µ—Ä–æ—è actions element:`, !!heroActionsElement);
    if (heroActionsElement) {
      const heroActionsString = tracker.getActionsString(true);
      console.log(`üéØ –°—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–µ—Ä–æ—è: "${heroActionsString}"`);
      heroActionsElement.innerHTML = heroActionsString || '';
    } else {
      console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç .hero-actions-display .actions-text –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    const opponentActionsElement = tableElement.querySelector('.opponent-actions-display .actions-text');
    console.log(`üéØ –ü–æ–∏—Å–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ actions element:`, !!opponentActionsElement);
    if (opponentActionsElement) {
      const opponentActionsString = tracker.getActionsString(false);
      console.log(`üéØ –°—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: "${opponentActionsString}"`);
      opponentActionsElement.innerHTML = opponentActionsString || '';
    } else {
      console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç .opponent-actions-display .actions-text –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–æ–ª–∞ ${tableId}`);
    }
  }

  // ===== –ê–ù–ò–ú–ê–¶–ò–ò –û–ß–ï–†–ï–î–ò –•–û–î–ê –í –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†–ï =====

  setPlayerTurnAnimation(playerId, isActive = true) {
    console.log(`üé¨ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}, –∞–∫—Ç–∏–≤–Ω–∞—è: ${isActive}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    this.clearAllPlayerTurnAnimations();
    
    if (!isActive) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const tables = document.querySelectorAll('.multiplayer-table');
    
    tables.forEach(table => {
      const tableId = table.dataset.tableId;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ—Ä–æ—è
      const heroSection = table.querySelector('.player-section.hero-green');
      const heroPlayer = this.findPlayerInTableInfo(tableId, 'hero');
      
      if (heroPlayer && heroPlayer.id === playerId && heroSection) {
        heroSection.classList.add('active-turn');
        console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥–µ—Ä–æ—è –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}`);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
      const opponentArea = table.querySelector('.opponent-area-compact');
      const opponentPlayer = this.findPlayerInTableInfo(tableId, 'opponent');
      
      if (opponentPlayer && opponentPlayer.id === playerId && opponentArea) {
        opponentArea.classList.add('active-turn');
        console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${tableId}`);
        return;
      }
    });
  }

  clearAllPlayerTurnAnimations() {
    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
    const containers = document.querySelectorAll(
      '.opponent-area-compact.active-turn, .player-section.hero-green.active-turn'
    );
    
    containers.forEach(container => {
      container.classList.remove('active-turn');
    });
    
    console.log(`üé¨ –û—á–∏—â–µ–Ω—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ (${containers.length} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)`);
  }

  updatePlayerTurnAnimationsFromTableInfo(tableInfo) {
    console.log('üé¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –æ—á–µ—Ä–µ–¥–∏ —Ö–æ–¥–∞:', {
      currentPlayer: tableInfo.currentPlayer,
      actionRequired: tableInfo.actionRequired
    });
    
    if (tableInfo.currentPlayer && tableInfo.actionRequired) {
      this.setPlayerTurnAnimation(tableInfo.currentPlayer, true);
    } else {
      this.clearAllPlayerTurnAnimations();
    }
  }

  findPlayerInTableInfo(tableId, role) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –∏–∑ –∫–µ—à–∞ —Ç–∞–±–ª–∏—Ü
    const tableData = this.sessionInfo?.tables?.find(t => t.tableId === tableId);
    if (!tableData) return null;
    
    if (role === 'hero') {
      return tableData.players.find(p => p.id === this.currentUserId);
    } else if (role === 'opponent') {
      return tableData.players.find(p => p.id !== this.currentUserId);
    }
    
    return null;
  }
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function copySessionCode(sessionId) {
  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  navigator.clipboard.writeText(sessionId).then(() => {
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    const button = event.target.closest('button');
    const originalText = button.innerHTML;
    
    button.innerHTML = '<i class="fas fa-check"></i> –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    button.style.background = 'linear-gradient(135deg, #4ade80, #06d6a0)';
    button.style.color = '#0a0a0a';
    
    setTimeout(() => {
      button.innerHTML = originalText;
      button.style.background = '';
      button.style.color = '';
    }, 2000);
    
    showNotification(`–ö–æ–¥ —Å–µ—Å—Å–∏–∏ ${sessionId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`, 'success');
  }).catch(err => {
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const textArea = document.createElement('textarea');
    textArea.value = sessionId;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    showNotification(`–ö–æ–¥ —Å–µ—Å—Å–∏–∏ ${sessionId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`, 'success');
  });
}

function showJoinSessionDialog() {
  const sessionId = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏:');
  if (sessionId) {
    const playerName = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:') || 'Player 2';
    multiplayerClient.joinSession(sessionId, playerName);
  }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
let multiplayerClient;

document.addEventListener('DOMContentLoaded', function() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∫–ª–∏–µ–Ω—Ç
  multiplayerClient = new MultiplayerClient();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  initializeDragAndDrop();
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
  addMultiplayerStyles();
  
  // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–∞—Ç—Ä–∏—Ü—ã —Ä—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  // (—Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ script.js –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
  setTimeout(() => {
    if (typeof generateHandMatrices === 'function') {
      console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü —Ä—É–∫ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞...');
      generateHandMatrices();
      updateRangeSliders();
      console.log('‚úÖ –ú–∞—Ç—Ä–∏—Ü—ã —Ä—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü —Ä—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  }, 100);
});

function addMultiplayerStyles() {
  const style = document.createElement('style');
  style.textContent = `
    /* –°—Ç–∏–ª–∏ –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –º–µ–Ω—é */
    .session-menu {
      box-shadow: var(--shadow-lg);
    }
    
    .session-menu-content h3 {
      margin: 0 0 15px 0;
      color: var(--accent-primary);
      font-size: 1rem;
      font-weight: 600;
    }
    
    .session-options {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .session-code-section {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    
    .session-label {
      color: var(--text-secondary);
      font-size: 0.8rem;
      font-weight: 500;
    }
    
    .session-code-compact {
      background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
      color: white;
      padding: 8px 12px;
      border-radius: 6px;
      font-family: 'Courier New', monospace;
      font-weight: bold;
      font-size: 1.1rem;
      letter-spacing: 0.1em;
      text-align: center;
    }
    
    .session-actions {
      display: flex;
      flex-direction: column;
      gap: 8px;
      padding-top: 10px;
      border-top: 1px solid var(--border-primary);
    }
    
    .btn-sm {
      padding: 8px 12px;
      font-size: 0.85rem;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .btn-sm:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
    
    .start-game-btn {
      background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary)) !important;
      border: none !important;
      color: white !important;
    }
    
    .start-game-btn:hover {
      background: linear-gradient(135deg, var(--accent-secondary), var(--accent-primary)) !important;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–æ–ª–æ–≤ */
    .multiplayer-table .table-header {
      border-bottom: 2px solid var(--accent-primary);
      background: rgba(74, 222, 128, 0.05);
    }
    
    .multiplayer-table .table-header h3 {
      color: var(--accent-primary);
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç */
    .player-card.filled,
    .community-card.filled {
      animation: cardFlip 0.3s ease;
    }
    
    @keyframes cardFlip {
      0% { 
        transform: rotateY(-90deg);
        opacity: 0;
      }
      50% {
        transform: rotateY(0deg);
        opacity: 0.5;
      }
      100% { 
        transform: rotateY(0deg);
        opacity: 1;
      }
    }
    
    /* –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏–≥—Ä–æ–∫–æ–≤ */
    .player-section.active {
      box-shadow: 0 0 15px rgba(74, 222, 128, 0.5);
      border-color: var(--accent-primary);
    }
    
    .player-section.folded {
      opacity: 0.5;
      filter: grayscale(100%);
    }
    
    /* All-in —ç—Ñ—Ñ–µ–∫—Ç—ã */
    .all-in-overlay {
      animation: allInAppear 0.5s ease-out;
    }
    
    .all-in-content {
      text-align: center;
      color: white;
      background: rgba(0, 0, 0, 0.8);
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }
    
    .all-in-icon {
      font-size: 3rem;
      margin-bottom: 10px;
      animation: pulse 1s infinite;
    }
    
    .all-in-content h3 {
      margin: 10px 0;
      font-size: 1.5rem;
      color: #ffd700;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }
    
    .all-in-progress {
      width: 100%;
      height: 4px;
      background: rgba(255, 255, 255, 0.3);
      border-radius: 2px;
      margin-top: 15px;
      overflow: hidden;
    }
    
    .progress-bar {
      height: 100%;
      background: linear-gradient(90deg, #ffd700, #ffed4e);
      width: 0%;
      animation: progressFill 3s ease-out forwards;
    }
    
    .new-card-animation {
      animation: cardGlow 1s ease-out;
    }
    
    .all-in-message {
      text-align: center;
      padding: 15px;
      background: rgba(255, 140, 0, 0.1);
      border: 2px solid #ff8c00;
      border-radius: 8px;
      color: #ff8c00;
    }
    
    .all-in-message i {
      font-size: 1.2rem;
      margin-bottom: 5px;
      display: block;
    }
    
    @keyframes allInAppear {
      0% {
        opacity: 0;
        transform: scale(0.8);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.1);
      }
    }
    
    @keyframes progressFill {
      0% {
        width: 0%;
      }
      100% {
        width: 100%;
      }
    }
    
    @keyframes cardGlow {
      0% {
        box-shadow: 0 0 0 rgba(255, 215, 0, 0);
      }
      50% {
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
      }
      100% {
        box-shadow: 0 0 0 rgba(255, 215, 0, 0);
      }
    }
    
    @keyframes cardFlash {
      0% {
        opacity: 0;
        transform: scale(0.8);
      }
      50% {
        opacity: 0.7;
        transform: scale(1.05);
      }
      100% {
        opacity: 0;
        transform: scale(1);
      }
    }
  `;
  
  document.head.appendChild(style);
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ú–ü–ê–ö–¢–ù–û–ì–û –ú–ï–ù–Æ =====
function toggleSettingsPanel() {
  const panel = document.querySelector('.settings-panel');
  const isActive = panel.classList.contains('active');
  
  if (isActive) {
    panel.classList.remove('active');
  } else {
    panel.classList.add('active');
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag & drop
    initializeDragAndDrop();
  }
}

function showMultiplayerMenu() {
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
  const menu = document.createElement('div');
  menu.className = 'multiplayer-menu';
  menu.innerHTML = `
    <div class="multiplayer-menu-content">
      <h3><i class="fas fa-users"></i> –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</h3>
      <div class="multiplayer-options">
        <button class="btn btn-primary" onclick="showCreateSessionDialog(); closeMultiplayerMenu()">
          <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
        </button>
        <button class="btn btn-secondary" onclick="showJoinSessionDialog(); closeMultiplayerMenu()">
          <i class="fas fa-sign-in-alt"></i> –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        </button>
      </div>
    </div>
  `;
  
  menu.style.cssText = `
    position: fixed;
    top: 70px;
    left: 15px;
    background: rgba(0, 0, 0, 0.95);
    border: 2px solid var(--accent-primary);
    border-radius: 8px;
    padding: 15px;
    z-index: 1001;
    backdrop-filter: blur(10px);
    min-width: 200px;
  `;
  
  document.body.appendChild(menu);
  
  // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
  setTimeout(() => {
    document.addEventListener('click', function closeOnOutside(e) {
      if (!menu.contains(e.target) && !e.target.closest('.menu-icon[data-tooltip="–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä"]')) {
        closeMultiplayerMenu();
        document.removeEventListener('click', closeOnOutside);
      }
    });
  }, 100);
}

function closeMultiplayerMenu() {
  const menu = document.querySelector('.multiplayer-menu');
  if (menu) {
    menu.remove();
  }
}

function showCreateSessionDialog() {
  const playerName = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:') || 'Player 1';
  if (playerName) {
    multiplayerClient.createSession(playerName);
  }
}

function showSessionInfo() {
  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏–∏
  const sessionId = multiplayerClient.sessionId;
  if (!sessionId) return;
  
  const menu = document.createElement('div');
  menu.className = 'session-menu';
  menu.innerHTML = `
    <div class="session-menu-content">
      <h3><i class="fas fa-wifi"></i> –°–µ—Å—Å–∏—è: ${sessionId}</h3>
      <div class="session-options">
        <div class="session-code-section">
          <span class="session-label">–ö–æ–¥ —Å–µ—Å—Å–∏–∏:</span>
          <div class="session-code-compact">${sessionId}</div>
          <button class="btn btn-sm btn-secondary" onclick="copySessionCode('${sessionId}'); closeSessionMenu()">
            <i class="fas fa-copy"></i> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
        <div class="session-actions">
          ${multiplayerClient.isHost ? `
            <button class="btn btn-sm btn-primary start-game-btn" onclick="multiplayerClient.startGame(); closeSessionMenu()">
              <i class="fas fa-play"></i> –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
            </button>
          ` : ''}
          <button class="btn btn-sm btn-danger" onclick="leaveSession(); closeSessionMenu()">
            <i class="fas fa-sign-out-alt"></i> –ü–æ–∫–∏–Ω—É—Ç—å —Å–µ—Å—Å–∏—é
          </button>
        </div>
      </div>
    </div>
  `;
  
  menu.style.cssText = `
    position: fixed;
    top: 70px;
    left: 15px;
    background: rgba(0, 0, 0, 0.95);
    border: 2px solid var(--accent-primary);
    border-radius: 8px;
    padding: 15px;
    z-index: 1001;
    backdrop-filter: blur(10px);
    min-width: 250px;
  `;
  
  document.body.appendChild(menu);
  
  // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
  setTimeout(() => {
    document.addEventListener('click', function closeOnOutside(e) {
      if (!menu.contains(e.target) && !e.target.closest('.session-icon')) {
        closeSessionMenu();
        document.removeEventListener('click', closeOnOutside);
      }
    });
  }, 100);
}

function closeSessionMenu() {
  const menu = document.querySelector('.session-menu');
  if (menu) {
    menu.remove();
  }
}

function leaveSession() {
  if (multiplayerClient && multiplayerClient.sessionId) {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    multiplayerClient.sessionId = null;
    multiplayerClient.isHost = false;
    updateSessionIcon(false);
    showNotification('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Å—Å–∏—é', 'info');
  }
}

function updateSessionIcon(sessionActive, sessionId = null) {
  const sessionIcon = document.querySelector('.session-icon');
  const exportIcon = document.querySelector('.export-icon');
  const filesIcon = document.querySelector('.files-icon');
  
  if (sessionActive && sessionId) {
    sessionIcon.style.display = 'flex';
    sessionIcon.dataset.tooltip = `–°–µ—Å—Å–∏—è: ${sessionId}`;
    sessionIcon.classList.add('active');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (exportIcon) {
      exportIcon.style.display = 'flex';
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (filesIcon) {
      filesIcon.style.display = 'flex';
    }
  } else {
    sessionIcon.style.display = 'none';
    sessionIcon.classList.remove('active');
    
    // –°–∫—Ä—ã—Ç—å –∏–∫–æ–Ω–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    if (exportIcon) {
      exportIcon.style.display = 'none';
    }
    
    // –°–∫—Ä—ã—Ç—å –∏–∫–æ–Ω–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∫–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    if (filesIcon) {
      filesIcon.style.display = 'none';
    }
  }
}

function exportAllTables() {
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å HandHistory –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
  if (!multiplayerClient || !multiplayerClient.sessionId) {
    showNotification('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', 'warning');
    return;
  }
  
  const tables = document.querySelectorAll('.poker-table[data-table-id]');
  if (tables.length === 0) {
    showNotification('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
    return;
  }
  
  tables.forEach(table => {
    const tableId = parseInt(table.dataset.tableId);
    if (tableId) {
      multiplayerClient.exportHandHistory(tableId);
    }
  });
  
  showNotification(`–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${tables.length} —Å—Ç–æ–ª–æ–≤`, 'success');
}

function openHandHistoryManager() {
  // –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ HandHistory –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  window.open('/handhistory-manager-auth.html', '_blank');
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function initializeDragAndDrop() {
  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
  toggleDragMode(true);
}

function toggleDragMode(enabled) {
  const draggableElements = document.querySelectorAll('.pot-display, .board-area, .opponent-area, .hero-area, .table-actions, .opponent-bet-display, .hero-bet-display');
  
  draggableElements.forEach(element => {
    if (enabled) {
      makeDraggable(element);
      element.style.cursor = 'move';
      element.classList.add('draggable-active');
    } else {
      removeDraggable(element);
      element.style.cursor = '';
      element.classList.remove('draggable-active');
    }
  });
}

function makeDraggable(element) {
  let isDragging = false;
  let startX, startY, initialX, initialY;
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const savedPosition = getSavedPosition(element);
  if (savedPosition) {
    element.style.position = 'absolute';
    element.style.left = savedPosition.x + 'px';
    element.style.top = savedPosition.y + 'px';
  }
  
  element.addEventListener('mousedown', startDrag);
  
  function startDrag(e) {
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    
    const rect = element.getBoundingClientRect();
    initialX = rect.left;
    initialY = rect.top;
    
    element.style.position = 'absolute';
    element.style.zIndex = '9999';
    element.classList.add('dragging');
    
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);
    e.preventDefault();
  }
  
  function drag(e) {
    if (!isDragging) return;
    
    const deltaX = e.clientX - startX;
    const deltaY = e.clientY - startY;
    
    const newX = initialX + deltaX;
    const newY = initialY + deltaY;
    
    element.style.left = newX + 'px';
    element.style.top = newY + 'px';
  }
  
  function stopDrag() {
    if (!isDragging) return;
    
    isDragging = false;
    element.style.zIndex = '';
    element.classList.remove('dragging');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    saveElementPosition(element);
    
    document.removeEventListener('mousemove', drag);
    document.removeEventListener('mouseup', stopDrag);
    
    showNotification('–ü–æ–∑–∏—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
  }
}

function removeDraggable(element) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π drag & drop
  element.removeEventListener('mousedown', startDrag);
}

function saveElementPosition(element) {
  const rect = element.getBoundingClientRect();
  const elementId = getElementId(element);
  
  const position = {
    x: rect.left,
    y: rect.top
  };
  
  localStorage.setItem(`element_position_${elementId}`, JSON.stringify(position));
}

function getSavedPosition(element) {
  const elementId = getElementId(element);
  const saved = localStorage.getItem(`element_position_${elementId}`);
  return saved ? JSON.parse(saved) : null;
}

function getElementId(element) {
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
  if (element.classList.contains('pot-display')) return 'pot-display';
  if (element.classList.contains('board-area')) return 'board-area';
  if (element.classList.contains('opponent-area')) return 'opponent-area';
  if (element.classList.contains('hero-area')) return 'hero-area';
  if (element.classList.contains('table-actions')) return 'table-actions';
  if (element.classList.contains('opponent-bet-display')) return 'opponent-bet-display';
  if (element.classList.contains('hero-bet-display')) return 'hero-bet-display';
  return 'unknown';
}

// ===== –ö–õ–ê–°–° –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –î–ï–ô–°–¢–í–ò–ô –ò–ì–†–û–ö–û–í =====
class ActionTracker {
  constructor() {
    this.reset();
  }

  reset() {
    this.heroActions = {
      flop: [],
      turn: [],
      river: []
    };
    this.opponentActions = {
      flop: [],
      turn: [],
      river: []
    };
    this.currentStreet = 'flop';
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    this.lastRecordedActions = new Map();
  }

  setStreet(street) {
    const oldStreet = this.currentStreet;
    this.currentStreet = street;
    console.log(`üõ£Ô∏è ActionTracker: —É–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldStreet} –Ω–∞ ${street}`);
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã
    this.lastRecordedActions.clear();
  }

  addSeparator() {
    console.log(`‚ûï ActionTracker: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è "|" –Ω–∞ —É–ª–∏—Ü–µ ${this.currentStreet}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫ —Ç–µ–∫—É—â–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü–µ
    const hasHeroActions = this.heroActions[this.currentStreet] && this.heroActions[this.currentStreet].length > 0;
    const hasOpponentActions = this.opponentActions[this.currentStreet] && this.opponentActions[this.currentStreet].length > 0;
    
    console.log(`üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è:`, {
      currentStreet: this.currentStreet,
      hasHeroActions,
      hasOpponentActions,
      heroActions: this.heroActions[this.currentStreet],
      opponentActions: this.opponentActions[this.currentStreet]
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü–µ
    if (hasHeroActions) {
      this.heroActions[this.currentStreet].push('|');
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫ –¥–µ–π—Å—Ç–≤–∏—è–º –≥–µ—Ä–æ—è`);
    }
    if (hasOpponentActions) {
      this.opponentActions[this.currentStreet].push('|');
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫ –¥–µ–π—Å—Ç–≤–∏—è–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞`);
    }
  }

  addAction(playerId, action, amount, isHero) {
    const actionCode = this.getActionCode(action, amount);
    const playerActions = isHero ? this.heroActions : this.opponentActions;
    
    console.log(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:`, {
      playerId,
      action,
      amount,
      actionCode,
      isHero,
      currentStreet: this.currentStreet
    });
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    const actionKey = `${playerId}_${this.currentStreet}_${action}_${amount}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
    if (this.lastRecordedActions.has(actionKey)) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionCode} –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
      return;
    }
    
    if (playerActions[this.currentStreet]) {
      playerActions[this.currentStreet].push(actionCode);
      this.lastRecordedActions.set(actionKey, true);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionCode} –¥–ª—è ${isHero ? '–≥–µ—Ä–æ—è' : '–æ–ø–ø–æ–Ω–µ–Ω—Ç–∞'} (${playerId}) –Ω–∞ —É–ª–∏—Ü–µ ${this.currentStreet}`);
      console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ ${this.currentStreet}:`, playerActions[this.currentStreet]);
    } else {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–ª–∏—Ü–∞: ${this.currentStreet}`);
    }
  }

  getActionCode(action, amount) {
    switch (action) {
      case 'check':
        return '<span class="action-check">Check</span>';
      case 'call':
        return `<span class="action-call">Call ${this.formatAmount(amount)}</span>`;
      case 'bet':
        return `<span class="action-bet">Bet ${this.formatAmount(amount)}</span>`;
      case 'raise':
        return `<span class="action-raise">Raise ${this.formatAmount(amount)}</span>`;
      case 'fold':
        return '<span class="action-fold">Fold</span>';
      case 'all-in':
        return `<span class="action-bet">All-in ${this.formatAmount(amount)}</span>`;
      default:
        return `<span class="action-check">${action}</span>`;
    }
  }

  formatAmount(amount) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
    const dollars = amount / 100;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Å–∏–º–≤–æ–ª–æ–º –¥–æ–ª–ª–∞—Ä–∞
    if (dollars >= 1000) {
      return `$${(dollars / 1000).toFixed(1).replace('.0', '')}k`;
    } else if (dollars % 1 === 0) {
      return `$${dollars}`;
    } else {
      return `$${dollars.toFixed(2).replace(/\.?0+$/, '')}`;
    }
  }

  getActionsString(isHero) {
    const playerActions = isHero ? this.heroActions : this.opponentActions;
    const allActions = [];

    console.log(`üéØ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è ${isHero ? '–≥–µ—Ä–æ—è' : '–æ–ø–ø–æ–Ω–µ–Ω—Ç–∞'}:`, {
      flop: playerActions.flop,
      turn: playerActions.turn,
      river: playerActions.river
    });

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    if (playerActions.flop.length > 0) {
      allActions.push(...playerActions.flop);
    }
    if (playerActions.turn.length > 0) {
      allActions.push(...playerActions.turn);
    }
    if (playerActions.river.length > 0) {
      allActions.push(...playerActions.river);
    }

    // –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    const result = allActions.join(' ');
    console.log(`üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π: "${result}"`);
    return result;
  }
} 