const express = require('express');
const { createServer } = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const { v4: uuidv4 } = require('uuid');
const moment = require('moment');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_URL || "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet({
  contentSecurityPolicy: false // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
}));
app.use(compression());
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// ===== –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ =====
const CARD_RANKS = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2'];
const CARD_SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const SUIT_SYMBOLS = ['s', 'h', 'd', 'c'];

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ò–ê–ü–ê–ó–û–ù–ê–ú–ò –†–£–ö =====

// –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "AKs", "QQ", "ATo")
function parseHandString(handStr) {
  if (handStr.length === 2) {
    // –ü–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "AA", "KK")
    return {
      rank1: handStr[0],
      rank2: handStr[1],
      suited: null // –î–ª—è –ø–∞—Ä suited –Ω–µ –≤–∞–∂–µ–Ω
    };
  } else if (handStr.length === 3) {
    // –î–≤–µ –∫–∞—Ä—Ç—ã —Å suited/offsuit (–Ω–∞–ø—Ä–∏–º–µ—Ä: "AKs", "ATo")
    return {
      rank1: handStr[0],
      rank2: handStr[1],
      suited: handStr[2] === 's'
    };
  }
  return null;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
function createCard(rank, suit) {
  const suitIndex = CARD_SUITS.indexOf(suit);
  return {
    rank,
    suit,
    symbol: SUIT_SYMBOLS[suitIndex] || 's',
    value: rank + (SUIT_SYMBOLS[suitIndex] || 's')
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä—É–∫–∏
function generateCardsForHand(handStr, deck) {
  const hand = parseHandString(handStr);
  if (!hand) return [];

  const possibleCards = [];
  
  if (hand.rank1 === hand.rank2) {
    // –ü–∞—Ä–∞ - –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ä–∞–Ω–≥–∞
    for (let i = 0; i < CARD_SUITS.length; i++) {
      for (let j = i + 1; j < CARD_SUITS.length; j++) {
        const card1 = createCard(hand.rank1, CARD_SUITS[i]);
        const card2 = createCard(hand.rank2, CARD_SUITS[j]);
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ
        if (isCardInDeck(card1, deck) && isCardInDeck(card2, deck)) {
          possibleCards.push([card1, card2]);
        }
      }
    }
  } else {
    // –ù–µ –ø–∞—Ä–∞
    for (let suit1 = 0; suit1 < CARD_SUITS.length; suit1++) {
      for (let suit2 = 0; suit2 < CARD_SUITS.length; suit2++) {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å suited/offsuit –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        const isSuited = suit1 === suit2;
        if (hand.suited !== null && hand.suited !== isSuited) {
          continue;
        }

        const card1 = createCard(hand.rank1, CARD_SUITS[suit1]);
        const card2 = createCard(hand.rank2, CARD_SUITS[suit2]);
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ
        if (isCardInDeck(card1, deck) && isCardInDeck(card2, deck)) {
          possibleCards.push([card1, card2]);
        }
      }
    }
  }
  
  return possibleCards;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ
function isCardInDeck(card, deck) {
  return deck.some(deckCard => 
    deckCard.rank === card.rank && deckCard.suit === card.suit
  );
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
function removeCardFromDeck(card, deck) {
  const index = deck.findIndex(deckCard => 
    deckCard.rank === card.rank && deckCard.suit === card.suit
  );
  if (index !== -1) {
    deck.splice(index, 1);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Ä—É–∫ —Å –≤–µ—Å–∞–º–∏
function generatePlayerCards(handWeights, deck) {
  console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', handWeights);
  
  if (!handWeights || Object.keys(handWeights).length === 0) {
    // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø—É—Å—Ç–æ–π, –≤–µ—Ä–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
    console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, –≤—ã–¥–∞—é —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã');
    const card1 = deck.pop();
    const card2 = deck.pop();
    return [card1, card2];
  }

  // –°–æ–∑–¥–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—É–∫
  const weightedHands = [];
  Object.entries(handWeights).forEach(([handStr, weight]) => {
    // –î–æ–±–∞–≤–∏—Ç—å —Ä—É–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –µ—ë –≤–µ—Å—É
    for (let i = 0; i < weight; i++) {
      weightedHands.push(handStr);
    }
  });

  console.log(`üé≤ –°–æ–∑–¥–∞–Ω –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ ${weightedHands.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

  if (weightedHands.length === 0) {
    console.log('‚ö†Ô∏è –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤—ã–¥–∞—é —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã');
    const card1 = deck.pop();
    const card2 = deck.pop();
    return [card1, card2];
  }

  // –ü–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä—É–∫—É
  let attempts = 0;
  const maxAttempts = 100;

  while (attempts < maxAttempts) {
    // –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä—É–∫—É –∏–∑ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    const randomIndex = Math.floor(Math.random() * weightedHands.length);
    const selectedHand = weightedHands[randomIndex];
    
    console.log(`üé≤ –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}: –≤—ã–±—Ä–∞–Ω–∞ —Ä—É–∫–∞ ${selectedHand}`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ä—É–∫–∏
    const possibleCards = generateCardsForHand(selectedHand, deck);
    
    if (possibleCards.length > 0) {
      // –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–∞—Ä—Ç
      const randomCardIndex = Math.floor(Math.random() * possibleCards.length);
      const selectedCards = possibleCards[randomCardIndex];
      
      console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ä—É–∫–∞: ${selectedCards[0].rank}${selectedCards[0].suit} ${selectedCards[1].rank}${selectedCards[1].suit} (${selectedHand})`);

      // –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
      removeCardFromDeck(selectedCards[0], deck);
      removeCardFromDeck(selectedCards[1], deck);

      return selectedCards;
    }
    
    attempts++;
  }

  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—ã –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –≤—ã–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ
  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—ã –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –≤—ã–¥–∞—é —Å–ª—É—á–∞–π–Ω—ã–µ');
  const card1 = deck.pop();
  const card2 = deck.pop();
  return [card1, card2];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ª–æ–¥—ã
function createDeck() {
  const deck = [];
  CARD_RANKS.forEach(rank => {
    CARD_SUITS.forEach((suit, index) => {
      deck.push({
        rank,
        suit,
        symbol: SUIT_SYMBOLS[index],
        value: rank + SUIT_SYMBOLS[index]
      });
    });
  });
  return shuffleDeck(deck);
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
function shuffleDeck(deck) {
  const shuffled = [...deck];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// ===== –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• =====
const activeSessions = new Map();
const activeUsers = new Map();

class PokerSession {
  constructor(sessionId, creatorId, settings) {
    this.sessionId = sessionId;
    this.creatorId = creatorId;
    this.settings = settings;
    this.players = new Map();
    this.tables = [];
    this.handHistory = [];
    this.status = 'waiting'; // waiting, playing, finished
    this.currentHandNumber = 0;
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    this.initializeTables();
  }

  initializeTables() {
    for (let i = 0; i < this.settings.tablesCount; i++) {
      this.tables.push(new PokerTable(i + 1, this.sessionId, this.settings));
    }
  }

  addPlayer(playerId, playerData) {
    this.players.set(playerId, {
      id: playerId,
      name: playerData.name || `Player ${this.players.size + 1}`,
      socketId: playerData.socketId,
      isCreator: playerId === this.creatorId,
      ready: false,
      tableAssignment: null
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª—ã
    this.assignPlayerToTable(playerId);
  }

  assignPlayerToTable(playerId) {
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Ä–æ–≤–Ω—É –ø–æ –≤—Å–µ–º —Å—Ç–æ–ª–∞–º
    const playerIndex = this.players.size - 1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (0 –∏–ª–∏ 1)
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (–∏–Ω–¥–µ–∫—Å 0), –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –≤—Å–µ —Å—Ç–æ–ª—ã –∫–∞–∫ BTN
    // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ (–∏–Ω–¥–µ–∫—Å 1), –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –≤—Å–µ —Å—Ç–æ–ª—ã –∫–∞–∫ BB
    this.tables.forEach((table, tableIndex) => {
      table.addPlayer(playerId, this.players.get(playerId));
      this.players.get(playerId).tableAssignment = table.tableId;
    });
    
    console.log(`–ò–≥—Ä–æ–∫ ${playerId} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤—Å–µ —Å—Ç–æ–ª—ã`);
  }

  startSession() {
    if (this.players.size >= 2) {
      this.status = 'playing';
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –≤—Å–µ—Ö —Å—Ç–æ–ª–∞—Ö
      this.tables.forEach(table => {
        console.log(`üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –Ω–∞ —Å—Ç–æ–ª–µ ${table.tableId}, –∏–≥—Ä–æ–∫–æ–≤: ${table.players.size}`);
        table.startNewHand();
      });
      return true;
    }
    return false;
  }

  getSessionInfo(requestingPlayerId = null) {
    return {
      sessionId: this.sessionId,
      status: this.status,
      playersCount: this.players.size,
      tablesCount: this.tables.length,
      settings: this.settings,
      tables: this.tables.map(table => table.getTableInfo(requestingPlayerId))
    };
  }

  // üíæ –ó–∞–ø–∏—Å–∞—Ç—å HandHistory –≤—Å–µ—Ö —Å—Ç–æ–ª–æ–≤ –≤ —Ñ–∞–π–ª—ã
  writeAllHandHistories() {
    console.log(`üíæ –ó–∞–ø–∏—Å—å HandHistory –¥–ª—è —Å–µ—Å—Å–∏–∏ ${this.sessionId}...`);
    
    const results = [];
    
    this.tables.forEach(table => {
      const result = {
        tableId: table.tableId,
        handsCount: table.tableHandCount,
        fileName: table.getHandHistoryFileName(),
        success: false
      };
      
      if (table.tableHandCount > 0) {
        result.success = table.writeHandHistoryToFile();
        console.log(`üìä –°—Ç–æ–ª ${table.tableId}: ${table.tableHandCount} —Ä–∞–∑–¥–∞—á, —Ñ–∞–π–ª: ${result.fileName}`);
      } else {
        console.log(`üìä –°—Ç–æ–ª ${table.tableId}: 0 —Ä–∞–∑–¥–∞—á, —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω`);
      }
      
      results.push(result);
    });
    
    const totalHands = results.reduce((sum, r) => sum + r.handsCount, 0);
    console.log(`üíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ ${totalHands} —Ä–∞–∑–¥–∞—á –≤ ${results.filter(r => r.success).length} —Ñ–∞–π–ª–æ–≤`);
    
    return results;
  }
}

class PokerTable {
  constructor(tableId, sessionId, settings) {
    this.tableId = tableId;
    this.sessionId = sessionId;
    this.settings = settings;
    this.players = new Map();
    this.deck = createDeck();
    this.communityCards = [];
    this.pot = 0;
    this.currentBet = 0;
    this.handNumber = 0;
    this.street = 'preflop'; // preflop, flop, turn, river
    this.actions = [];
    this.preflopSpot = settings.preflopSpot;
    
    // üìù –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è HandHistory –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–æ–ª–∞
    this.completedHands = []; // –ú–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á
    this.tableHandCount = 0;  // –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á –Ω–∞ —Å—Ç–æ–ª–µ
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫ –ø–æ —É–ª–∏—Ü–∞–º
    this.streetPots = {
      preflop: 0,  // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ preflopSpot
      flop: 0,     // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ñ–ª–æ–ø–µ
      turn: 0,     // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ—Ä–Ω–µ  
      river: 0     // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∏–≤–µ—Ä–µ
    };
  }

  addPlayer(playerId, playerData) {
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const playerIndex = this.players.size;
    const playerNumber = playerIndex === 0 ? 'player1' : 'player2';
    
    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let position = 'BTN'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (this.settings.playerRanges && this.settings.playerRanges.positions) {
      position = this.settings.playerRanges.positions[playerNumber] || (playerIndex === 0 ? 'BTN' : 'BB');
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∑–∏—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BTN/BB
      position = playerIndex === 0 ? 'BTN' : 'BB';
    }
    
    console.log(`üéØ –ò–≥—Ä–æ–∫ ${playerId} (${playerNumber}) –ø–æ–ª—É—á–∏–ª –ø–æ–∑–∏—Ü–∏—é: ${position}`);
    
    this.players.set(playerId, {
      id: playerId,
      name: playerData.name,
      stack: 10000, // $100.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
      position: position,
      cards: [],
      currentBet: 0,
      folded: false,
      acted: false
    });
  }

  startNewHand() {
    this.handNumber++;
    this.street = 'flop';
    this.actions = [];
    this.communityCards = [];
    this.deck = createDeck(); // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É
    
    console.log(`üéÆ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É #${this.handNumber} –Ω–∞ —Å—Ç–æ–ª–µ ${this.tableId}`);
    console.log(`üîç preflopSpot —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!this.preflopSpot}`);
    console.log(`üîç preflopSpot –¥–ª–∏–Ω–∞: ${this.preflopSpot ? this.preflopSpot.length : 0}`);
    
    // –ü–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ preflopSpot –ü–ï–†–ï–î —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    const handHistoryInfo = this.parseHandHistoryInfo();
    
    console.log(`üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - –±–∞–Ω–∫: $${handHistoryInfo.initialPot}, —Å—Ç–µ–∫: $${handHistoryInfo.effectiveStack}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫–∏ –ø–æ —É–ª–∏—Ü–∞–º
    this.streetPots = {
      preflop: handHistoryInfo.initialPot * 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—ã
      flop: 0,
      turn: 0,
      river: 0
    };
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ—Ñ–ª–æ–ø–∞
    this.pot = this.streetPots.preflop;
    this.currentBet = 0;
    
    console.log(`üí∞ –ë–∞–Ω–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ—Ñ–ª–æ–ø–∞: $${handHistoryInfo.initialPot} (${this.pot} —Ü–µ–Ω—Ç–æ–≤)`);
    console.log(`üìä –ë–∞–Ω–∫–∏ –ø–æ —É–ª–∏—Ü–∞–º:`, {
      preflop: `$${(this.streetPots.preflop / 100).toFixed(2)}`,
      flop: `$${(this.streetPots.flop / 100).toFixed(2)}`,
      turn: `$${(this.streetPots.turn / 100).toFixed(2)}`,
      river: `$${(this.streetPots.river / 100).toFixed(2)}`
    });
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–µ–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ hand history –¥–∞–Ω–Ω—ã—Ö
    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ hand history...`);
    this.players.forEach((player, index) => {
      player.folded = false;
      player.currentBet = 0;
      player.acted = false; // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—è
      player.cards = [];
      
      // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–µ–∫ –∏–∑ handHistoryInfo.effectiveStack (–∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      const targetStack = handHistoryInfo.effectiveStack && handHistoryInfo.effectiveStack > 0 
        ? handHistoryInfo.effectiveStack 
        : 100.00; // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ $100
        
      const oldStack = player.stack;
      player.stack = Math.round(targetStack * 100); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—ã
      console.log(`üí∞ –°—Ç–µ–∫ –∏–≥—Ä–æ–∫–∞ ${player.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å $${(oldStack / 100).toFixed(2)} –Ω–∞ $${targetStack.toFixed(2)} (${player.stack} —Ü–µ–Ω—Ç–æ–≤)`);
    });
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å HandHistory
    this.createHandHistoryEntry();
    
    // –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º –∏ —Ñ–ª–æ–ø
    this.dealPlayerCards();
    this.dealFlop();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–∏ –Ω–∞ —Ñ–ª–æ–ø–µ
    this.initializeFlopBetting();
    
    console.log(`üéÆ –†–∞–∑–¥–∞—á–∞ #${this.handNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${this.tableId}`);
    console.log(`üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —É–ª–∏—Ü–∞=${this.street}, –±–∞–Ω–∫=$${(this.pot / 100).toFixed(2)}, —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞=$${(this.currentBet / 100).toFixed(2)}`);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–∏ –Ω–∞ —Ñ–ª–æ–ø–µ
  initializeFlopBetting() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤ –Ω–∞ —Ñ–ª–æ–ø–µ');
    
    // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ—Ä–≥–∞–º
    this.players.forEach(player => {
      player.acted = false;
      player.currentBet = 0;
    });
    
    this.currentBet = 0;
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞
    this.notifyPlayersOfTableUpdate('–¢–æ—Ä–≥–∏ –Ω–∞ —Ñ–ª–æ–ø–µ –Ω–∞—á–∞–ª–∏—Å—å');
    
    console.log('‚úÖ –¢–æ—Ä–≥–∏ –Ω–∞ —Ñ–ª–æ–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –æ–∂–∏–¥–∞—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤');
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞
  notifyPlayersOfTableUpdate(message = '') {
    if (!this.sessionId) return;
    
    const session = activeSessions.get(this.sessionId);
    if (!session) return;

    console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞ ${this.tableId}: ${message}`);

    session.players.forEach((player, playerId) => {
      if (this.players.has(playerId)) {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('table-updated', {
            tableId: this.tableId,
            message: message,
            tableInfo: this.getTableInfo(playerId)
          });
        }
      }
    });
  }

  dealPlayerCards() {
    console.log('üé¥ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º...');
    console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ä—É–∫:', this.settings.playerRanges);
    
    const playersArray = Array.from(this.players.values());
    
    playersArray.forEach((player, index) => {
      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      let playerHandWeights;
      if (index === 0) {
        // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ (—Å–æ–∑–¥–∞—Ç–µ–ª—å) - player1
        playerHandWeights = this.settings.playerRanges?.player1?.handWeights || {};
      } else {
        // –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ - player2
        playerHandWeights = this.settings.playerRanges?.player2?.handWeights || {};
      }
      
      console.log(`üéØ –ò–≥—Ä–æ–∫ ${player.name} (–ø–æ–∑–∏—Ü–∏—è ${index + 1}): –¥–∏–∞–ø–∞–∑–æ–Ω ${Object.keys(playerHandWeights).length} —Ä—É–∫`);
      console.log(`üé≤ –í–µ—Å–∞ —Ä—É–∫:`, playerHandWeights);
      
      // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
      player.cards = generatePlayerCards(playerHandWeights, this.deck);
      player.folded = false;
      player.acted = false;
      player.currentBet = 0;
      
      console.log(`‚úÖ ${player.name} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—ã: ${player.cards[0].rank}${player.cards[0].suit} ${player.cards[1].rank}${player.cards[1].suit}`);
    });
  }

  dealFlop() {
    console.log('üé¥ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–¥–∞—á—É —Ñ–ª–æ–ø–∞...');
    console.log('üé¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª–æ–ø–∞:', JSON.stringify(this.settings.boardSettings.flop, null, 2));
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ñ–ª–æ–ø–∞
    if (this.settings.boardSettings.flop.specificCards.some(card => card !== null)) {
      console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ñ–ª–æ–ø–∞');
      this.communityCards = this.settings.boardSettings.flop.specificCards
        .filter(card => card !== null)
        .map(card => ({
          rank: card.rank,
          suit: card.suit,
          symbol: this.getSuitSymbol(card.suit),
          value: card.rank + this.getSuitSymbol(card.suit)
        }));
      console.log('üé¥ –°–¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ñ–ª–æ–ø–∞:', this.communityCards);
    } else {
      console.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–ª–æ–ø —Å–æ–≥–ª–∞—Å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º');
      // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–æ–ø —Å–æ–≥–ª–∞—Å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
      this.communityCards = this.generateRestrictedFlop();
      console.log('üé¥ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–æ–ø:', this.communityCards);
    }
  }

  generateRestrictedFlop() {
    const restrictions = this.settings.boardSettings.flop;
    let attempts = 0;
    const maxAttempts = 1000;

    while (attempts < maxAttempts) {
      const cards = [this.deck.pop(), this.deck.pop(), this.deck.pop()];
      
      if (this.validateFlopRestrictions(cards, restrictions)) {
        return cards;
      }
      
      // –í–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥—É –∏ –ø–µ—Ä–µ–º–µ—à–∞—Ç—å
      this.deck.push(...cards);
      this.deck = shuffleDeck(this.deck);
      attempts++;
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–ª–æ–ø, –≤–µ—Ä–Ω—É—Ç—å –ª—é–±–æ–π
    return [this.deck.pop(), this.deck.pop(), this.deck.pop()];
  }

  validateFlopRestrictions(cards, restrictions) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ–π
    if (restrictions.suits !== 'any') {
      const suits = cards.map(card => card.symbol);
      const uniqueSuits = [...new Set(suits)];
      
      switch (restrictions.suits) {
        case 'monotone':
          if (uniqueSuits.length !== 1) return false;
          break;
        case 'rainbow':
          if (uniqueSuits.length !== 3) return false;
          break;
        case 'flush-draw':
          if (uniqueSuits.length !== 2) return false;
          break;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if (restrictions.pairing !== 'any') {
      const ranks = cards.map(card => card.rank);
      const uniqueRanks = [...new Set(ranks)];
      
      switch (restrictions.pairing) {
        case 'unpaired':
          if (uniqueRanks.length !== 3) return false;
          break;
        case 'paired':
          if (uniqueRanks.length !== 2) return false;
          break;
        case 'trips':
          if (uniqueRanks.length !== 1) return false;
          break;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–∞ –∫–∞—Ä—Ç
    const sortedRanks = cards.map(card => CARD_RANKS.indexOf(card.rank)).sort((a, b) => a - b);
    const [high, middle, low] = [sortedRanks[0], sortedRanks[1], sortedRanks[2]];
    
    if (restrictions.ranks.high[0] !== 'any') {
      const allowedHighRanks = restrictions.ranks.high.map(rank => CARD_RANKS.indexOf(rank));
      if (!allowedHighRanks.includes(high)) return false;
    }

    return true;
  }

  getSuitSymbol(suit) {
    const index = CARD_SUITS.indexOf(suit);
    return SUIT_SYMBOLS[index] || 's';
  }

  dealTurn() {
    if (this.street !== 'flop') return;
    
    this.street = 'turn';
    this.currentBet = 0; // –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    this.players.forEach(player => {
      player.currentBet = 0;
      player.acted = false;
    });
    
    // –í–∑—è—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const turnCard = this.deck.pop();
    this.communityCards.push(turnCard);
  }

  dealRiver() {
    if (this.street !== 'turn') return;
    
    this.street = 'river';
    this.currentBet = 0; // –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    this.players.forEach(player => {
      player.currentBet = 0;
      player.acted = false;
    });
    
    // –í–∑—è—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const riverCard = this.deck.pop();
    this.communityCards.push(riverCard);
  }

  createHandHistoryEntry() {
    const timestamp = moment().format('YYYY-MM-DD HH:mm:ss');
    const players = Array.from(this.players.values());
    
    this.currentHandHistory = {
      handId: `${this.sessionId}-${this.tableId}-${this.handNumber}`,
      timestamp,
      tableId: this.tableId,
      handNumber: this.handNumber,
      players: players.map(p => ({
        name: p.name,
        position: p.position,
        stack: p.stack,
        cards: p.cards
      })),
      preflopSpot: this.preflopSpot,
      communityCards: this.communityCards,
      pot: this.pot,
      rake: {
        percent: this.settings.rakePercent,
        cap: this.settings.rakeDollar * 100 // –≤ —Ü–µ–Ω—Ç–∞—Ö
      },
      actions: []
    };
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∞–π–Ω–¥–∞—Ö –∏ –±–∞–Ω–∫–µ –∏–∑ preflopSpot
  parseHandHistoryInfo() {
    const defaultInfo = {
      bigBlind: 1.00,     // $1.00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      smallBlind: 0.50,   // $0.50 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      initialPot: 0,      // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –Ω–∞ —Ñ–ª–æ–ø–µ
      effectiveStack: 100.00, // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫
      flopBets: {         // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ñ–ª–æ–ø–µ
        player1: 0,
        player2: 0
      },
      turnBets: {         // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ç–µ—Ä–Ω–µ
        player1: 0,
        player2: 0
      },
      riverBets: {        // –°—Ç–∞–≤–∫–∏ –Ω–∞ —Ä–∏–≤–µ—Ä–µ
        player1: 0,
        player2: 0
      }
    };

    if (!this.preflopSpot) {
      console.log('‚ùå preflopSpot –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return defaultInfo;
    }

    const text = this.preflopSpot;
    let parsedInfo = { ...defaultInfo };

    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ hand history:');
    console.log('üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', text.substring(0, 500));
    console.log('üìÑ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', text.length);

    // –ü–∞—Ä—Å–∏–Ω–≥ –±–ª–∞–π–Ω–¥–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: "Hold'em No Limit ($5.00/$10.00)")
    const blindsHeaderMatch = text.match(/Hold'em No Limit \(\$(\d+\.?\d*)\/\$(\d+\.?\d*)\)/);
    if (blindsHeaderMatch) {
      parsedInfo.smallBlind = parseFloat(blindsHeaderMatch[1]);
      parsedInfo.bigBlind = parseFloat(blindsHeaderMatch[2]);
      console.log(`üí∞ –ë–ª–∞–π–Ω–¥—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: SB $${parsedInfo.smallBlind}, BB $${parsedInfo.bigBlind}`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∞–π–Ω–¥—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ');
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–µ–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
    const seatMatches = text.matchAll(/Seat \d+: .+ \(\$(\d+\.?\d*) in chips\)/g);
    const stacks = [];
    for (const match of seatMatches) {
      stacks.push(parseFloat(match[1]));
    }
    
    if (stacks.length > 0) {
      parsedInfo.effectiveStack = Math.min(...stacks);
      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${stacks.length} –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Ç–µ–∫–∞–º–∏: ${stacks.join(', ')}`);
      console.log(`üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫: $${parsedInfo.effectiveStack}`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–µ–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
    }

    // –ù–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é —Å –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏—è–º–∏  
    const { actions, potSize: extractedPotSize, playerInvestments } = this.extractPreflopActions(text);
    if (actions.length > 0) {
      console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${actions.length} –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:`);
      actions.forEach(a => console.log(`  - ${a.player}: ${a.action} $${a.amount}`));
      
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –±–∞–Ω–∫
      parsedInfo.initialPot = extractedPotSize;
      console.log(`üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–Ω–∫ –Ω–∞ —Ñ–ª–æ–ø–µ: $${parsedInfo.initialPot}`);
      
      // –í—ã—á–∏—Å–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–µ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–ª–æ–ø –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
      const investments = Object.values(playerInvestments);
      if (investments.length > 0) {
        const maxInvestment = Math.max(...investments);
        if (maxInvestment > 0) {
          parsedInfo.effectiveStack = Math.max(0, parsedInfo.effectiveStack - maxInvestment);
          console.log(`üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: $${maxInvestment}`);
          console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–∫ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–ª–æ–ø–∞: $${parsedInfo.effectiveStack}`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è  –ü—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∞–π–Ω–Ω–¥—ã');
      parsedInfo.initialPot = parsedInfo.smallBlind + parsedInfo.bigBlind;
      console.log(`üí∞ –ë–∞–Ω–∫ –∏–∑ –±–ª–∞–π–Ω–¥–æ–≤: $${parsedInfo.initialPot}`);
    }

    console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', parsedInfo);
    return parsedInfo;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ hand history
  extractPreflopActions(text) {
    const actions = [];
    let potSize = 0;
    const playerInvestments = {};

    try {
      // –ù–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é —Å hole cards
      const holeCardsIndex = text.indexOf('*** HOLE CARDS ***');
      if (holeCardsIndex === -1) {
        console.log('‚ùå –°–µ–∫—Ü–∏—è HOLE CARDS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return { actions, potSize, playerInvestments };
      }

      // –ù–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é —Ñ–ª–æ–ø–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü –ø—Ä–µ—Ñ–ª–æ–ø–∞
      const flopIndex = text.indexOf('*** FLOP ***');
      const endIndex = flopIndex !== -1 ? flopIndex : text.length;
      
      // –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–µ—Ñ–ª–æ–ø–∞, –≤–∫–ª—é—á–∞—è –±–ª–∞–π–Ω–¥—ã
      const blindsStart = text.indexOf('posts small blind');
      const startIndex = blindsStart !== -1 ? blindsStart : holeCardsIndex;
      const preflopText = text.substring(startIndex, endIndex);
      console.log('üéØ –¢–µ–∫—Å—Ç –ø—Ä–µ—Ñ–ª–æ–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', preflopText);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
      const playerNames = [];
      
      // –ü–∞—Ä—Å–∏–Ω–≥ –±–ª–∞–π–Ω–¥–æ–≤
      const blindActions = [
        { pattern: /(\w+): posts small blind \$(\d+\.?\d*)/, type: 'small_blind' },
        { pattern: /(\w+): posts big blind \$(\d+\.?\d*)/, type: 'big_blind' }
      ];

      for (const blindAction of blindActions) {
        const match = preflopText.match(blindAction.pattern);
        if (match) {
          const playerName = match[1];
          const amount = parseFloat(match[2]);
          
          if (!playerInvestments[playerName]) {
            playerInvestments[playerName] = 0;
            playerNames.push(playerName);
          }
          
          playerInvestments[playerName] += amount;
          potSize += amount;
          actions.push({ player: playerName, action: blindAction.type, amount });
          console.log(`üí∞ ${blindAction.type}: ${playerName} –≤–ª–æ–∂–∏–ª $${amount}, –∏—Ç–æ–≥–æ —É –∏–≥—Ä–æ–∫–∞: $${playerInvestments[playerName]}`);
        }
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (raises, calls, folds)
      const actionPatterns = [
        { pattern: /(\w+): raises \$(\d+\.?\d*) to \$(\d+\.?\d*)/, type: 'raise' },
        { pattern: /(\w+): calls \$(\d+\.?\d*)/, type: 'call' },
        { pattern: /(\w+): folds/, type: 'fold' },
        { pattern: /(\w+): checks/, type: 'check' }
      ];

      for (const actionPattern of actionPatterns) {
        const matches = preflopText.matchAll(new RegExp(actionPattern.pattern.source, 'g'));
        
        for (const match of matches) {
          const playerName = match[1];
          
          if (!playerInvestments[playerName]) {
            playerInvestments[playerName] = 0;
            playerNames.push(playerName);
          }

          if (actionPattern.type === 'raise') {
            const raiseAmount = parseFloat(match[2]);
            const totalBet = parseFloat(match[3]);
            
            // –î–ª—è —Ä–µ–π–∑–∞ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π –∏ —É–∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–º
            const additionalInvestment = totalBet - playerInvestments[playerName];
            playerInvestments[playerName] = totalBet;
            potSize += additionalInvestment;
            
            actions.push({ player: playerName, action: actionPattern.type, amount: additionalInvestment, totalBet });
            console.log(`üî• Raise: ${playerName} –¥–æ—Å—Ç–∞–≤–∏–ª $${additionalInvestment} –¥–æ $${totalBet}, –∏—Ç–æ–≥–æ —É –∏–≥—Ä–æ–∫–∞: $${playerInvestments[playerName]}`);
            
          } else if (actionPattern.type === 'call') {
            const callAmount = parseFloat(match[2]);
            playerInvestments[playerName] += callAmount;
            potSize += callAmount;
            
            actions.push({ player: playerName, action: actionPattern.type, amount: callAmount });
            console.log(`üìû Call: ${playerName} –¥–æ—Å—Ç–∞–≤–∏–ª $${callAmount}, –∏—Ç–æ–≥–æ —É –∏–≥—Ä–æ–∫–∞: $${playerInvestments[playerName]}`);
            
          } else if (actionPattern.type === 'fold') {
            // –ü—Ä–∏ —Ñ–æ–ª–¥–µ –∏–≥—Ä–æ–∫ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏, –Ω–æ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–∞–Ω–∫–µ
            actions.push({ player: playerName, action: actionPattern.type, amount: 0 });
            console.log(`üóÇÔ∏è Fold: ${playerName} —Å—Ñ–æ–ª–¥–∏–ª, –µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ $${playerInvestments[playerName] || 0} –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–∞–Ω–∫–µ`);
            
          } else if (actionPattern.type === 'check') {
            actions.push({ player: playerName, action: actionPattern.type, amount: 0 });
            console.log(`‚úÖ Check: ${playerName} —á–µ–∫–Ω—É–ª`);
          }
        }
      }

      console.log('üí∞ –ò—Ç–æ–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:', playerInvestments);
      console.log('üè¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–Ω–∫–∞ –Ω–∞ —Ñ–ª–æ–ø–µ:', potSize);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ—Ñ–ª–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:', error);
    }

    return { actions, potSize, playerInvestments };
  }

  addAction(playerId, actionType, amount = 0) {
    const player = this.players.get(playerId);
    if (!player || player.folded) {
      console.log('üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ñ–æ–ª–¥–∏–ª');
      return false;
    }

    // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ HandHistory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!this.currentHandHistory) {
      this.createHandHistoryEntry();
    }

    console.log(`üé≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${player.name} ${actionType} ${amount} –Ω–∞ —É–ª–∏—Ü–µ ${this.street}`);
    console.log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: pot=${this.pot}, currentBet=${this.currentBet}, playerBet=${player.currentBet}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    const validation = this.validateAction(playerId, actionType, amount);
    if (!validation.valid) {
      console.log(`‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: ${validation.reason}`);
      return false;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–π–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const finalAmount = validation.correctedAmount || amount;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–π–∑–∞
    const previousBet = this.currentBet;
    const previousPlayerBet = player.currentBet;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –°–ù–ê–ß–ê–õ–ê
    const result = this.processAction(player, actionType, finalAmount);
    if (!result) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è');
      return false;
    }

    // –°–æ–∑–¥–∞–µ–º action –æ–±—ä–µ–∫—Ç –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const action = {
      playerId,
      playerName: player.name,
      action: actionType,
      amount: finalAmount,
      street: this.street,
      timestamp: moment().format('HH:mm:ss')
    };

    // –î–ª—è —Ä–µ–π–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    if (actionType === 'raise') {
      action.raiseAmount = finalAmount - previousBet; // –†–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
      action.totalBet = finalAmount; // –û–±—â–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Ä–µ–π–∑–∏–º
      action.previousBet = previousBet; // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
      console.log(`üî¢ –†–µ–π–∑: previous=${previousBet}, final=${finalAmount}, raise=${action.raiseAmount}`);
    }
    
    // –î–ª—è –∫–æ–ª–ª–∞ —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (actionType === 'call') {
      action.callAmount = finalAmount; // –†–∞–∑–º–µ—Ä –∫–æ–ª–ª–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ all-in
    if (player.stack === 0) {
      action.allIn = true;
    }

    this.actions.push(action);
    this.currentHandHistory.actions.push(action);

    player.acted = true;

    console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: pot=${this.pot}, currentBet=${this.currentBet}, playerBet=${player.currentBet}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤
    const roundComplete = this.isBettingRoundComplete();
    console.log(`üîÑ –†–∞—É–Ω–¥ —Ç–æ—Ä–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: ${roundComplete}`);

    if (roundComplete) {
      this.completeBettingRound();
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
  validateAction(playerId, actionType, amount) {
    const player = this.players.get(playerId);
    const opponent = Array.from(this.players.values()).find(p => p.id !== playerId);
    
    console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${actionType} –Ω–∞ —Å—É–º–º—É ${amount}`);
    console.log(`üìä Player bet: ${player.currentBet}, Opponent bet: ${opponent?.currentBet || 0}, Current bet: ${this.currentBet}`);

    switch (actionType) {
      case 'fold':
        return { valid: true };

      case 'check':
        // –ß–µ–∫ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —É—Ä–∞–≤–Ω—è–ª —Å—Ç–∞–≤–∫—É
        if (this.currentBet === 0 || player.currentBet === this.currentBet) {
          return { valid: true };
        }
        return { valid: false, reason: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —á–µ–∫–Ω—É—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–µ' };

      case 'call':
        // –ö–æ–ª–ª –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏ –∏–≥—Ä–æ–∫ –µ–µ –µ—â–µ –Ω–µ —É—Ä–∞–≤–Ω—è–ª
        if (this.currentBet > 0 && player.currentBet < this.currentBet) {
          const callAmount = this.currentBet - player.currentBet;
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫
          if (player.stack >= callAmount) {
            return { valid: true, correctedAmount: callAmount };
          } else {
            // All-in –∫–æ–ª–ª
            return { valid: true, correctedAmount: player.stack };
          }
        }
        return { valid: false, reason: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–ª–ª–∞' };

      case 'bet':
        // –ë–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ
        if (this.currentBet > 0) {
          return { valid: false, reason: '–ù–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –±–µ—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–µ' };
        }
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–µ—Ç = 1 BB
        const minBet = 200; // 1 BB = $2.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
        if (amount < minBet) {
          return { valid: false, reason: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–µ—Ç: $${(minBet / 100).toFixed(2)}` };
        }
        if (player.stack < amount) {
          // All-in –±–µ—Ç
          return { valid: true, correctedAmount: player.stack };
        }
        return { valid: true };

      case 'raise':
        // –†–µ–π–∑ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–µ
        if (this.currentBet === 0) {
          return { valid: false, reason: '–ù–µ—Ç —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–µ–π–∑–∞' };
        }
        
        // –í—ã—á–∏—Å–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑
        const minRaise = this.calculateMinRaise();
        const currentRaiseSize = amount - this.currentBet;
        
        console.log(`üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑: ${minRaise}, —Ç–µ–∫—É—â–∏–π —Ä–µ–π–∑: ${currentRaiseSize}, –≤—Å–µ–≥–æ: ${amount}`);
        
        if (amount < this.currentBet) {
          return { valid: false, reason: '–†–µ–π–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º all-in)
        if (currentRaiseSize < minRaise && player.stack >= amount) {
          return { valid: false, reason: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑: $${((this.currentBet + minRaise) / 100).toFixed(2)}` };
        }
        
        if (player.stack < amount) {
          // All-in —Ä–µ–π–∑
          const allInAmount = player.currentBet + player.stack;
          return { valid: true, correctedAmount: allInAmount };
        }
        
        return { valid: true };

      default:
        return { valid: false, reason: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' };
    }
  }

  // –í—ã—á–∏—Å–ª–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞
  calculateMinRaise() {
    // –ù–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π–∑–∞ –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ
    const streetActions = this.actions.filter(a => a.street === this.street);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ = —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
    if (streetActions.length === 0 || this.currentBet === 0) {
      return 200; // 1 BB
    }

    // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–µ—Ç –∏–ª–∏ —Ä–µ–π–∑
    let lastBetAmount = 0;
    let currentBetLevel = 0;

    for (const action of streetActions) {
      if (action.action === 'bet') {
        lastBetAmount = action.amount;
        currentBetLevel = action.amount;
      } else if (action.action === 'raise') {
        const raiseSize = action.amount - currentBetLevel;
        lastBetAmount = raiseSize;
        currentBetLevel = action.amount;
      }
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π–∑ = —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏/—Ä–µ–π–∑–∞
    return Math.max(lastBetAmount, 200); // –ú–∏–Ω–∏–º—É–º 1 BB
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
  processAction(player, actionType, amount) {
    console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${actionType} –Ω–∞ —Å—É–º–º—É ${amount}`);

    switch (actionType) {
      case 'fold':
        player.folded = true;
        console.log(`üìÅ ${player.name} —Å—Ñ–æ–ª–¥–∏–ª`);
        break;

      case 'check':
        console.log(`‚úÖ ${player.name} —á–µ–∫–Ω—É–ª`);
        break;

      case 'call':
        const callAmount = Math.min(amount, this.currentBet - player.currentBet);
        player.stack -= callAmount;
        player.currentBet += callAmount;
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–Ω–∫—É —Å—Ä–∞–∑—É - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ª–∏—Ü—ã
        console.log(`üìû ${player.name} –∑–∞–∫–æ–ª–ª–∏—Ä–æ–≤–∞–ª $${(callAmount / 100).toFixed(2)} (–±–∞–Ω–∫ –æ—Å—Ç–∞–µ—Ç—Å—è $${(this.pot / 100).toFixed(2)})`);
        break;

      case 'bet':
        player.stack -= amount;
        player.currentBet = amount;
        this.currentBet = amount;
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–Ω–∫—É —Å—Ä–∞–∑—É - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ª–∏—Ü—ã
        console.log(`üí∞ ${player.name} –ø–æ—Å—Ç–∞–≤–∏–ª $${(amount / 100).toFixed(2)} (–±–∞–Ω–∫ –æ—Å—Ç–∞–µ—Ç—Å—è $${(this.pot / 100).toFixed(2)})`);
        break;

      case 'raise':
        const raiseAmount = amount - player.currentBet;
        player.stack -= raiseAmount;
        player.currentBet = amount;
        this.currentBet = amount;
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–Ω–∫—É —Å—Ä–∞–∑—É - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ª–∏—Ü—ã
        console.log(`üöÄ ${player.name} —Ä–µ–π–∑–Ω—É–ª –¥–æ $${(amount / 100).toFixed(2)} (–±–∞–Ω–∫ –æ—Å—Ç–∞–µ—Ç—Å—è $${(this.pot / 100).toFixed(2)})`);
        break;

      default:
        console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${actionType}`);
        return false;
    }

    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤
  isBettingRoundComplete() {
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    
    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫, —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
    if (activePlayers.length <= 1) {
      console.log('üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏
    const allActed = activePlayers.every(p => p.acted);
    if (!allActed) {
      console.log('‚è≥ –ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω—ã
    const bets = activePlayers.map(p => p.currentBet);
    const allBetsEqual = bets.every(bet => bet === bets[0]);
    
    console.log('üìä –°—Ç–∞–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', bets, '—Ä–∞–≤–Ω—ã:', allBetsEqual);
    
    return allBetsEqual;
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥ —Ç–æ—Ä–≥–æ–≤ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —É–ª–∏—Ü–µ
  completeBettingRound() {
    console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ —Ç–æ—Ä–≥–æ–≤ –Ω–∞ —É–ª–∏—Ü–µ: ${this.street}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ñ–æ–ª–¥–∏–ª–∏
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    
    if (activePlayers.length <= 1) {
      console.log('üèÜ –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫)');
      this.completeHand();
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
    const currentStreetBets = Array.from(this.players.values()).reduce((sum, player) => {
      return sum + (player.currentBet || 0);
    }, 0);
    
    this.streetPots[this.street] = currentStreetBets;
    console.log(`üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ —É–ª–∏—Ü—ã ${this.street}: $${(currentStreetBets / 100).toFixed(2)}`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ all-in —Å–∏—Ç—É–∞—Ü–∏—é
    const allInDetected = this.checkForAllIn();
    
    if (allInDetected) {
      console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω All-in! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç...');
      this.handleAllInSituation();
      return;
    }

    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —É–ª–∏—Ü—ã
    this.players.forEach(player => {
      player.acted = false;
      player.currentBet = 0;
    });
    this.currentBet = 0;

    // –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —É–ª–∏—Ü–µ
    const previousStreet = this.street;
    switch (this.street) {
      case 'flop':
        this.dealTurn();
        console.log('üÉè –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ç–µ—Ä–Ω');
        break;
      case 'turn':
        this.dealRiver();
        console.log('üÉè –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ä–∏–≤–µ—Ä');
        break;
      case 'river':
        console.log('üèÜ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Å–∫—Ä—ã—Ç–∏—é');
        this.completeHand();
        return; // –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      default:
        console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É–ª–∏—Ü–∞');
        return;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –±–∞–Ω–∫ –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    this.updatePotForStreet();

    // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã
    this.notifyStreetChange(previousStreet);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–Ω–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü—ã
  updatePotForStreet() {
    let totalPot = this.streetPots.preflop;
    
    if (this.street === 'turn' || this.street === 'river') {
      totalPot += this.streetPots.flop;
    }
    
    if (this.street === 'river') {
      totalPot += this.streetPots.turn;
    }
    
    const oldPot = this.pot;
    this.pot = totalPot;
    
    console.log(`üí∞ –ë–∞–Ω–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —É–ª–∏—Ü—ã ${this.street}: —Å $${(oldPot / 100).toFixed(2)} –Ω–∞ $${(this.pot / 100).toFixed(2)}`);
    console.log(`üìä –ë–∞–Ω–∫–∏ –ø–æ —É–ª–∏—Ü–∞–º:`, {
      preflop: `$${(this.streetPots.preflop / 100).toFixed(2)}`,
      flop: `$${(this.streetPots.flop / 100).toFixed(2)}`,
      turn: `$${(this.streetPots.turn / 100).toFixed(2)}`,
      river: `$${(this.streetPots.river / 100).toFixed(2)}`,
      total: `$${(this.pot / 100).toFixed(2)}`
    });
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–¥–∞—á—É
  completeHand() {
    console.log('üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏');
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —É–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const finalStreetBets = Array.from(this.players.values()).reduce((sum, player) => {
      return sum + (player.currentBet || 0);
    }, 0);
    
    this.streetPots[this.street] = finalStreetBets;
    console.log(`üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —É–ª–∏—Ü—ã ${this.street}: $${(finalStreetBets / 100).toFixed(2)}`);
    
    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–Ω–∫
    const finalPot = this.streetPots.preflop + this.streetPots.flop + this.streetPots.turn + this.streetPots.river;
    this.pot = finalPot;
    
    console.log(`üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–Ω–∫:`, {
      preflop: `$${(this.streetPots.preflop / 100).toFixed(2)}`,
      flop: `$${(this.streetPots.flop / 100).toFixed(2)}`,
      turn: `$${(this.streetPots.turn / 100).toFixed(2)}`,
      river: `$${(this.streetPots.river / 100).toFixed(2)}`,
      total: `$${(this.pot / 100).toFixed(2)}`
    });
    
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    
    if (activePlayers.length === 1) {
      // –í—ã–∏–≥—Ä—ã—à –±–µ–∑ –≤—Å–∫—Ä—ã—Ç–∏—è
      const winner = activePlayers[0];
      winner.stack += this.pot;
      console.log(`üéâ ${winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç $${(this.pot / 100).toFixed(2)} –±–µ–∑ –≤—Å–∫—Ä—ã—Ç–∏—è`);
    } else {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å–∏–ª–µ —Ä—É–∫
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–µ–º –±–∞–Ω–∫ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
      const winner = activePlayers[0];
      winner.stack += this.pot;
      console.log(`üéâ ${winner.name} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç $${(this.pot / 100).toFixed(2)} –Ω–∞ –≤—Å–∫—Ä—ã—Ç–∏–∏`);
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–∞–∑–¥–∞—á—É –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    this.saveCompletedHand();
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏
    this.notifyHandComplete();
    
    console.log('‚ú® –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–µ');
    
    // üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ù–û–í–û–ô –†–ê–ó–î–ê–ß–ò
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    setTimeout(() => {
      console.log('üéÆ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏...');
      
      try {
        this.startNewHand();
        console.log(`üéÆ –ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ #${this.handNumber} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞`);
        
        // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏
        this.notifyPlayersOfNewHand();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏:', error);
      }
    }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–∞–∑–¥–∞—á—É –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
  saveCompletedHand() {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤ —Ä–∞–∑–¥–∞—á–µ –±—ã–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤
    const hasPlayerActions = this.currentHandHistory && 
                             this.currentHandHistory.actions && 
                             this.currentHandHistory.actions.length > 0;

    if (!hasPlayerActions) {
      console.log('üìù –†–∞–∑–¥–∞—á–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ - –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HandHistory —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π —Ä–∞–∑–¥–∞—á–∏
    const handHistoryText = this.generateHandHistoryText();
    
    if (handHistoryText && !handHistoryText.includes('–û—à–∏–±–∫–∞:')) {
      // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á
      this.tableHandCount++;
      
      // –î–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á
      this.completedHands.push({
        handNumber: this.handNumber,
        tableHandNumber: this.tableHandCount,
        text: handHistoryText,
        timestamp: new Date().toISOString(),
        sessionId: this.sessionId,
        tableId: this.tableId
      });
      
      console.log(`üíæ –†–∞–∑–¥–∞—á–∞ #${this.handNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–æ–ª–∞ ${this.tableId} (–≤—Å–µ–≥–æ —Ä–∞–∑–¥–∞—á: ${this.tableHandCount})`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HandHistory - –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã
  notifyStreetChange(previousStreet) {
    if (!this.sessionId) return;
    
    const session = activeSessions.get(this.sessionId);
    if (!session) return;

    console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —É–ª–∏—Ü—ã: ${previousStreet} ‚Üí ${this.street}`);

    session.players.forEach((player, playerId) => {
      if (this.players.has(playerId)) {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('street-changed', {
            tableId: this.tableId,
            previousStreet: previousStreet,
            street: this.street,
            tableInfo: this.getTableInfo(playerId)
          });
        }
      }
    });
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏
  notifyHandComplete() {
    if (!this.sessionId) return;
    
    const session = activeSessions.get(this.sessionId);
    if (!session) return;

    console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${this.tableId}`);

    session.players.forEach((player, playerId) => {
      if (this.players.has(playerId)) {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('hand-completed', {
            tableId: this.tableId,
            tableInfo: this.getTableInfo(playerId),
            handHistory: this.exportHandHistory()
          });
        }
      }
    });
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏
  notifyPlayersOfNewHand() {
    if (!this.sessionId) return;
    
    const session = activeSessions.get(this.sessionId);
    if (!session) return;

    console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${this.tableId}`);

    session.players.forEach((player, playerId) => {
      if (this.players.has(playerId)) {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('new-hand-auto-started', {
            tableId: this.tableId,
            handNumber: this.handNumber,
            tableInfo: this.getTableInfo(playerId),
            message: '–ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
          });
        }
      }
    });
  }

  getTableInfo(requestingPlayerId = null) {
    // –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç streetBets —Å —É—á–µ—Ç–æ–º –∫—Ç–æ —É–∂–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª
    const streetBets = {};
    streetBets[this.street] = {};
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å—Ç–∞–≤–∫—É –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª (–¥–ª—è —á–µ–∫–∞)
    Array.from(this.players.values()).forEach(p => {
      if (p.acted) {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞–≤–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å 0 –¥–ª—è —á–µ–∫–∞)
        streetBets[this.street][p.id] = p.currentBet;
      }
      // –ï—Å–ª–∏ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞–ª, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–æ–±—â–µ (undefined –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ —Ö–æ–¥–∏–ª")
    });
    
    return {
      tableId: this.tableId,
      players: Array.from(this.players.values()).map(p => ({
        id: p.id,
        name: p.name,
        stack: p.stack,
        position: p.position,
        folded: p.folded,
        currentBet: p.currentBet,
        acted: p.acted,
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É –∏–≥—Ä–æ–∫—É –¥–ª—è –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
        cards: p.id === requestingPlayerId ? p.cards : [
          { rank: '?', suit: '?', hidden: true },
          { rank: '?', suit: '?', hidden: true }
        ]
      })),
      communityCards: this.communityCards,
      pot: this.pot,
      currentBet: this.currentBet,
      street: this.street,
      handNumber: this.handNumber,
      currentStreet: this.street,
      streetBets: streetBets,
      preflopSpot: this.preflopSpot,
      handHistory: this.currentHandHistory,
      handHistoryInfo: this.parseHandHistoryInfo()
    };
  }

  exportHandHistory() {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á, –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (this.completedHands.length === 0) {
      return {
        tableId: this.tableId,
        sessionId: this.sessionId,
        totalHands: 0,
        fileName: this.getHandHistoryFileName(),
        formatted: '',
        format: 'pokerstars',
        message: '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
      };
    }

    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    const allHandsText = this.completedHands.map(hand => hand.text).join('\n\n');
    
    return {
      tableId: this.tableId,
      sessionId: this.sessionId,
      totalHands: this.completedHands.length,
      fileName: this.getHandHistoryFileName(),
      formatted: allHandsText,
      format: 'pokerstars',
      hands: this.completedHands
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è HandHistory –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
  getHandHistoryFileName() {
    // –§–æ—Ä–º–∞—Ç: hand_{sessionId}-{tableId}-{handCount}_table_{tableId}
    return `hand_${this.sessionId}-${this.tableId}-${this.tableHandCount}_table_${this.tableId}.txt`;
  }

  // üíæ –ó–∞–ø–∏—Å–∞—Ç—å HandHistory –≤ —Ñ–∞–π–ª
  writeHandHistoryToFile() {
    if (this.completedHands.length === 0) {
      console.log(`üìù –°—Ç–æ–ª ${this.tableId}: –Ω–µ—Ç —Ä–∞–∑–¥–∞—á –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª`);
      return false;
    }

    const fileName = this.getHandHistoryFileName();
    const filePath = path.join(__dirname, 'handhistory', fileName);
    
    // –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É handhistory –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const handhistoryDir = path.join(__dirname, 'handhistory');
    if (!fs.existsSync(handhistoryDir)) {
      fs.mkdirSync(handhistoryDir, { recursive: true });
    }
    
    // –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–∞—á–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    const allHandsText = this.completedHands.map(hand => hand.text).join('\n\n');
    
    try {
      fs.writeFileSync(filePath, allHandsText, 'utf8');
      console.log(`üíæ HandHistory –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª: ${fileName} (${this.completedHands.length} —Ä–∞–∑–¥–∞—á)`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ HandHistory –≤ —Ñ–∞–π–ª ${fileName}:`, error);
      return false;
    }
  }

  generateHandHistoryText() {
    const hand = this.currentHandHistory;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞, –Ω–µ –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    if (!hand.preflopSpot) {
      return '–û—à–∏–±–∫–∞: –ü—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }

    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ—Ñ–ª–æ–ø —á–∞—Å—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–∞—á–∏
    const originalText = hand.preflopSpot;
    const handIdMatch = originalText.match(/PokerStars Hand #(\d+):/);
    const originalHandId = handIdMatch ? handIdMatch[1] : '4400520541168030866';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ tableId –∏ handNumber
    const newHandId = `${originalHandId.slice(0, -4)}${String(this.tableId).padStart(2, '0')}${String(this.handNumber).padStart(2, '0')}`;
    
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–∞—á–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    let handText = originalText.replace(/PokerStars Hand #\d+:/, `PokerStars Hand #${newHandId}:`);
    
    // 2. –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–ª–æ–ø —á–∞—Å—Ç—å (—É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ø–æ—Å—Ç—Ñ–ª–æ–ø —Å–µ–∫—Ü–∏–∏)
    const postflopMarkers = ['*** FLOP ***', '*** TURN ***', '*** RIVER ***', '*** SHOW DOWN ***', '*** SUMMARY ***'];
    let cutIndex = handText.length;
    
    // –ù–∞–π—Ç–∏ —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –ø–æ—Å—Ç—Ñ–ª–æ–ø –º–∞—Ä–∫–µ—Ä
    for (const marker of postflopMarkers) {
      const markerIndex = handText.indexOf(marker);
      if (markerIndex !== -1 && markerIndex < cutIndex) {
        cutIndex = markerIndex;
      }
    }
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    handText = handText.substring(0, cutIndex);
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–µ—Ñ–ª–æ–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    handText = handText.trimEnd();
    if (!handText.endsWith('\n')) {
      handText += '\n';
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—Ñ–ª–æ–ø —Å–µ–∫—Ü–∏–∏
    
    // *** FLOP ***
    if (this.communityCards.length >= 3) {
      const flopCards = this.communityCards.slice(0, 3);
      handText += `*** FLOP *** [${flopCards.map(c => this.formatCard(c)).join(' ')}]\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ñ–ª–æ–ø–µ
      const flopActions = hand.actions.filter(a => a.street === 'flop');
      flopActions.forEach(action => {
        handText += this.formatAction(action);
      });
    }
    
    // *** TURN ***
    if (this.communityCards.length >= 4) {
      const flopCards = this.communityCards.slice(0, 3);
      const turnCard = this.communityCards[3];
      handText += `*** TURN *** [${flopCards.map(c => this.formatCard(c)).join(' ')}] [${this.formatCard(turnCard)}]\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ—Ä–Ω–µ
      const turnActions = hand.actions.filter(a => a.street === 'turn');
      turnActions.forEach(action => {
        handText += this.formatAction(action);
      });
    }
    
    // *** RIVER ***
    if (this.communityCards.length >= 5) {
      const allButRiver = this.communityCards.slice(0, 4);
      const riverCard = this.communityCards[4];
      handText += `*** RIVER *** [${allButRiver.map(c => this.formatCard(c)).join(' ')}] [${this.formatCard(riverCard)}]\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ä–∏–≤–µ—Ä–µ
      const riverActions = hand.actions.filter(a => a.street === 'river');
      riverActions.forEach(action => {
        handText += this.formatAction(action);
      });
    }
    
    // 4. *** SHOW DOWN *** (–µ—Å–ª–∏ —Ä–∞–∑–¥–∞—á–∞ –¥–æ—à–ª–∞ –¥–æ –≤—Å–∫—Ä—ã—Ç–∏—è)
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    const winner = this.determineWinner();
    
    if (activePlayers.length > 1) {
      handText += `*** SHOW DOWN ***\n`;
      
      activePlayers.forEach(player => {
        if (player.id === winner.id) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
          const handDescription = this.getHandDescription(player.cards);
          handText += `${player.name}: shows [${player.cards.map(c => this.formatCard(c)).join(' ')}] (${handDescription})\n`;
        } else {
          // –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã
          handText += `${player.name}: mucks hand\n`;
        }
      });
      
      // –°–±–æ—Ä –±–∞–Ω–∫–∞
      const rakeAmount = this.calculateRake();
      const winAmount = this.pot - rakeAmount;
      handText += `${winner.name} collected $${(winAmount / 100).toFixed(2)} from pot\n`;
    }
    
    // 5. *** SUMMARY ***
    handText += `*** SUMMARY ***\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ –∏ —Ä–µ–π–∫–µ
    const rakeAmount = this.calculateRake();
    handText += `Total pot $${(this.pot / 100).toFixed(2)} | Rake $${(rakeAmount / 100).toFixed(2)}\n`;
    
    // –î–æ—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã)
    if (this.communityCards.length > 0) {
      handText += `Board [${this.communityCards.map(c => this.formatCard(c)).join(' ')}]\n`;
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É (–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞)
    handText += this.generateSummarySeats(winner, activePlayers);
    
    return handText;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∏–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: As, Kh, 7c)
  formatCard(card) {
    const rank = card.rank === '10' ? 'T' : card.rank;
    const suit = this.getSuitLetter(card.suit);
    return `${rank}${suit}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±—É–∫–≤—É –º–∞—Å—Ç–∏ –¥–ª—è PokerStars —Ñ–æ—Ä–º–∞—Ç–∞
  getSuitLetter(suit) {
    const suitMap = {
      'spades': 's',
      'hearts': 'h', 
      'diamonds': 'd',
      'clubs': 'c',
      '‚ô†': 's',
      '‚ô•': 'h',
      '‚ô¶': 'd', 
      '‚ô£': 'c'
    };
    return suitMap[suit] || 's';
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è history
  formatAction(action) {
    const playerName = action.playerName;
    const amount = action.amount;
    
    switch (action.action) {
      case 'check':
        return `${playerName}: checks\n`;
        
      case 'bet':
        const allInText = action.allIn ? ' and is all-in' : '';
        return `${playerName}: bets $${(amount / 100).toFixed(2)}${allInText}\n`;
        
      case 'call':
        const callAllInText = action.allIn ? ' and is all-in' : '';
        return `${playerName}: calls $${(amount / 100).toFixed(2)}${callAllInText}\n`;
        
      case 'raise':
        const raiseAllInText = action.allIn ? ' and is all-in' : '';
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (action.raiseAmount !== undefined && action.totalBet !== undefined) {
          return `${playerName}: raises $${(action.raiseAmount / 100).toFixed(2)} to $${(action.totalBet / 100).toFixed(2)}${raiseAllInText}\n`;
        } else {
          // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ—Å–ª–∏ raiseAmount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–π–∑–∞ –∏–∑ –æ–±—â–µ–π —Å—Ç–∞–≤–∫–∏
          const previousBet = action.previousBet || 0;
          const raiseSize = amount - previousBet;
          return `${playerName}: raises $${(raiseSize / 100).toFixed(2)} to $${(amount / 100).toFixed(2)}${raiseAllInText}\n`;
        }
        
      case 'fold':
        return `${playerName}: folds\n`;
        
      default:
        return `${playerName}: ${action.action}\n`;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  determineWinner() {
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä—É–∫
    return activePlayers[0] || Array.from(this.players.values())[0];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä—É–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  getHandDescription(cards) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä
    if (cards[0].rank === cards[1].rank) {
      const rank = cards[0].rank;
      const rankName = rank === 'A' ? 'Aces' : 
                     rank === 'K' ? 'Kings' :
                     rank === 'Q' ? 'Queens' :
                     rank === 'J' ? 'Jacks' :
                     `${rank}s`;
      return `a pair of ${rankName}`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º high card
    const highCard = this.getHighCardName(cards);
    return `${highCard} high`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç—ã
  getHighCardName(cards) {
    const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
    const cardRanks = cards.map(c => c.rank);
    
    for (let i = ranks.length - 1; i >= 0; i--) {
      if (cardRanks.includes(ranks[i])) {
        const rank = ranks[i];
        return rank === 'A' ? 'Ace' :
               rank === 'K' ? 'King' :
               rank === 'Q' ? 'Queen' :
               rank === 'J' ? 'Jack' :
               rank;
      }
    }
    return 'high card';
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π–∫
  calculateRake() {
    const rakePercent = this.settings?.rakePercent || 2.5; // 2.5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const rakeCap = this.settings?.rakeDollar * 100 || 300; // $3.00 –≤ —Ü–µ–Ω—Ç–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const rakeAmount = this.pot * rakePercent / 100;
    return Math.min(rakeAmount, rakeCap);
  }

  generateSummarySeats(winner, activePlayers) {
    let summaryText = '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö –∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞
    const seatMatches = Array.from(this.preflopSpot.matchAll(/Seat (\d+): ([^(]+) \([^)]+\)/g));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞–∑–¥–∞—á–µ (–¥–æ—à–µ–ª –¥–æ —Ñ–ª–æ–ø–∞)
    const playersWhoReachedFlop = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
    Array.from(this.players.values()).forEach(player => {
      playersWhoReachedFlop.push(player.name);
    });
    
    seatMatches.forEach(match => {
      const seatNumber = match[1];
      const playerName = match[2].trim();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      let position = '';
      if (this.preflopSpot.includes(`${playerName}: posts small blind`)) {
        position = ' (small blind)';
      } else if (this.preflopSpot.includes(`${playerName}: posts big blind`)) {
        position = ' (big blind)';
      } else if (this.preflopSpot.includes('is the button') && this.preflopSpot.includes(`Seat #${seatNumber} is the button`)) {
        position = ' (button)';
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –∏–≥—Ä–æ–∫–æ–º
      const player = Array.from(this.players.values()).find(p => p.name === playerName);
      
      if (player) {
        // –≠—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–∞–∑–¥–∞—á–µ
        if (player.folded) {
          // –ò–≥—Ä–æ–∫ —Å—Ñ–æ–ª–¥–∏–ª –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç—Ñ–ª–æ–ø –∏–≥—Ä—ã
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded on the Flop\n`;
        } else if (activePlayers.includes(player)) {
          // –ò–≥—Ä–æ–∫ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞
          if (player.id === winner.id) {
            const rakeAmount = this.calculateRake();
            const winAmount = this.pot - rakeAmount;
            const handDescription = this.getHandDescription(player.cards);
            summaryText += `Seat ${seatNumber}: ${playerName}${position} showed [${player.cards.map(c => this.formatCard(c)).join(' ')}] and won ($${(winAmount / 100).toFixed(2)}) with ${handDescription}\n`;
          } else {
            const handDescription = this.getHandDescription(player.cards);
            summaryText += `Seat ${seatNumber}: ${playerName}${position} showed [${player.cards.map(c => this.formatCard(c)).join(' ')}] and lost with ${handDescription}\n`;
          }
        }
      } else {
        // –≠—Ç–æ –∏–≥—Ä–æ–∫ –∏–∑ –ø—Ä–µ—Ñ–ª–æ–ø —Å–ø–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç—Ñ–ª–æ–ø –∏–≥—Ä–µ
        if (this.preflopSpot.includes(`${playerName}: folds`) && !this.preflopSpot.includes(`${playerName}: posts`)) {
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded before Flop (didn't bet)\n`;
        } else {
          summaryText += `Seat ${seatNumber}: ${playerName}${position} folded before Flop\n`;
        }
      }
    });
    
    return summaryText;
  }

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–≥—Ä–æ–∫–∞)
  requestNewHand() {
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ —Å—Ç–æ–ª–µ ${this.tableId}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (this.pot > 0 || this.communityCards.length === 0) {
      console.log('‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É: —Ç–µ–∫—É—â–∞—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return false;
    }
    
    // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É
    this.startNewHand();
    
    console.log(`‚úÖ –ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ #${this.handNumber} –Ω–∞—á–∞—Ç–∞`);
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ all-in —Å–∏—Ç—É–∞—Ü–∏—é
  checkForAllIn() {
    const activePlayers = Array.from(this.players.values()).filter(p => !p.folded);
    
    if (activePlayers.length <= 1) {
      return false; // –†–∞–∑–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ–æ–ª–¥–∞–º–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º —Å—Ç–µ–∫–æ–º (all-in)
    const allInPlayers = activePlayers.filter(p => p.stack === 0);
    const playersWithChips = activePlayers.filter(p => p.stack > 0);
    
    console.log(`üéØ All-in –ø—Ä–æ–≤–µ—Ä–∫–∞: ${allInPlayers.length} –∏–≥—Ä–æ–∫–æ–≤ all-in, ${playersWithChips.length} –∏–≥—Ä–æ–∫–æ–≤ —Å —Ñ–∏—à–∫–∞–º–∏`);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω all-in –∏–≥—Ä–æ–∫ –∏ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω—ã
    if (allInPlayers.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω—ã
      const bets = activePlayers.map(p => p.currentBet);
      const allBetsEqual = bets.every(bet => bet === bets[0]);
      
      if (allBetsEqual) {
        console.log('‚úÖ All-in —Å–∏—Ç—É–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: –µ—Å—Ç—å all-in –∏–≥—Ä–æ–∫–∏ –∏ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω—ã');
        return true;
      } else {
        console.log('‚è≥ All-in –∏–≥—Ä–æ–∫–∏ –µ—Å—Ç—å, –Ω–æ —Å—Ç–∞–≤–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã, —Ç–æ—Ä–≥–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è');
        return false;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ all-in
    if (allInPlayers.length === activePlayers.length) {
      console.log('‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ all-in');
      return true;
    }
    
    return false;
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å all-in —Å–∏—Ç—É–∞—Ü–∏—é
  handleAllInSituation() {
    console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ all-in —Å–∏—Ç—É–∞—Ü–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç...');
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å—Ç–∞–≤–∫–∏ - –±–æ–ª—å—à–µ —Ç–æ—Ä–≥–æ–≤ –Ω–µ –±—É–¥–µ—Ç
    this.players.forEach(player => {
      player.acted = true; // –í—Å–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞–≤—à–∏–º–∏
    });
    this.currentBet = 0;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã
    this.dealRemainingCards();
    
    // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–¥–∞—á—É
    this.completeHand();
  }
  
  // –†–∞–∑–¥–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –¥–æ —Ä–∏–≤–µ—Ä–∞
  dealRemainingCards() {
    console.log(`üÉè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç —Å —É–ª–∏—Ü—ã: ${this.street}`);
    
    // –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —É–ª–∏—Ü—ã
    if (this.street === 'flop') {
      // –†–∞–∑–¥–∞—Ç—å —Ç–µ—Ä–Ω
      this.dealTurn();
      console.log('üÉè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–∞–Ω —Ç–µ—Ä–Ω');
      
      // –†–∞–∑–¥–∞—Ç—å —Ä–∏–≤–µ—Ä
      this.dealRiver();
      console.log('üÉè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–∞–Ω —Ä–∏–≤–µ—Ä');
    } else if (this.street === 'turn') {
      // –†–∞–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∏–≤–µ—Ä
      this.dealRiver();
      console.log('üÉè –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–∞–Ω —Ä–∏–≤–µ—Ä');
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–ª–∏—Ü—É –≤ "river" –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–∞—á–∏
    this.street = 'river';
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞
    this.notifyPlayersOfTableUpdate('All-in - –∫–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  }
}

// ===== WEBSOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
io.on('connection', (socket) => {
  console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  socket.on('create-session', (data) => {
    const sessionId = uuidv4().substring(0, 8).toUpperCase();
    const userId = data.userId || uuidv4();
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', JSON.stringify(data.settings, null, 2));
    console.log('üÉè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–ª–æ–ø–∞:', JSON.stringify(data.settings.boardSettings?.flop, null, 2));
    console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ä—É–∫:', JSON.stringify(data.settings.playerRanges, null, 2));
    
    // –ï—Å–ª–∏ preflopSpot –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä
    if (!data.settings.preflopSpot || data.settings.preflopSpot.trim() === '') {
      try {
        const fs = require('fs');
        const path = require('path');
        const exampleFile = path.join(__dirname, 'example_handhistory_pokerstars.txt');
        if (fs.existsSync(exampleFile)) {
          data.settings.preflopSpot = fs.readFileSync(exampleFile, 'utf8');
          console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä hand history –∏–∑ —Ñ–∞–π–ª–∞');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä hand history:', error.message);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ –ø—É—Å—Ç—ã–µ
    if (data.settings.playerRanges) {
      const p1Weights = data.settings.playerRanges.player1?.handWeights || {};
      const p2Weights = data.settings.playerRanges.player2?.handWeights || {};
      console.log(`üìä Player 1: ${Object.keys(p1Weights).length} —Ä—É–∫ –≤—ã–±—Ä–∞–Ω–æ`);
      console.log(`üìä Player 2: ${Object.keys(p2Weights).length} —Ä—É–∫ –≤—ã–±—Ä–∞–Ω–æ`);
      
      if (Object.keys(p1Weights).length > 0) {
        const hands = Object.keys(p1Weights);
        const weights = Object.values(p1Weights);
        console.log(`üéØ –ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫ Player 1: ${hands.slice(0, 3).map((hand, i) => `${hand}(${weights[i]}%)`).join(', ')}`);
      }
      if (Object.keys(p2Weights).length > 0) {
        const hands = Object.keys(p2Weights);
        const weights = Object.values(p2Weights);
        console.log(`üéØ –ü—Ä–∏–º–µ—Ä—ã —Ä—É–∫ Player 2: ${hands.slice(0, 3).map((hand, i) => `${hand}(${weights[i]}%)`).join(', ')}`);
      }
    }
    
    const session = new PokerSession(sessionId, userId, data.settings);
    session.addPlayer(userId, {
      name: data.playerName || 'Player 1',
      socketId: socket.id
    });
    
    activeSessions.set(sessionId, session);
    activeUsers.set(socket.id, { userId, sessionId });
    
    socket.join(sessionId);
    
    socket.emit('session-created', {
      sessionId,
      userId,
      sessionInfo: session.getSessionInfo(userId)
    });
    
    console.log(`–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionId}`);
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
  socket.on('join-session', (data) => {
    const { sessionId, playerName } = data;
    const session = activeSessions.get(sessionId);
    
    if (!session) {
      socket.emit('error', { message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }
    
    if (session.players.size >= 2) {
      socket.emit('error', { message: '–°–µ—Å—Å–∏—è –ø–æ–ª–Ω–∞—è' });
      return;
    }
    
    const userId = uuidv4();
    session.addPlayer(userId, {
      name: playerName || 'Player 2',
      socketId: socket.id
    });
    
    activeUsers.set(socket.id, { userId, sessionId });
    socket.join(sessionId);
    
    // –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –≤ —Å–µ—Å—Å–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    session.players.forEach((player, playerId) => {
      const playerSocket = io.sockets.sockets.get(player.socketId);
      if (playerSocket) {
        playerSocket.emit('player-joined', {
          userId,
          playerName,
          sessionInfo: session.getSessionInfo(playerId)
        });
      }
    });
    
    socket.emit('session-joined', {
      sessionId,
      userId,
      sessionInfo: session.getSessionInfo(userId)
    });
    
    console.log(`–ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
  });

  // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  socket.on('start-game', () => {
    const userData = activeUsers.get(socket.id);
    if (!userData) return;
    
    const session = activeSessions.get(userData.sessionId);
    if (!session || session.creatorId !== userData.userId) {
      socket.emit('error', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' });
      return;
    }
    
    if (session.startSession()) {
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
      session.players.forEach((player, playerId) => {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('game-started', {
            sessionInfo: session.getSessionInfo(playerId)
          });
        }
      });
      console.log(`–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ ${userData.sessionId}`);
    } else {
      socket.emit('error', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã' });
    }
  });

  // –ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
  socket.on('player-action', (data) => {
    console.log('üé≤ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞:', data);
    console.log('üéØ –ò—â–µ–º —Å—Ç–æ–ª —Å tableId:', data.tableId, '—Ç–∏–ø:', typeof data.tableId);
    
    const userData = activeUsers.get(socket.id);
    if (!userData) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const session = activeSessions.get(userData.sessionId);
    if (!session) {
      console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã –≤ —Å–µ—Å—Å–∏–∏:', session.tables.map(t => ({ tableId: t.tableId, type: typeof t.tableId })));
    
    // –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–æ–ª –ø–æ tableId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const targetTableId = parseInt(data.tableId) || data.tableId;
    const table = session.tables.find(t => t.tableId == targetTableId);
    
    if (!table) {
      console.error('‚ùå –°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', data.tableId);
      console.error('üí° –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Å—Ç–æ–ª —Å –∏–≥—Ä–æ–∫–æ–º...');
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —Å—Ç–æ–ª, –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
      const fallbackTable = session.tables.find(t => t.players.has(userData.userId));
      if (fallbackTable) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å—Ç–æ–ª:', fallbackTable.tableId);
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å—Ç–æ–ª–∞', fallbackTable.tableId, ':', data.action);
        
        // –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —É–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const previousStreet = fallbackTable.street;
        const previousPot = fallbackTable.pot;
        
        const success = fallbackTable.addAction(userData.userId, data.action, data.amount);
        
        if (success) {
          console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
          
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —É–ª–∏—Ü–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Ä–∞–∑–¥–∞—á–∞
          const streetChanged = fallbackTable.street !== previousStreet;
          const handCompleted = fallbackTable.pot === 0 && previousPot > 0;
          
          if (streetChanged) {
            console.log(`üîÑ –£–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${previousStreet} ‚Üí ${fallbackTable.street}`);
          }
          
          if (handCompleted) {
            console.log('üèÅ –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
          
          // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          session.players.forEach((player, playerId) => {
            if (fallbackTable.players.has(playerId)) {
              const playerSocket = io.sockets.sockets.get(player.socketId);
              if (playerSocket) {
                playerSocket.emit('action-processed', {
                  tableId: fallbackTable.tableId,
                  action: data,
                  tableInfo: fallbackTable.getTableInfo(playerId),
                  streetChanged: streetChanged,
                  previousStreet: streetChanged ? previousStreet : undefined,
                  handCompleted: handCompleted
                });
              }
            }
          });
        } else {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
          socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
        }
        return;
      }
      
      socket.emit('error', { message: `–°—Ç–æ–ª ${data.tableId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–ª–æ–º
    if (!table.players.has(userData.userId)) {
      console.error('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –∑–∞ –¥–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–æ–º:', userData.userId, data.tableId);
      socket.emit('error', { message: '–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –¥–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–æ–º' });
      return;
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–æ–ª–∞', data.tableId, ':', data.action);
    
    // –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —É–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const previousStreet = table.street;
    const previousPot = table.pot;
    
    const success = table.addAction(userData.userId, data.action, data.amount);
    
    if (success) {
      console.log('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —É–ª–∏—Ü–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ —Ä–∞–∑–¥–∞—á–∞
      const streetChanged = table.street !== previousStreet;
      const handCompleted = table.pot === 0 && previousPot > 0;
      
      if (streetChanged) {
        console.log(`üîÑ –£–ª–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${previousStreet} ‚Üí ${table.street}`);
      }
      
      if (handCompleted) {
        console.log('üèÅ –†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      session.players.forEach((player, playerId) => {
        if (table.players.has(playerId)) {
          const playerSocket = io.sockets.sockets.get(player.socketId);
          if (playerSocket) {
            playerSocket.emit('action-processed', {
              tableId: table.tableId,
              action: data,
              tableInfo: table.getTableInfo(playerId),
              streetChanged: streetChanged,
              previousStreet: streetChanged ? previousStreet : undefined,
              handCompleted: handCompleted
            });
          }
        }
      });
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ');
      socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
  });

  // –°–ª–µ–¥—É—é—â–∞—è —É–ª–∏—Ü–∞
  socket.on('next-street', (data) => {
    const userData = activeUsers.get(socket.id);
    if (!userData) return;
    
    const session = activeSessions.get(userData.sessionId);
    if (!session) return;
    
    const table = session.tables.find(t => t.tableId === data.tableId);
    if (!table) return;
    
    if (data.street === 'turn') {
      table.dealTurn();
    } else if (data.street === 'river') {
      table.dealRiver();
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª–∏—Ü—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    session.players.forEach((player, playerId) => {
      if (table.players.has(playerId)) {
        const playerSocket = io.sockets.sockets.get(player.socketId);
        if (playerSocket) {
          playerSocket.emit('street-changed', {
            tableId: table.tableId,
            street: table.street,
            tableInfo: table.getTableInfo(playerId)
          });
        }
      }
    });
  });

  // –≠–∫—Å–ø–æ—Ä—Ç HandHistory
  socket.on('export-hand-history', (data) => {
    const userData = activeUsers.get(socket.id);
    if (!userData) return;
    
    const session = activeSessions.get(userData.sessionId);
    if (!session) return;
    
    const table = session.tables.find(t => t.tableId === data.tableId);
    if (!table) return;
    
    const handHistory = table.exportHandHistory();
    if (handHistory) {
      // –ó–∞–ø–∏—Å–∞—Ç—å HandHistory –≤ —Ñ–∞–π–ª
      const fileWritten = table.writeHandHistoryToFile();
      
      socket.emit('hand-history-exported', {
        tableId: table.tableId,
        handHistory: handHistory,
        fileWritten: fileWritten,
        fileName: handHistory.fileName
      });
      
      console.log(`üìä HandHistory —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Å—Ç–æ–ª–∞ ${table.tableId}: ${handHistory.totalHands} —Ä–∞–∑–¥–∞—á`);
    } else {
      socket.emit('hand-history-exported', {
        tableId: table.tableId,
        handHistory: null,
        fileWritten: false,
        error: '–ù–µ—Ç HandHistory –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
      });
    }
  });

  // –ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞
  socket.on('new-hand', (data) => {
    console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏:', data);
    
    const userData = activeUsers.get(socket.id);
    if (!userData) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è new-hand');
      return;
    }
    
    const session = activeSessions.get(userData.sessionId);
    if (!session) {
      console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è new-hand');
      return;
    }
    
    const table = session.tables.find(t => t.tableId === data.tableId);
    if (!table) {
      console.error('‚ùå –°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è new-hand:', data.tableId);
      socket.emit('error', { message: `–°—Ç–æ–ª ${data.tableId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
      return;
    }
    
    // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É
    const success = table.requestNewHand();
    
    if (success) {
      console.log(`‚úÖ –ù–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–µ ${table.tableId}`);
      
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      session.players.forEach((player, playerId) => {
        if (table.players.has(playerId)) {
          const playerSocket = io.sockets.sockets.get(player.socketId);
          if (playerSocket) {
            playerSocket.emit('new-hand-started', {
              tableId: table.tableId,
              handNumber: table.handNumber,
              tableInfo: table.getTableInfo(playerId)
            });
          }
        }
      });
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É –Ω–∞ —Å—Ç–æ–ª–µ ${table.tableId}`);
      socket.emit('error', { message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É' });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    const userData = activeUsers.get(socket.id);
    if (userData) {
      const session = activeSessions.get(userData.sessionId);
      if (session) {
        session.players.delete(userData.userId);
        
        // –£–≤–µ–¥–æ–º–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        session.players.forEach((player, playerId) => {
          const playerSocket = io.sockets.sockets.get(player.socketId);
          if (playerSocket && playerId !== userData.userId) {
            playerSocket.emit('player-disconnected', {
              userId: userData.userId,
              sessionInfo: session.getSessionInfo(playerId)
            });
          }
        });
        
        // üíæ –ó–∞–ø–∏—Å–∞—Ç—å HandHistory –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
        if (session.players.size === 0) {
          console.log(`üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HandHistory –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏ ${userData.sessionId}...`);
          const results = session.writeAllHandHistories();
          
          activeSessions.delete(userData.sessionId);
          console.log(`–°–µ—Å—Å–∏—è ${userData.sessionId} —É–¥–∞–ª–µ–Ω–∞`);
          
          // –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const totalFiles = results.filter(r => r.success).length;
          const totalHands = results.reduce((sum, r) => sum + r.handsCount, 0);
          console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ ${userData.sessionId}: ${totalHands} —Ä–∞–∑–¥–∞—á –≤ ${totalFiles} —Ñ–∞–π–ª–∞—Ö`);
        }
      }
      activeUsers.delete(socket.id);
    }
    console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);
  });
});

// ===== HTTP –ú–ê–†–®–†–£–¢–´ =====
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/handhistory-manager.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'handhistory-manager.html'));
});

// Health check endpoint –¥–ª—è Railway
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    uptime: process.uptime(),
    activeSessions: activeSessions.size,
    activeUsers: activeUsers.size,
    timestamp: new Date().toISOString()
  });
});

app.get('/api/status', (req, res) => {
  res.json({
    status: 'online',
    activeSessions: activeSessions.size,
    activeUsers: activeUsers.size,
    timestamp: new Date().toISOString()
  });
});

app.get('/api/sessions', (req, res) => {
  const sessions = Array.from(activeSessions.values()).map(session => ({
    sessionId: session.sessionId,
    playersCount: session.players.size,
    status: session.status,
    tablesCount: session.tables.length
  }));
  
  res.json({ sessions });
});

// üìÅ –ù–æ–≤—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è HandHistory
app.get('/api/handhistory', (req, res) => {
  const handhistoryDir = path.join(__dirname, 'handhistory');
  
  if (!fs.existsSync(handhistoryDir)) {
    return res.json({ files: [] });
  }
  
  try {
    const files = fs.readdirSync(handhistoryDir)
      .filter(file => file.endsWith('.txt'))
      .map(file => {
        const filePath = path.join(handhistoryDir, file);
        const stats = fs.statSync(filePath);
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const fileInfo = file.match(/hand_(.+)-(\d+)-(\d+)_table_(\d+)\.txt/);
        
        return {
          filename: file,
          sessionId: fileInfo ? fileInfo[1] : 'Unknown',
          tableId: fileInfo ? parseInt(fileInfo[4]) : 0,
          handsCount: fileInfo ? parseInt(fileInfo[3]) : 0,
          size: stats.size,
          created: stats.birthtime,
          modified: stats.mtime,
          downloadUrl: `/api/handhistory/download/${file}`
        };
      })
      .sort((a, b) => b.modified - a.modified); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    
    res.json({ files });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ handhistory:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ HandHistory' });
  }
});

app.get('/api/handhistory/download/:filename', (req, res) => {
  const filename = req.params.filename;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã
  if (!filename.endsWith('.txt') || filename.includes('/') || filename.includes('\\')) {
    return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' });
  }
  
  const filePath = path.join(__dirname, 'handhistory', filename);
  
  if (!fs.existsSync(filePath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  try {
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.sendFile(filePath);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

app.get('/api/handhistory/view/:filename', (req, res) => {
  const filename = req.params.filename;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã
  if (!filename.endsWith('.txt') || filename.includes('/') || filename.includes('\\')) {
    return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' });
  }
  
  const filePath = path.join(__dirname, 'handhistory', filename);
  
  if (!fs.existsSync(filePath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');
    res.send(content);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  console.log(`üìä Railway deployment ready!`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  });
});

module.exports = app; 
